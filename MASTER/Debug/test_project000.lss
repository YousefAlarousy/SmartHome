
test_project000.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  000062f8  0000638c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800118  00800118  00006444  2**0
                  ALLOC
  3 .stab         0000555c  00000000  00000000  00006444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a49  00000000  00000000  0000b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000d3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000d549  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000f71d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0001081e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000117a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00011be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 dd 20 	jmp	0x41ba	; 0x41ba <__vector_4>
      14:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__vector_5>
      18:	0c 94 9b 1f 	jmp	0x3f36	; 0x3f36 <__vector_6>
      1c:	0c 94 ce 1f 	jmp	0x3f9c	; 0x3f9c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__vector_10>
      2c:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 33       	cpi	r26, 0x33	; 51
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 22 	call	0x4484	; 0x4484 <main>
      8a:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1e 31 	jmp	0x623c	; 0x623c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1e 31 	jmp	0x623c	; 0x623c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 31 	jmp	0x6234	; 0x6234 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e ef       	ldi	r22, 0xFE	; 254
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 36 31 	jmp	0x626c	; 0x626c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1e 31 	jmp	0x623c	; 0x623c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1e 31 	jmp	0x623c	; 0x623c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1e 31 	jmp	0x623c	; 0x623c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 22 31 	jmp	0x6244	; 0x6244 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3e 31 	jmp	0x627c	; 0x627c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_Init>:

void (*ADC_PF)(void)=NULL ;


void ADC_Init()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	// Set reference voltage to AVCC and left-adjust the result
	ADMUX |= (1 << ADMUX_REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24

	// Enable ADC and enable ADC conversion complete interrupt
	ADCSRA |= (1 << ADCSRA_ADEN) | (1 << ADCSRA_ADIE);
     cb4:	a6 e2       	ldi	r26, 0x26	; 38
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 68       	ori	r24, 0x88	; 136
     cc0:	8c 93       	st	X, r24

	// Set ADC prescaler to 64 (Fadc = Fcpu / 64)
	ADCSRA |= (1 << ADCSRA_ADPS2) | (1 << ADCSRA_ADPS1);
     cc2:	a6 e2       	ldi	r26, 0x26	; 38
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e2       	ldi	r30, 0x26	; 38
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	86 60       	ori	r24, 0x06	; 6
     cce:	8c 93       	st	X, r24
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <ADC_SelectChannel>:
void ADC_SelectChannel(u8 channel)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	89 83       	std	Y+1, r24	; 0x01
	// Clear the channel bits and set the desired channel
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);
     ce2:	a7 e2       	ldi	r26, 0x27	; 39
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e2       	ldi	r30, 0x27	; 39
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	98 2f       	mov	r25, r24
     cee:	98 7f       	andi	r25, 0xF8	; 248
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	87 70       	andi	r24, 0x07	; 7
     cf4:	89 2b       	or	r24, r25
     cf6:	8c 93       	st	X, r24
}
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <ADC_StartConversionAndWait>:
void ADC_StartConversionAndWait()
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	// Start the conversion
	ADCSRA |= (1 << ADCSRA_ADSC);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	8c 93       	st	X, r24

	// Wait for the conversion to complete
	//while (ADCSRA & (1 << ADCSRA_ADSC));
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_Read>:
u16 ADC_Read()
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	// Return the ADC result (16-bit)
	return ADC_DATA;
     d24:	e4 e2       	ldi	r30, 0x24	; 36
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <ADC_voidSetCallBack>:

void ADC_voidSetCallBack(void (*Copy_pf)(void) )
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <ADC_voidSetCallBack+0x6>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	89 83       	std	Y+1, r24	; 0x01
	ADC_PF=Copy_pf ;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	90 93 19 01 	sts	0x0119, r25
     d48:	80 93 18 01 	sts	0x0118, r24
}
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <__vector_16>:


void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	2f 93       	push	r18
     d62:	3f 93       	push	r19
     d64:	4f 93       	push	r20
     d66:	5f 93       	push	r21
     d68:	6f 93       	push	r22
     d6a:	7f 93       	push	r23
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	af 93       	push	r26
     d72:	bf 93       	push	r27
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PF != NULL)
     d80:	80 91 18 01 	lds	r24, 0x0118
     d84:	90 91 19 01 	lds	r25, 0x0119
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	29 f0       	breq	.+10     	; 0xd96 <__vector_16+0x40>
	{

		ADC_PF();
     d8c:	e0 91 18 01 	lds	r30, 0x0118
     d90:	f0 91 19 01 	lds	r31, 0x0119
     d94:	09 95       	icall
	}
}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <EEPROM_voidWrite>:
#include "MTWI_interface.h"
#include "EEPROM_interface.h"


void EEPROM_voidWrite(u8 Copy_u8Data , u8 Copy_u8Address)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <EEPROM_voidWrite+0x6>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	6a 83       	std	Y+2, r22	; 0x02
	MTWI_voidStart();
     dca:	0e 94 29 21 	call	0x4252	; 0x4252 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
     dce:	80 ea       	ldi	r24, 0xA0	; 160
     dd0:	0e 94 39 21 	call	0x4272	; 0x4272 <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	0e 94 39 21 	call	0x4272	; 0x4272 <MTWI_voidWrite>

	/* Send Data */
	MTWI_voidWrite(Copy_u8Data);
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	0e 94 39 21 	call	0x4272	; 0x4272 <MTWI_voidWrite>

	MTWI_voidStop();
     de0:	0e 94 85 21 	call	0x430a	; 0x430a <MTWI_voidStop>

}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <EEPROM_voidRead>:

void EEPROM_voidRead(u8 Copy_u8Address , u8 *Copy_pu8Data)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <EEPROM_voidRead+0x6>
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	7b 83       	std	Y+3, r23	; 0x03
     dfe:	6a 83       	std	Y+2, r22	; 0x02
	MTWI_voidStart();
     e00:	0e 94 29 21 	call	0x4252	; 0x4252 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
     e04:	80 ea       	ldi	r24, 0xA0	; 160
     e06:	0e 94 39 21 	call	0x4272	; 0x4272 <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	0e 94 39 21 	call	0x4272	; 0x4272 <MTWI_voidWrite>

	/* Send repeated start */
	MTWI_voidStart();
     e10:	0e 94 29 21 	call	0x4252	; 0x4252 <MTWI_voidStart>
	/* send SLAVE ADDRESS with READ*/
	MTWI_voidWrite(0xA1);
     e14:	81 ea       	ldi	r24, 0xA1	; 161
     e16:	0e 94 39 21 	call	0x4272	; 0x4272 <MTWI_voidWrite>

	/* master read data byte */
	*Copy_pu8Data = MTWI_u8ReadWithACK();
     e1a:	0e 94 61 21 	call	0x42c2	; 0x42c2 <MTWI_u8ReadWithACK>
     e1e:	ea 81       	ldd	r30, Y+2	; 0x02
     e20:	fb 81       	ldd	r31, Y+3	; 0x03
     e22:	80 83       	st	Z, r24

	MTWI_voidStop();
     e24:	0e 94 85 21 	call	0x430a	; 0x430a <MTWI_voidStop>

}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <HKPD_u8GetPressedKey>:
#include "HKPD_interface.h"
#include "HKPD_private.h"
#include <util/delay.h>

u8 HKPD_u8GetPressedKey()
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	a2 97       	sbiw	r28, 0x22	; 34
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	u8 flag=0,Local_u8PinState,Local_u8PressedKey=NOT_PRESSED ;
     e48:	1c 82       	std	Y+4, r1	; 0x04
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIterator,Local_u8RowIterator;
	u8 ColArr[COL_SIZE]={KPD_C0,KPD_C1,KPD_C2,KPD_C3};
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	8e 83       	std	Y+6, r24	; 0x06
     e52:	85 e0       	ldi	r24, 0x05	; 5
     e54:	8f 83       	std	Y+7, r24	; 0x07
     e56:	86 e0       	ldi	r24, 0x06	; 6
     e58:	88 87       	std	Y+8, r24	; 0x08
     e5a:	87 e0       	ldi	r24, 0x07	; 7
     e5c:	89 87       	std	Y+9, r24	; 0x09
	u8 RowArr[ROW_SIZE]={KPD_R0,KPD_R1,KPD_R2,KPD_R3};
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	8a 87       	std	Y+10, r24	; 0x0a
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	8b 87       	std	Y+11, r24	; 0x0b
     e66:	84 e0       	ldi	r24, 0x04	; 4
     e68:	8c 87       	std	Y+12, r24	; 0x0c
     e6a:	85 e0       	ldi	r24, 0x05	; 5
     e6c:	8d 87       	std	Y+13, r24	; 0x0d
	u8 KPD_arr[ROW_SIZE][COL_SIZE]=KPD_Arr ;
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 96       	adiw	r24, 0x0e	; 14
     e72:	9f 8f       	std	Y+31, r25	; 0x1f
     e74:	8e 8f       	std	Y+30, r24	; 0x1e
     e76:	e8 e0       	ldi	r30, 0x08	; 8
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	f9 a3       	std	Y+33, r31	; 0x21
     e7c:	e8 a3       	std	Y+32, r30	; 0x20
     e7e:	f0 e1       	ldi	r31, 0x10	; 16
     e80:	fa a3       	std	Y+34, r31	; 0x22
     e82:	e8 a1       	ldd	r30, Y+32	; 0x20
     e84:	f9 a1       	ldd	r31, Y+33	; 0x21
     e86:	00 80       	ld	r0, Z
     e88:	88 a1       	ldd	r24, Y+32	; 0x20
     e8a:	99 a1       	ldd	r25, Y+33	; 0x21
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	99 a3       	std	Y+33, r25	; 0x21
     e90:	88 a3       	std	Y+32, r24	; 0x20
     e92:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e94:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e96:	00 82       	st	Z, r0
     e98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	9f 8f       	std	Y+31, r25	; 0x1f
     ea0:	8e 8f       	std	Y+30, r24	; 0x1e
     ea2:	9a a1       	ldd	r25, Y+34	; 0x22
     ea4:	91 50       	subi	r25, 0x01	; 1
     ea6:	9a a3       	std	Y+34, r25	; 0x22
     ea8:	ea a1       	ldd	r30, Y+34	; 0x22
     eaa:	ee 23       	and	r30, r30
     eac:	51 f7       	brne	.-44     	; 0xe82 <HKPD_u8GetPressedKey+0x4e>


	for(Local_u8ColumnIterator=0 ; Local_u8ColumnIterator<COL_SIZE ; Local_u8ColumnIterator++)
     eae:	1a 82       	std	Y+2, r1	; 0x02
     eb0:	6b c0       	rjmp	.+214    	; 0xf88 <HKPD_u8GetPressedKey+0x154>
	{
		MDIO_VoidSetPinValue(KPD_COL_PORT,ColArr[Local_u8ColumnIterator],DIO_PIN_LOW);
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	ce 01       	movw	r24, r28
     eba:	06 96       	adiw	r24, 0x06	; 6
     ebc:	fc 01       	movw	r30, r24
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	90 81       	ld	r25, Z
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	69 2f       	mov	r22, r25
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
		for(Local_u8RowIterator=0 ; Local_u8RowIterator<ROW_SIZE ; Local_u8RowIterator++)
     ece:	19 82       	std	Y+1, r1	; 0x01
     ed0:	43 c0       	rjmp	.+134    	; 0xf58 <HKPD_u8GetPressedKey+0x124>
		{
			MDIO_VoidGetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState);
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	0a 96       	adiw	r24, 0x0a	; 10
     edc:	fc 01       	movw	r30, r24
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	90 81       	ld	r25, Z
     ee4:	9e 01       	movw	r18, r28
     ee6:	2b 5f       	subi	r18, 0xFB	; 251
     ee8:	3f 4f       	sbci	r19, 0xFF	; 255
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	69 2f       	mov	r22, r25
     eee:	a9 01       	movw	r20, r18
     ef0:	0e 94 52 19 	call	0x32a4	; 0x32a4 <MDIO_VoidGetPinValue>
			if(Local_u8PinState == PRESSED)
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	88 23       	and	r24, r24
     ef8:	61 f5       	brne	.+88     	; 0xf52 <HKPD_u8GetPressedKey+0x11e>
			{
				Local_u8PressedKey=KPD_arr[Local_u8RowIterator][Local_u8ColumnIterator] ;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	48 2f       	mov	r20, r24
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	22 0f       	add	r18, r18
     f08:	33 1f       	adc	r19, r19
     f0a:	22 0f       	add	r18, r18
     f0c:	33 1f       	adc	r19, r19
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	84 0f       	add	r24, r20
     f18:	95 1f       	adc	r25, r21
     f1a:	fc 01       	movw	r30, r24
     f1c:	3d 96       	adiw	r30, 0x0d	; 13
     f1e:	80 81       	ld	r24, Z
     f20:	8b 83       	std	Y+3, r24	; 0x03
     f22:	11 c0       	rjmp	.+34     	; 0xf46 <HKPD_u8GetPressedKey+0x112>
				while(PRESSED==Local_u8PinState)
				{
					MDIO_VoidGetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState) ;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	ce 01       	movw	r24, r28
     f2c:	0a 96       	adiw	r24, 0x0a	; 10
     f2e:	fc 01       	movw	r30, r24
     f30:	e2 0f       	add	r30, r18
     f32:	f3 1f       	adc	r31, r19
     f34:	90 81       	ld	r25, Z
     f36:	9e 01       	movw	r18, r28
     f38:	2b 5f       	subi	r18, 0xFB	; 251
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	69 2f       	mov	r22, r25
     f40:	a9 01       	movw	r20, r18
     f42:	0e 94 52 19 	call	0x32a4	; 0x32a4 <MDIO_VoidGetPinValue>
		{
			MDIO_VoidGetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState);
			if(Local_u8PinState == PRESSED)
			{
				Local_u8PressedKey=KPD_arr[Local_u8RowIterator][Local_u8ColumnIterator] ;
				while(PRESSED==Local_u8PinState)
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	88 23       	and	r24, r24
     f4a:	61 f3       	breq	.-40     	; 0xf24 <HKPD_u8GetPressedKey+0xf0>
				{
					MDIO_VoidGetPinValue(KPD_ROW_PORT,RowArr[Local_u8RowIterator],&Local_u8PinState) ;
				}
				flag=1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	8c 83       	std	Y+4, r24	; 0x04
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <HKPD_u8GetPressedKey+0x12c>


	for(Local_u8ColumnIterator=0 ; Local_u8ColumnIterator<COL_SIZE ; Local_u8ColumnIterator++)
	{
		MDIO_VoidSetPinValue(KPD_COL_PORT,ColArr[Local_u8ColumnIterator],DIO_PIN_LOW);
		for(Local_u8RowIterator=0 ; Local_u8RowIterator<ROW_SIZE ; Local_u8RowIterator++)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <HKPD_u8GetPressedKey+0x12c>
     f5e:	b9 cf       	rjmp	.-142    	; 0xed2 <HKPD_u8GetPressedKey+0x9e>
				flag=1;
				break ;
			}

		}
		MDIO_VoidSetPinValue(KPD_COL_PORT,ColArr[Local_u8ColumnIterator],DIO_PIN_HIGH);
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	ce 01       	movw	r24, r28
     f68:	06 96       	adiw	r24, 0x06	; 6
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	90 81       	ld	r25, Z
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	69 2f       	mov	r22, r25
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
		if(flag==1)
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	39 f0       	breq	.+14     	; 0xf90 <HKPD_u8GetPressedKey+0x15c>
	u8 ColArr[COL_SIZE]={KPD_C0,KPD_C1,KPD_C2,KPD_C3};
	u8 RowArr[ROW_SIZE]={KPD_R0,KPD_R1,KPD_R2,KPD_R3};
	u8 KPD_arr[ROW_SIZE][COL_SIZE]=KPD_Arr ;


	for(Local_u8ColumnIterator=0 ; Local_u8ColumnIterator<COL_SIZE ; Local_u8ColumnIterator++)
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	8a 83       	std	Y+2, r24	; 0x02
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	84 30       	cpi	r24, 0x04	; 4
     f8c:	08 f4       	brcc	.+2      	; 0xf90 <HKPD_u8GetPressedKey+0x15c>
     f8e:	91 cf       	rjmp	.-222    	; 0xeb2 <HKPD_u8GetPressedKey+0x7e>
		{
			break ;
		}

	}
	return Local_u8PressedKey ;
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f92:	a2 96       	adiw	r28, 0x22	; 34
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <HLCD_voidInit>:
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"


void HLCD_voidInit(){
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	c8 59       	subi	r28, 0x98	; 152
     fb2:	d0 40       	sbci	r29, 0x00	; 0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	fe 01       	movw	r30, r28
     fc0:	eb 56       	subi	r30, 0x6B	; 107
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a0 e2       	ldi	r26, 0x20	; 32
     fca:	b2 e4       	ldi	r27, 0x42	; 66
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	8e 01       	movw	r16, r28
     fd6:	0f 56       	subi	r16, 0x6F	; 111
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	eb 56       	subi	r30, 0x6B	; 107
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a ef       	ldi	r20, 0xFA	; 250
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1002:	fe 01       	movw	r30, r28
    1004:	ef 56       	subi	r30, 0x6F	; 111
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    101c:	88 23       	and	r24, r24
    101e:	44 f4       	brge	.+16     	; 0x1030 <HLCD_voidInit+0x8c>
		__ticks = 1;
    1020:	fe 01       	movw	r30, r28
    1022:	e1 57       	subi	r30, 0x71	; 113
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	64 c0       	rjmp	.+200    	; 0x10f8 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    1030:	fe 01       	movw	r30, r28
    1032:	ef 56       	subi	r30, 0x6F	; 111
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    104a:	18 16       	cp	r1, r24
    104c:	0c f0       	brlt	.+2      	; 0x1050 <HLCD_voidInit+0xac>
    104e:	43 c0       	rjmp	.+134    	; 0x10d6 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1050:	fe 01       	movw	r30, r28
    1052:	eb 56       	subi	r30, 0x6B	; 107
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e2       	ldi	r20, 0x20	; 32
    1064:	51 e4       	ldi	r21, 0x41	; 65
    1066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	8e 01       	movw	r16, r28
    1070:	01 57       	subi	r16, 0x71	; 113
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	f8 01       	movw	r30, r16
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
    1086:	1f c0       	rjmp	.+62     	; 0x10c6 <HLCD_voidInit+0x122>
    1088:	fe 01       	movw	r30, r28
    108a:	e3 57       	subi	r30, 0x73	; 115
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	88 ec       	ldi	r24, 0xC8	; 200
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1096:	fe 01       	movw	r30, r28
    1098:	e3 57       	subi	r30, 0x73	; 115
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <HLCD_voidInit+0xfc>
    10a4:	fe 01       	movw	r30, r28
    10a6:	e3 57       	subi	r30, 0x73	; 115
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	de 01       	movw	r26, r28
    10b0:	a1 57       	subi	r26, 0x71	; 113
    10b2:	bf 4f       	sbci	r27, 0xFF	; 255
    10b4:	fe 01       	movw	r30, r28
    10b6:	e1 57       	subi	r30, 0x71	; 113
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c6:	fe 01       	movw	r30, r28
    10c8:	e1 57       	subi	r30, 0x71	; 113
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	d1 f6       	brne	.-76     	; 0x1088 <HLCD_voidInit+0xe4>
    10d4:	27 c0       	rjmp	.+78     	; 0x1124 <HLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d6:	8e 01       	movw	r16, r28
    10d8:	01 57       	subi	r16, 0x71	; 113
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	fe 01       	movw	r30, r28
    10de:	ef 56       	subi	r30, 0x6F	; 111
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	f8 01       	movw	r30, r16
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	80 83       	st	Z, r24
    10f8:	de 01       	movw	r26, r28
    10fa:	a5 57       	subi	r26, 0x75	; 117
    10fc:	bf 4f       	sbci	r27, 0xFF	; 255
    10fe:	fe 01       	movw	r30, r28
    1100:	e1 57       	subi	r30, 0x71	; 113
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	8d 93       	st	X+, r24
    110a:	9c 93       	st	X, r25
    110c:	fe 01       	movw	r30, r28
    110e:	e5 57       	subi	r30, 0x75	; 117
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <HLCD_voidInit+0x172>
    111a:	fe 01       	movw	r30, r28
    111c:	e5 57       	subi	r30, 0x75	; 117
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
	_delay_ms(40);

	/* manual 4 bit initialization of LCD */
	MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,DIO_PIN_HIGH);
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	64 e0       	ldi	r22, 0x04	; 4
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
	MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,DIO_PIN_HIGH);
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	65 e0       	ldi	r22, 0x05	; 5
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
	MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,DIO_PIN_LOW);
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	66 e0       	ldi	r22, 0x06	; 6
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
	MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,DIO_PIN_LOW);
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	67 e0       	ldi	r22, 0x07	; 7
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_PIN_LOW); 	/* RS=0, command  */
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_PIN_LOW); 	/* RW=0, command Write */
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    116a:	fe 01       	movw	r30, r28
    116c:	e9 57       	subi	r30, 0x79	; 121
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a0 e8       	ldi	r26, 0x80	; 128
    1176:	bf e3       	ldi	r27, 0x3F	; 63
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1180:	8e 01       	movw	r16, r28
    1182:	0d 57       	subi	r16, 0x7D	; 125
    1184:	1f 4f       	sbci	r17, 0xFF	; 255
    1186:	fe 01       	movw	r30, r28
    1188:	e9 57       	subi	r30, 0x79	; 121
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	2b ea       	ldi	r18, 0xAB	; 171
    1196:	3a ea       	ldi	r19, 0xAA	; 170
    1198:	4a e2       	ldi	r20, 0x2A	; 42
    119a:	50 e4       	ldi	r21, 0x40	; 64
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	f8 01       	movw	r30, r16
    11a6:	80 83       	st	Z, r24
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	a2 83       	std	Z+2, r26	; 0x02
    11ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11ae:	fe 01       	movw	r30, r28
    11b0:	ed 57       	subi	r30, 0x7D	; 125
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	34 f4       	brge	.+12     	; 0x11d8 <HLCD_voidInit+0x234>
		__ticks = 1;
    11cc:	fe 01       	movw	r30, r28
    11ce:	ee 57       	subi	r30, 0x7E	; 126
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 83       	st	Z, r24
    11d6:	e0 c0       	rjmp	.+448    	; 0x1398 <HLCD_voidInit+0x3f4>
	else if (__tmp > 255)
    11d8:	fe 01       	movw	r30, r28
    11da:	ed 57       	subi	r30, 0x7D	; 125
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	53 e4       	ldi	r21, 0x43	; 67
    11ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11f2:	18 16       	cp	r1, r24
    11f4:	0c f0       	brlt	.+2      	; 0x11f8 <HLCD_voidInit+0x254>
    11f6:	c0 c0       	rjmp	.+384    	; 0x1378 <HLCD_voidInit+0x3d4>
	{
		_delay_ms(__us / 1000.0);
    11f8:	fe 01       	movw	r30, r28
    11fa:	e9 57       	subi	r30, 0x79	; 121
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	4a e7       	ldi	r20, 0x7A	; 122
    120c:	54 e4       	ldi	r21, 0x44	; 68
    120e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	fe 01       	movw	r30, r28
    1218:	e2 58       	subi	r30, 0x82	; 130
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 83       	st	Z, r24
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	a2 83       	std	Z+2, r26	; 0x02
    1222:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1224:	8e 01       	movw	r16, r28
    1226:	06 58       	subi	r16, 0x86	; 134
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
    122a:	fe 01       	movw	r30, r28
    122c:	e2 58       	subi	r30, 0x82	; 130
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	60 81       	ld	r22, Z
    1232:	71 81       	ldd	r23, Z+1	; 0x01
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	93 81       	ldd	r25, Z+3	; 0x03
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a ef       	ldi	r20, 0xFA	; 250
    123e:	54 e4       	ldi	r21, 0x44	; 68
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	f8 01       	movw	r30, r16
    124a:	80 83       	st	Z, r24
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	a2 83       	std	Z+2, r26	; 0x02
    1250:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1252:	fe 01       	movw	r30, r28
    1254:	e6 58       	subi	r30, 0x86	; 134
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e8       	ldi	r20, 0x80	; 128
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    126c:	88 23       	and	r24, r24
    126e:	44 f4       	brge	.+16     	; 0x1280 <HLCD_voidInit+0x2dc>
		__ticks = 1;
    1270:	fe 01       	movw	r30, r28
    1272:	e8 58       	subi	r30, 0x88	; 136
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
    127e:	64 c0       	rjmp	.+200    	; 0x1348 <HLCD_voidInit+0x3a4>
	else if (__tmp > 65535)
    1280:	fe 01       	movw	r30, r28
    1282:	e6 58       	subi	r30, 0x86	; 134
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	3f ef       	ldi	r19, 0xFF	; 255
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	57 e4       	ldi	r21, 0x47	; 71
    1296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	0c f0       	brlt	.+2      	; 0x12a0 <HLCD_voidInit+0x2fc>
    129e:	43 c0       	rjmp	.+134    	; 0x1326 <HLCD_voidInit+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	fe 01       	movw	r30, r28
    12a2:	e2 58       	subi	r30, 0x82	; 130
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e2       	ldi	r20, 0x20	; 32
    12b4:	51 e4       	ldi	r21, 0x41	; 65
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8e 01       	movw	r16, r28
    12c0:	08 58       	subi	r16, 0x88	; 136
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	f8 01       	movw	r30, r16
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	80 83       	st	Z, r24
    12d6:	1f c0       	rjmp	.+62     	; 0x1316 <HLCD_voidInit+0x372>
    12d8:	fe 01       	movw	r30, r28
    12da:	ea 58       	subi	r30, 0x8A	; 138
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	88 ec       	ldi	r24, 0xC8	; 200
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	fe 01       	movw	r30, r28
    12e8:	ea 58       	subi	r30, 0x8A	; 138
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <HLCD_voidInit+0x34c>
    12f4:	fe 01       	movw	r30, r28
    12f6:	ea 58       	subi	r30, 0x8A	; 138
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	de 01       	movw	r26, r28
    1300:	a8 58       	subi	r26, 0x88	; 136
    1302:	bf 4f       	sbci	r27, 0xFF	; 255
    1304:	fe 01       	movw	r30, r28
    1306:	e8 58       	subi	r30, 0x88	; 136
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	11 96       	adiw	r26, 0x01	; 1
    1312:	9c 93       	st	X, r25
    1314:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1316:	fe 01       	movw	r30, r28
    1318:	e8 58       	subi	r30, 0x88	; 136
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	d1 f6       	brne	.-76     	; 0x12d8 <HLCD_voidInit+0x334>
    1324:	4b c0       	rjmp	.+150    	; 0x13bc <HLCD_voidInit+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	8e 01       	movw	r16, r28
    1328:	08 58       	subi	r16, 0x88	; 136
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	fe 01       	movw	r30, r28
    132e:	e6 58       	subi	r30, 0x86	; 134
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	f8 01       	movw	r30, r16
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	de 01       	movw	r26, r28
    134a:	ac 58       	subi	r26, 0x8C	; 140
    134c:	bf 4f       	sbci	r27, 0xFF	; 255
    134e:	fe 01       	movw	r30, r28
    1350:	e8 58       	subi	r30, 0x88	; 136
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	9c 93       	st	X, r25
    135c:	8e 93       	st	-X, r24
    135e:	fe 01       	movw	r30, r28
    1360:	ec 58       	subi	r30, 0x8C	; 140
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <HLCD_voidInit+0x3c4>
    136c:	fe 01       	movw	r30, r28
    136e:	ec 58       	subi	r30, 0x8C	; 140
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
    1376:	22 c0       	rjmp	.+68     	; 0x13bc <HLCD_voidInit+0x418>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1378:	8e 01       	movw	r16, r28
    137a:	0e 57       	subi	r16, 0x7E	; 126
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	fe 01       	movw	r30, r28
    1380:	ed 57       	subi	r30, 0x7D	; 125
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	f8 01       	movw	r30, r16
    1396:	80 83       	st	Z, r24
    1398:	de 01       	movw	r26, r28
    139a:	ad 58       	subi	r26, 0x8D	; 141
    139c:	bf 4f       	sbci	r27, 0xFF	; 255
    139e:	fe 01       	movw	r30, r28
    13a0:	ee 57       	subi	r30, 0x7E	; 126
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 81       	ld	r24, Z
    13a6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13a8:	fe 01       	movw	r30, r28
    13aa:	ed 58       	subi	r30, 0x8D	; 141
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	8a 95       	dec	r24
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <HLCD_voidInit+0x40c>
    13b4:	fe 01       	movw	r30, r28
    13b6:	ed 58       	subi	r30, 0x8D	; 141
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 83       	st	Z, r24
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    13c6:	fe 01       	movw	r30, r28
    13c8:	e1 59       	subi	r30, 0x91	; 145
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 ea       	ldi	r26, 0xA0	; 160
    13d2:	b0 e4       	ldi	r27, 0x40	; 64
    13d4:	80 83       	st	Z, r24
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	a2 83       	std	Z+2, r26	; 0x02
    13da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	8e 01       	movw	r16, r28
    13de:	05 59       	subi	r16, 0x95	; 149
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	fe 01       	movw	r30, r28
    13e4:	e1 59       	subi	r30, 0x91	; 145
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a ef       	ldi	r20, 0xFA	; 250
    13f6:	54 e4       	ldi	r21, 0x44	; 68
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	f8 01       	movw	r30, r16
    1402:	80 83       	st	Z, r24
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	a2 83       	std	Z+2, r26	; 0x02
    1408:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    140a:	fe 01       	movw	r30, r28
    140c:	e5 59       	subi	r30, 0x95	; 149
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	60 81       	ld	r22, Z
    1412:	71 81       	ldd	r23, Z+1	; 0x01
    1414:	82 81       	ldd	r24, Z+2	; 0x02
    1416:	93 81       	ldd	r25, Z+3	; 0x03
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	44 f4       	brge	.+16     	; 0x1438 <HLCD_voidInit+0x494>
		__ticks = 1;
    1428:	fe 01       	movw	r30, r28
    142a:	e7 59       	subi	r30, 0x97	; 151
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	80 83       	st	Z, r24
    1436:	64 c0       	rjmp	.+200    	; 0x1500 <HLCD_voidInit+0x55c>
	else if (__tmp > 65535)
    1438:	fe 01       	movw	r30, r28
    143a:	e5 59       	subi	r30, 0x95	; 149
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	0c f0       	brlt	.+2      	; 0x1458 <HLCD_voidInit+0x4b4>
    1456:	43 c0       	rjmp	.+134    	; 0x14de <HLCD_voidInit+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1458:	fe 01       	movw	r30, r28
    145a:	e1 59       	subi	r30, 0x91	; 145
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	8e 01       	movw	r16, r28
    1478:	07 59       	subi	r16, 0x97	; 151
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	f8 01       	movw	r30, r16
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	1f c0       	rjmp	.+62     	; 0x14ce <HLCD_voidInit+0x52a>
    1490:	fe 01       	movw	r30, r28
    1492:	e9 59       	subi	r30, 0x99	; 153
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	88 ec       	ldi	r24, 0xC8	; 200
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    149e:	fe 01       	movw	r30, r28
    14a0:	e9 59       	subi	r30, 0x99	; 153
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <HLCD_voidInit+0x504>
    14ac:	fe 01       	movw	r30, r28
    14ae:	e9 59       	subi	r30, 0x99	; 153
    14b0:	ff 4f       	sbci	r31, 0xFF	; 255
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b6:	de 01       	movw	r26, r28
    14b8:	a7 59       	subi	r26, 0x97	; 151
    14ba:	bf 4f       	sbci	r27, 0xFF	; 255
    14bc:	fe 01       	movw	r30, r28
    14be:	e7 59       	subi	r30, 0x97	; 151
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	11 96       	adiw	r26, 0x01	; 1
    14ca:	9c 93       	st	X, r25
    14cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	fe 01       	movw	r30, r28
    14d0:	e7 59       	subi	r30, 0x97	; 151
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	d1 f6       	brne	.-76     	; 0x1490 <HLCD_voidInit+0x4ec>
    14dc:	27 c0       	rjmp	.+78     	; 0x152c <HLCD_voidInit+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	8e 01       	movw	r16, r28
    14e0:	07 59       	subi	r16, 0x97	; 151
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	fe 01       	movw	r30, r28
    14e6:	e5 59       	subi	r30, 0x95	; 149
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	f8 01       	movw	r30, r16
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
    1500:	de 01       	movw	r26, r28
    1502:	ab 59       	subi	r26, 0x9B	; 155
    1504:	bf 4f       	sbci	r27, 0xFF	; 255
    1506:	fe 01       	movw	r30, r28
    1508:	e7 59       	subi	r30, 0x97	; 151
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	8d 93       	st	X+, r24
    1512:	9c 93       	st	X, r25
    1514:	fe 01       	movw	r30, r28
    1516:	eb 59       	subi	r30, 0x9B	; 155
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <HLCD_voidInit+0x57a>
    1522:	fe 01       	movw	r30, r28
    1524:	eb 59       	subi	r30, 0x9B	; 155
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24

	_delay_ms(5); /* min 4.1ms */

MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,DIO_PIN_HIGH);
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,DIO_PIN_HIGH);
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	65 e0       	ldi	r22, 0x05	; 5
    153a:	41 e0       	ldi	r20, 0x01	; 1
    153c:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,DIO_PIN_LOW);
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	66 e0       	ldi	r22, 0x06	; 6
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,DIO_PIN_LOW);
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	67 e0       	ldi	r22, 0x07	; 7
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_PIN_LOW); 	/* RS=0, command  */
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_PIN_LOW); 	/* RW=0, command Write */
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	41 e0       	ldi	r20, 0x01	; 1
    156e:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    1572:	fe 01       	movw	r30, r28
    1574:	ef 59       	subi	r30, 0x9F	; 159
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e8       	ldi	r26, 0x80	; 128
    157e:	bf e3       	ldi	r27, 0x3F	; 63
    1580:	80 83       	st	Z, r24
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	a2 83       	std	Z+2, r26	; 0x02
    1586:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1588:	8e 01       	movw	r16, r28
    158a:	03 5a       	subi	r16, 0xA3	; 163
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	fe 01       	movw	r30, r28
    1590:	ef 59       	subi	r30, 0x9F	; 159
    1592:	ff 4f       	sbci	r31, 0xFF	; 255
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	2b ea       	ldi	r18, 0xAB	; 171
    159e:	3a ea       	ldi	r19, 0xAA	; 170
    15a0:	4a e2       	ldi	r20, 0x2A	; 42
    15a2:	50 e4       	ldi	r21, 0x40	; 64
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	f8 01       	movw	r30, r16
    15ae:	80 83       	st	Z, r24
    15b0:	91 83       	std	Z+1, r25	; 0x01
    15b2:	a2 83       	std	Z+2, r26	; 0x02
    15b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b6:	fe 01       	movw	r30, r28
    15b8:	e3 5a       	subi	r30, 0xA3	; 163
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	34 f4       	brge	.+12     	; 0x15e0 <HLCD_voidInit+0x63c>
		__ticks = 1;
    15d4:	fe 01       	movw	r30, r28
    15d6:	e4 5a       	subi	r30, 0xA4	; 164
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 83       	st	Z, r24
    15de:	e0 c0       	rjmp	.+448    	; 0x17a0 <HLCD_voidInit+0x7fc>
	else if (__tmp > 255)
    15e0:	fe 01       	movw	r30, r28
    15e2:	e3 5a       	subi	r30, 0xA3	; 163
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	53 e4       	ldi	r21, 0x43	; 67
    15f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <HLCD_voidInit+0x65c>
    15fe:	c0 c0       	rjmp	.+384    	; 0x1780 <HLCD_voidInit+0x7dc>
	{
		_delay_ms(__us / 1000.0);
    1600:	fe 01       	movw	r30, r28
    1602:	ef 59       	subi	r30, 0x9F	; 159
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a e7       	ldi	r20, 0x7A	; 122
    1614:	54 e4       	ldi	r21, 0x44	; 68
    1616:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	fe 01       	movw	r30, r28
    1620:	e8 5a       	subi	r30, 0xA8	; 168
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 83       	st	Z, r24
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	a2 83       	std	Z+2, r26	; 0x02
    162a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	8e 01       	movw	r16, r28
    162e:	0c 5a       	subi	r16, 0xAC	; 172
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    1632:	fe 01       	movw	r30, r28
    1634:	e8 5a       	subi	r30, 0xA8	; 168
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a ef       	ldi	r20, 0xFA	; 250
    1646:	54 e4       	ldi	r21, 0x44	; 68
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	f8 01       	movw	r30, r16
    1652:	80 83       	st	Z, r24
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	a2 83       	std	Z+2, r26	; 0x02
    1658:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    165a:	fe 01       	movw	r30, r28
    165c:	ec 5a       	subi	r30, 0xAC	; 172
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	60 81       	ld	r22, Z
    1662:	71 81       	ldd	r23, Z+1	; 0x01
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	44 f4       	brge	.+16     	; 0x1688 <HLCD_voidInit+0x6e4>
		__ticks = 1;
    1678:	fe 01       	movw	r30, r28
    167a:	ee 5a       	subi	r30, 0xAE	; 174
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    1686:	64 c0       	rjmp	.+200    	; 0x1750 <HLCD_voidInit+0x7ac>
	else if (__tmp > 65535)
    1688:	fe 01       	movw	r30, r28
    168a:	ec 5a       	subi	r30, 0xAC	; 172
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	0c f0       	brlt	.+2      	; 0x16a8 <HLCD_voidInit+0x704>
    16a6:	43 c0       	rjmp	.+134    	; 0x172e <HLCD_voidInit+0x78a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	fe 01       	movw	r30, r28
    16aa:	e8 5a       	subi	r30, 0xA8	; 168
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e2       	ldi	r20, 0x20	; 32
    16bc:	51 e4       	ldi	r21, 0x41	; 65
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8e 01       	movw	r16, r28
    16c8:	0e 5a       	subi	r16, 0xAE	; 174
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	f8 01       	movw	r30, r16
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	1f c0       	rjmp	.+62     	; 0x171e <HLCD_voidInit+0x77a>
    16e0:	fe 01       	movw	r30, r28
    16e2:	e0 5b       	subi	r30, 0xB0	; 176
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	88 ec       	ldi	r24, 0xC8	; 200
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    16ee:	fe 01       	movw	r30, r28
    16f0:	e0 5b       	subi	r30, 0xB0	; 176
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <HLCD_voidInit+0x754>
    16fc:	fe 01       	movw	r30, r28
    16fe:	e0 5b       	subi	r30, 0xB0	; 176
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1706:	de 01       	movw	r26, r28
    1708:	ae 5a       	subi	r26, 0xAE	; 174
    170a:	bf 4f       	sbci	r27, 0xFF	; 255
    170c:	fe 01       	movw	r30, r28
    170e:	ee 5a       	subi	r30, 0xAE	; 174
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	11 96       	adiw	r26, 0x01	; 1
    171a:	9c 93       	st	X, r25
    171c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	fe 01       	movw	r30, r28
    1720:	ee 5a       	subi	r30, 0xAE	; 174
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	d1 f6       	brne	.-76     	; 0x16e0 <HLCD_voidInit+0x73c>
    172c:	4b c0       	rjmp	.+150    	; 0x17c4 <HLCD_voidInit+0x820>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	8e 01       	movw	r16, r28
    1730:	0e 5a       	subi	r16, 0xAE	; 174
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	fe 01       	movw	r30, r28
    1736:	ec 5a       	subi	r30, 0xAC	; 172
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	93 81       	ldd	r25, Z+3	; 0x03
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	f8 01       	movw	r30, r16
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
    1750:	de 01       	movw	r26, r28
    1752:	a2 5b       	subi	r26, 0xB2	; 178
    1754:	bf 4f       	sbci	r27, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	ee 5a       	subi	r30, 0xAE	; 174
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	11 96       	adiw	r26, 0x01	; 1
    1762:	9c 93       	st	X, r25
    1764:	8e 93       	st	-X, r24
    1766:	fe 01       	movw	r30, r28
    1768:	e2 5b       	subi	r30, 0xB2	; 178
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <HLCD_voidInit+0x7cc>
    1774:	fe 01       	movw	r30, r28
    1776:	e2 5b       	subi	r30, 0xB2	; 178
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
    177e:	22 c0       	rjmp	.+68     	; 0x17c4 <HLCD_voidInit+0x820>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1780:	8e 01       	movw	r16, r28
    1782:	04 5a       	subi	r16, 0xA4	; 164
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	fe 01       	movw	r30, r28
    1788:	e3 5a       	subi	r30, 0xA3	; 163
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	f8 01       	movw	r30, r16
    179e:	80 83       	st	Z, r24
    17a0:	de 01       	movw	r26, r28
    17a2:	a3 5b       	subi	r26, 0xB3	; 179
    17a4:	bf 4f       	sbci	r27, 0xFF	; 255
    17a6:	fe 01       	movw	r30, r28
    17a8:	e4 5a       	subi	r30, 0xA4	; 164
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17b0:	fe 01       	movw	r30, r28
    17b2:	e3 5b       	subi	r30, 0xB3	; 179
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 81       	ld	r24, Z
    17b8:	8a 95       	dec	r24
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <HLCD_voidInit+0x814>
    17bc:	fe 01       	movw	r30, r28
    17be:	e3 5b       	subi	r30, 0xB3	; 179
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 83       	st	Z, r24
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    17ce:	fe 01       	movw	r30, r28
    17d0:	e7 5b       	subi	r30, 0xB7	; 183
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e8       	ldi	r26, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	80 83       	st	Z, r24
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	a2 83       	std	Z+2, r26	; 0x02
    17e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	8e 01       	movw	r16, r28
    17e6:	0b 5b       	subi	r16, 0xBB	; 187
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	fe 01       	movw	r30, r28
    17ec:	e7 5b       	subi	r30, 0xB7	; 183
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	f8 01       	movw	r30, r16
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	a2 83       	std	Z+2, r26	; 0x02
    1810:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1812:	fe 01       	movw	r30, r28
    1814:	eb 5b       	subi	r30, 0xBB	; 187
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	44 f4       	brge	.+16     	; 0x1840 <HLCD_voidInit+0x89c>
		__ticks = 1;
    1830:	fe 01       	movw	r30, r28
    1832:	ed 5b       	subi	r30, 0xBD	; 189
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
    183e:	64 c0       	rjmp	.+200    	; 0x1908 <HLCD_voidInit+0x964>
	else if (__tmp > 65535)
    1840:	fe 01       	movw	r30, r28
    1842:	eb 5b       	subi	r30, 0xBB	; 187
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	57 e4       	ldi	r21, 0x47	; 71
    1856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	0c f0       	brlt	.+2      	; 0x1860 <HLCD_voidInit+0x8bc>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <HLCD_voidInit+0x942>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	fe 01       	movw	r30, r28
    1862:	e7 5b       	subi	r30, 0xB7	; 183
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8e 01       	movw	r16, r28
    1880:	0d 5b       	subi	r16, 0xBD	; 189
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	f8 01       	movw	r30, r16
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	1f c0       	rjmp	.+62     	; 0x18d6 <HLCD_voidInit+0x932>
    1898:	fe 01       	movw	r30, r28
    189a:	ef 5b       	subi	r30, 0xBF	; 191
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	88 ec       	ldi	r24, 0xC8	; 200
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 5b       	subi	r30, 0xBF	; 191
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <HLCD_voidInit+0x90c>
    18b4:	fe 01       	movw	r30, r28
    18b6:	ef 5b       	subi	r30, 0xBF	; 191
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	de 01       	movw	r26, r28
    18c0:	ad 5b       	subi	r26, 0xBD	; 189
    18c2:	bf 4f       	sbci	r27, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 5b       	subi	r30, 0xBD	; 189
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	9c 93       	st	X, r25
    18d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d6:	fe 01       	movw	r30, r28
    18d8:	ed 5b       	subi	r30, 0xBD	; 189
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	d1 f6       	brne	.-76     	; 0x1898 <HLCD_voidInit+0x8f4>
    18e4:	24 c0       	rjmp	.+72     	; 0x192e <HLCD_voidInit+0x98a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	8e 01       	movw	r16, r28
    18e8:	0d 5b       	subi	r16, 0xBD	; 189
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	eb 5b       	subi	r30, 0xBB	; 187
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	fe 01       	movw	r30, r28
    190a:	ed 5b       	subi	r30, 0xBD	; 189
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	fe 01       	movw	r30, r28
    1914:	ff 96       	adiw	r30, 0x3f	; 63
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	fe 01       	movw	r30, r28
    191c:	ff 96       	adiw	r30, 0x3f	; 63
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <HLCD_voidInit+0x97e>
    1926:	fe 01       	movw	r30, r28
    1928:	ff 96       	adiw	r30, 0x3f	; 63
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24

	_delay_ms(1);

MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,DIO_PIN_HIGH);
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	64 e0       	ldi	r22, 0x04	; 4
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,DIO_PIN_HIGH);
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	65 e0       	ldi	r22, 0x05	; 5
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,DIO_PIN_LOW);
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	66 e0       	ldi	r22, 0x06	; 6
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,DIO_PIN_LOW);
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	67 e0       	ldi	r22, 0x07	; 7
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_PIN_LOW); 	/* RS=0, command  */
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_PIN_LOW); 	/* RW=0, command Write */
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 e8       	ldi	r26, 0x80	; 128
    197a:	bf e3       	ldi	r27, 0x3F	; 63
    197c:	8b af       	std	Y+59, r24	; 0x3b
    197e:	9c af       	std	Y+60, r25	; 0x3c
    1980:	ad af       	std	Y+61, r26	; 0x3d
    1982:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1984:	6b ad       	ldd	r22, Y+59	; 0x3b
    1986:	7c ad       	ldd	r23, Y+60	; 0x3c
    1988:	8d ad       	ldd	r24, Y+61	; 0x3d
    198a:	9e ad       	ldd	r25, Y+62	; 0x3e
    198c:	2b ea       	ldi	r18, 0xAB	; 171
    198e:	3a ea       	ldi	r19, 0xAA	; 170
    1990:	4a e2       	ldi	r20, 0x2A	; 42
    1992:	50 e4       	ldi	r21, 0x40	; 64
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8f ab       	std	Y+55, r24	; 0x37
    199e:	98 af       	std	Y+56, r25	; 0x38
    19a0:	a9 af       	std	Y+57, r26	; 0x39
    19a2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19a4:	6f a9       	ldd	r22, Y+55	; 0x37
    19a6:	78 ad       	ldd	r23, Y+56	; 0x38
    19a8:	89 ad       	ldd	r24, Y+57	; 0x39
    19aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	1c f4       	brge	.+6      	; 0x19c2 <HLCD_voidInit+0xa1e>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	8e ab       	std	Y+54, r24	; 0x36
    19c0:	91 c0       	rjmp	.+290    	; 0x1ae4 <HLCD_voidInit+0xb40>
	else if (__tmp > 255)
    19c2:	6f a9       	ldd	r22, Y+55	; 0x37
    19c4:	78 ad       	ldd	r23, Y+56	; 0x38
    19c6:	89 ad       	ldd	r24, Y+57	; 0x39
    19c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	53 e4       	ldi	r21, 0x43	; 67
    19d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	0c f0       	brlt	.+2      	; 0x19dc <HLCD_voidInit+0xa38>
    19da:	7b c0       	rjmp	.+246    	; 0x1ad2 <HLCD_voidInit+0xb2e>
	{
		_delay_ms(__us / 1000.0);
    19dc:	6b ad       	ldd	r22, Y+59	; 0x3b
    19de:	7c ad       	ldd	r23, Y+60	; 0x3c
    19e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	4a e7       	ldi	r20, 0x7A	; 122
    19ea:	54 e4       	ldi	r21, 0x44	; 68
    19ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8a ab       	std	Y+50, r24	; 0x32
    19f6:	9b ab       	std	Y+51, r25	; 0x33
    19f8:	ac ab       	std	Y+52, r26	; 0x34
    19fa:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6a a9       	ldd	r22, Y+50	; 0x32
    19fe:	7b a9       	ldd	r23, Y+51	; 0x33
    1a00:	8c a9       	ldd	r24, Y+52	; 0x34
    1a02:	9d a9       	ldd	r25, Y+53	; 0x35
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a ef       	ldi	r20, 0xFA	; 250
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8e a7       	std	Y+46, r24	; 0x2e
    1a16:	9f a7       	std	Y+47, r25	; 0x2f
    1a18:	a8 ab       	std	Y+48, r26	; 0x30
    1a1a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a1c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a1e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a20:	88 a9       	ldd	r24, Y+48	; 0x30
    1a22:	99 a9       	ldd	r25, Y+49	; 0x31
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <HLCD_voidInit+0xa9a>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9d a7       	std	Y+45, r25	; 0x2d
    1a3a:	8c a7       	std	Y+44, r24	; 0x2c
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <HLCD_voidInit+0xb18>
	else if (__tmp > 65535)
    1a3e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a40:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a42:	88 a9       	ldd	r24, Y+48	; 0x30
    1a44:	99 a9       	ldd	r25, Y+49	; 0x31
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <HLCD_voidInit+0xb04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6a a9       	ldd	r22, Y+50	; 0x32
    1a58:	7b a9       	ldd	r23, Y+51	; 0x33
    1a5a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a5c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9d a7       	std	Y+45, r25	; 0x2d
    1a7c:	8c a7       	std	Y+44, r24	; 0x2c
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <HLCD_voidInit+0xafa>
    1a80:	88 ec       	ldi	r24, 0xC8	; 200
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9b a7       	std	Y+43, r25	; 0x2b
    1a86:	8a a7       	std	Y+42, r24	; 0x2a
    1a88:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a8a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <HLCD_voidInit+0xae8>
    1a90:	9b a7       	std	Y+43, r25	; 0x2b
    1a92:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a96:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9d a7       	std	Y+45, r25	; 0x2d
    1a9c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aa0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <HLCD_voidInit+0xadc>
    1aa6:	24 c0       	rjmp	.+72     	; 0x1af0 <HLCD_voidInit+0xb4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aaa:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aac:	88 a9       	ldd	r24, Y+48	; 0x30
    1aae:	99 a9       	ldd	r25, Y+49	; 0x31
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9d a7       	std	Y+45, r25	; 0x2d
    1aba:	8c a7       	std	Y+44, r24	; 0x2c
    1abc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1abe:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ac0:	99 a7       	std	Y+41, r25	; 0x29
    1ac2:	88 a7       	std	Y+40, r24	; 0x28
    1ac4:	88 a5       	ldd	r24, Y+40	; 0x28
    1ac6:	99 a5       	ldd	r25, Y+41	; 0x29
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <HLCD_voidInit+0xb24>
    1acc:	99 a7       	std	Y+41, r25	; 0x29
    1ace:	88 a7       	std	Y+40, r24	; 0x28
    1ad0:	0f c0       	rjmp	.+30     	; 0x1af0 <HLCD_voidInit+0xb4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ad2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ad4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ad6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ad8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8e ab       	std	Y+54, r24	; 0x36
    1ae4:	8e a9       	ldd	r24, Y+54	; 0x36
    1ae6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ae8:	8f a1       	ldd	r24, Y+39	; 0x27
    1aea:	8a 95       	dec	r24
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <HLCD_voidInit+0xb46>
    1aee:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	62 e0       	ldi	r22, 0x02	; 2
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>


MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,DIO_PIN_LOW);
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	64 e0       	ldi	r22, 0x04	; 4
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,DIO_PIN_HIGH);
    1b04:	83 e0       	ldi	r24, 0x03	; 3
    1b06:	65 e0       	ldi	r22, 0x05	; 5
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,DIO_PIN_LOW);
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	66 e0       	ldi	r22, 0x06	; 6
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,DIO_PIN_LOW);
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	67 e0       	ldi	r22, 0x07	; 7
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_PIN_LOW); 	/* RS=0, command  */
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_PIN_LOW); 	/* RW=0, command Write */
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e8       	ldi	r26, 0x80	; 128
    1b46:	bf e3       	ldi	r27, 0x3F	; 63
    1b48:	8b a3       	std	Y+35, r24	; 0x23
    1b4a:	9c a3       	std	Y+36, r25	; 0x24
    1b4c:	ad a3       	std	Y+37, r26	; 0x25
    1b4e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b50:	6b a1       	ldd	r22, Y+35	; 0x23
    1b52:	7c a1       	ldd	r23, Y+36	; 0x24
    1b54:	8d a1       	ldd	r24, Y+37	; 0x25
    1b56:	9e a1       	ldd	r25, Y+38	; 0x26
    1b58:	2b ea       	ldi	r18, 0xAB	; 171
    1b5a:	3a ea       	ldi	r19, 0xAA	; 170
    1b5c:	4a e2       	ldi	r20, 0x2A	; 42
    1b5e:	50 e4       	ldi	r21, 0x40	; 64
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8f 8f       	std	Y+31, r24	; 0x1f
    1b6a:	98 a3       	std	Y+32, r25	; 0x20
    1b6c:	a9 a3       	std	Y+33, r26	; 0x21
    1b6e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b70:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b72:	78 a1       	ldd	r23, Y+32	; 0x20
    1b74:	89 a1       	ldd	r24, Y+33	; 0x21
    1b76:	9a a1       	ldd	r25, Y+34	; 0x22
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	1c f4       	brge	.+6      	; 0x1b8e <HLCD_voidInit+0xbea>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b8c:	91 c0       	rjmp	.+290    	; 0x1cb0 <HLCD_voidInit+0xd0c>
	else if (__tmp > 255)
    1b8e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b90:	78 a1       	ldd	r23, Y+32	; 0x20
    1b92:	89 a1       	ldd	r24, Y+33	; 0x21
    1b94:	9a a1       	ldd	r25, Y+34	; 0x22
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	0c f0       	brlt	.+2      	; 0x1ba8 <HLCD_voidInit+0xc04>
    1ba6:	7b c0       	rjmp	.+246    	; 0x1c9e <HLCD_voidInit+0xcfa>
	{
		_delay_ms(__us / 1000.0);
    1ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    1baa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bac:	8d a1       	ldd	r24, Y+37	; 0x25
    1bae:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a e7       	ldi	r20, 0x7A	; 122
    1bb6:	54 e4       	ldi	r21, 0x44	; 68
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8a 8f       	std	Y+26, r24	; 0x1a
    1bc2:	9b 8f       	std	Y+27, r25	; 0x1b
    1bc4:	ac 8f       	std	Y+28, r26	; 0x1c
    1bc6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a ef       	ldi	r20, 0xFA	; 250
    1bd6:	54 e4       	ldi	r21, 0x44	; 68
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8e 8b       	std	Y+22, r24	; 0x16
    1be2:	9f 8b       	std	Y+23, r25	; 0x17
    1be4:	a8 8f       	std	Y+24, r26	; 0x18
    1be6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1be8:	6e 89       	ldd	r22, Y+22	; 0x16
    1bea:	7f 89       	ldd	r23, Y+23	; 0x17
    1bec:	88 8d       	ldd	r24, Y+24	; 0x18
    1bee:	99 8d       	ldd	r25, Y+25	; 0x19
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <HLCD_voidInit+0xc66>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9d 8b       	std	Y+21, r25	; 0x15
    1c06:	8c 8b       	std	Y+20, r24	; 0x14
    1c08:	3f c0       	rjmp	.+126    	; 0x1c88 <HLCD_voidInit+0xce4>
	else if (__tmp > 65535)
    1c0a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c0c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c0e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c10:	99 8d       	ldd	r25, Y+25	; 0x19
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	4c f5       	brge	.+82     	; 0x1c74 <HLCD_voidInit+0xcd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c24:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c28:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9d 8b       	std	Y+21, r25	; 0x15
    1c48:	8c 8b       	std	Y+20, r24	; 0x14
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <HLCD_voidInit+0xcc6>
    1c4c:	88 ec       	ldi	r24, 0xC8	; 200
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9b 8b       	std	Y+19, r25	; 0x13
    1c52:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c54:	8a 89       	ldd	r24, Y+18	; 0x12
    1c56:	9b 89       	ldd	r25, Y+19	; 0x13
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <HLCD_voidInit+0xcb4>
    1c5c:	9b 8b       	std	Y+19, r25	; 0x13
    1c5e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	8c 89       	ldd	r24, Y+20	; 0x14
    1c62:	9d 89       	ldd	r25, Y+21	; 0x15
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9d 8b       	std	Y+21, r25	; 0x15
    1c68:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c6c:	9d 89       	ldd	r25, Y+21	; 0x15
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <HLCD_voidInit+0xca8>
    1c72:	24 c0       	rjmp	.+72     	; 0x1cbc <HLCD_voidInit+0xd18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	6e 89       	ldd	r22, Y+22	; 0x16
    1c76:	7f 89       	ldd	r23, Y+23	; 0x17
    1c78:	88 8d       	ldd	r24, Y+24	; 0x18
    1c7a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9d 8b       	std	Y+21, r25	; 0x15
    1c86:	8c 8b       	std	Y+20, r24	; 0x14
    1c88:	8c 89       	ldd	r24, Y+20	; 0x14
    1c8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c8c:	99 8b       	std	Y+17, r25	; 0x11
    1c8e:	88 8b       	std	Y+16, r24	; 0x10
    1c90:	88 89       	ldd	r24, Y+16	; 0x10
    1c92:	99 89       	ldd	r25, Y+17	; 0x11
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <HLCD_voidInit+0xcf0>
    1c98:	99 8b       	std	Y+17, r25	; 0x11
    1c9a:	88 8b       	std	Y+16, r24	; 0x10
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <HLCD_voidInit+0xd18>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c9e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ca0:	78 a1       	ldd	r23, Y+32	; 0x20
    1ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	8e 8f       	std	Y+30, r24	; 0x1e
    1cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb6:	8a 95       	dec	r24
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <HLCD_voidInit+0xd12>
    1cba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

	HLCD_voidSendCommand(0x02); 	/*CMD for 4bit		*/
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x28);		/* Enabling 2lies 5*7   */
    1ccc:	88 e2       	ldi	r24, 0x28	; 40
    1cce:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x0c); 	/* setting cursor on and off */
    1cd2:	8c e0       	ldi	r24, 0x0C	; 12
    1cd4:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x06);		/* Increment cursor (shift cursor to right)	*/
    1cd8:	86 e0       	ldi	r24, 0x06	; 6
    1cda:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0x01);		/* Clear display screen */
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e0       	ldi	r26, 0x00	; 0
    1cea:	b0 e4       	ldi	r27, 0x40	; 64
    1cec:	8b 87       	std	Y+11, r24	; 0x0b
    1cee:	9c 87       	std	Y+12, r25	; 0x0c
    1cf0:	ad 87       	std	Y+13, r26	; 0x0d
    1cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a ef       	ldi	r20, 0xFA	; 250
    1d02:	54 e4       	ldi	r21, 0x44	; 68
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8f 83       	std	Y+7, r24	; 0x07
    1d0e:	98 87       	std	Y+8, r25	; 0x08
    1d10:	a9 87       	std	Y+9, r26	; 0x09
    1d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <HLCD_voidInit+0xd92>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <HLCD_voidInit+0xe10>
	else if (__tmp > 65535)
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <HLCD_voidInit+0xdfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <HLCD_voidInit+0xdf2>
    1d78:	88 ec       	ldi	r24, 0xC8	; 200
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <HLCD_voidInit+0xde0>
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <HLCD_voidInit+0xdd4>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <HLCD_voidInit+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <HLCD_voidInit+0xe1c>
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1dc8:	c8 56       	subi	r28, 0x68	; 104
    1dca:	df 4f       	sbci	r29, 0xFF	; 255
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8Data){
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	c7 55       	subi	r28, 0x57	; 87
    1dee:	d0 40       	sbci	r29, 0x00	; 0
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e9 5a       	subi	r30, 0xA9	; 169
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 83       	st	Z, r24

	/*Sending Data upper nibble*/
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Data>>4)&1));
    1e02:	fe 01       	movw	r30, r28
    1e04:	e9 5a       	subi	r30, 0xA9	; 169
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 95       	swap	r24
    1e0c:	8f 70       	andi	r24, 0x0F	; 15
    1e0e:	98 2f       	mov	r25, r24
    1e10:	91 70       	andi	r25, 0x01	; 1
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	64 e0       	ldi	r22, 0x04	; 4
    1e16:	49 2f       	mov	r20, r25
    1e18:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Data>>5)&1));
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e9 5a       	subi	r30, 0xA9	; 169
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	82 95       	swap	r24
    1e26:	86 95       	lsr	r24
    1e28:	87 70       	andi	r24, 0x07	; 7
    1e2a:	98 2f       	mov	r25, r24
    1e2c:	91 70       	andi	r25, 0x01	; 1
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	65 e0       	ldi	r22, 0x05	; 5
    1e32:	49 2f       	mov	r20, r25
    1e34:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Data>>6)&1));
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e9 5a       	subi	r30, 0xA9	; 169
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	82 95       	swap	r24
    1e42:	86 95       	lsr	r24
    1e44:	86 95       	lsr	r24
    1e46:	83 70       	andi	r24, 0x03	; 3
    1e48:	98 2f       	mov	r25, r24
    1e4a:	91 70       	andi	r25, 0x01	; 1
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	66 e0       	ldi	r22, 0x06	; 6
    1e50:	49 2f       	mov	r20, r25
    1e52:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Data>>7)&1));
    1e56:	fe 01       	movw	r30, r28
    1e58:	e9 5a       	subi	r30, 0xA9	; 169
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	98 2f       	mov	r25, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	99 27       	eor	r25, r25
    1e64:	99 1f       	adc	r25, r25
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	67 e0       	ldi	r22, 0x07	; 7
    1e6a:	49 2f       	mov	r20, r25
    1e6c:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_PIN_HIGH);	/*	SET RS to send data */
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_PIN_LOW);	/*	CLR RW to Enable write */
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	61 e0       	ldi	r22, 0x01	; 1
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

	/* set EN for 2ms to make LCD CPU reads the data  */
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	62 e0       	ldi	r22, 0x02	; 2
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    1e8e:	fe 01       	movw	r30, r28
    1e90:	ed 5a       	subi	r30, 0xAD	; 173
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e8       	ldi	r26, 0x80	; 128
    1e9a:	bf e3       	ldi	r27, 0x3F	; 63
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ea4:	8e 01       	movw	r16, r28
    1ea6:	01 5b       	subi	r16, 0xB1	; 177
    1ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ed 5a       	subi	r30, 0xAD	; 173
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	60 81       	ld	r22, Z
    1eb2:	71 81       	ldd	r23, Z+1	; 0x01
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	2b ea       	ldi	r18, 0xAB	; 171
    1eba:	3a ea       	ldi	r19, 0xAA	; 170
    1ebc:	4a e2       	ldi	r20, 0x2A	; 42
    1ebe:	50 e4       	ldi	r21, 0x40	; 64
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	f8 01       	movw	r30, r16
    1eca:	80 83       	st	Z, r24
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	a2 83       	std	Z+2, r26	; 0x02
    1ed0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e1 5b       	subi	r30, 0xB1	; 177
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	34 f4       	brge	.+12     	; 0x1efc <HLCD_voidSendData+0x11c>
		__ticks = 1;
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e2 5b       	subi	r30, 0xB2	; 178
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 83       	st	Z, r24
    1efa:	e0 c0       	rjmp	.+448    	; 0x20bc <HLCD_voidSendData+0x2dc>
	else if (__tmp > 255)
    1efc:	fe 01       	movw	r30, r28
    1efe:	e1 5b       	subi	r30, 0xB1	; 177
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	53 e4       	ldi	r21, 0x43	; 67
    1f12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	0c f0       	brlt	.+2      	; 0x1f1c <HLCD_voidSendData+0x13c>
    1f1a:	c0 c0       	rjmp	.+384    	; 0x209c <HLCD_voidSendData+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ed 5a       	subi	r30, 0xAD	; 173
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a e7       	ldi	r20, 0x7A	; 122
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e6 5b       	subi	r30, 0xB6	; 182
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 83       	st	Z, r24
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	a2 83       	std	Z+2, r26	; 0x02
    1f46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	8e 01       	movw	r16, r28
    1f4a:	0a 5b       	subi	r16, 0xBA	; 186
    1f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e6 5b       	subi	r30, 0xB6	; 182
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a ef       	ldi	r20, 0xFA	; 250
    1f62:	54 e4       	ldi	r21, 0x44	; 68
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	80 83       	st	Z, r24
    1f70:	91 83       	std	Z+1, r25	; 0x01
    1f72:	a2 83       	std	Z+2, r26	; 0x02
    1f74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f76:	fe 01       	movw	r30, r28
    1f78:	ea 5b       	subi	r30, 0xBA	; 186
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	44 f4       	brge	.+16     	; 0x1fa4 <HLCD_voidSendData+0x1c4>
		__ticks = 1;
    1f94:	fe 01       	movw	r30, r28
    1f96:	ec 5b       	subi	r30, 0xBC	; 188
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
    1fa2:	64 c0       	rjmp	.+200    	; 0x206c <HLCD_voidSendData+0x28c>
	else if (__tmp > 65535)
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ea 5b       	subi	r30, 0xBA	; 186
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <HLCD_voidSendData+0x1e4>
    1fc2:	43 c0       	rjmp	.+134    	; 0x204a <HLCD_voidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e6 5b       	subi	r30, 0xB6	; 182
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	0c 5b       	subi	r16, 0xBC	; 188
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	f8 01       	movw	r30, r16
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	80 83       	st	Z, r24
    1ffa:	1f c0       	rjmp	.+62     	; 0x203a <HLCD_voidSendData+0x25a>
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ee 5b       	subi	r30, 0xBE	; 190
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	88 ec       	ldi	r24, 0xC8	; 200
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
    200a:	fe 01       	movw	r30, r28
    200c:	ee 5b       	subi	r30, 0xBE	; 190
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	91 81       	ldd	r25, Z+1	; 0x01
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <HLCD_voidSendData+0x234>
    2018:	fe 01       	movw	r30, r28
    201a:	ee 5b       	subi	r30, 0xBE	; 190
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	de 01       	movw	r26, r28
    2024:	ac 5b       	subi	r26, 0xBC	; 188
    2026:	bf 4f       	sbci	r27, 0xFF	; 255
    2028:	fe 01       	movw	r30, r28
    202a:	ec 5b       	subi	r30, 0xBC	; 188
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 81       	ld	r24, Z
    2030:	91 81       	ldd	r25, Z+1	; 0x01
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	11 96       	adiw	r26, 0x01	; 1
    2036:	9c 93       	st	X, r25
    2038:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203a:	fe 01       	movw	r30, r28
    203c:	ec 5b       	subi	r30, 0xBC	; 188
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	d1 f6       	brne	.-76     	; 0x1ffc <HLCD_voidSendData+0x21c>
    2048:	42 c0       	rjmp	.+132    	; 0x20ce <HLCD_voidSendData+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	8e 01       	movw	r16, r28
    204c:	0c 5b       	subi	r16, 0xBC	; 188
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	fe 01       	movw	r30, r28
    2052:	ea 5b       	subi	r30, 0xBA	; 186
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	f8 01       	movw	r30, r16
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
    206c:	de 01       	movw	r26, r28
    206e:	a0 5c       	subi	r26, 0xC0	; 192
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	fe 01       	movw	r30, r28
    2074:	ec 5b       	subi	r30, 0xBC	; 188
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	11 96       	adiw	r26, 0x01	; 1
    207e:	9c 93       	st	X, r25
    2080:	8e 93       	st	-X, r24
    2082:	fe 01       	movw	r30, r28
    2084:	e0 5c       	subi	r30, 0xC0	; 192
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <HLCD_voidSendData+0x2ac>
    2090:	fe 01       	movw	r30, r28
    2092:	e0 5c       	subi	r30, 0xC0	; 192
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	80 83       	st	Z, r24
    209a:	19 c0       	rjmp	.+50     	; 0x20ce <HLCD_voidSendData+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    209c:	8e 01       	movw	r16, r28
    209e:	02 5b       	subi	r16, 0xB2	; 178
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	fe 01       	movw	r30, r28
    20a4:	e1 5b       	subi	r30, 0xB1	; 177
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 83       	st	Z, r24
    20bc:	fe 01       	movw	r30, r28
    20be:	e2 5b       	subi	r30, 0xB2	; 178
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    20c8:	8a 95       	dec	r24
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <HLCD_voidSendData+0x2e8>
    20cc:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	62 e0       	ldi	r22, 0x02	; 2
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a8 e4       	ldi	r26, 0x48	; 72
    20de:	b3 e4       	ldi	r27, 0x43	; 67
    20e0:	8b af       	std	Y+59, r24	; 0x3b
    20e2:	9c af       	std	Y+60, r25	; 0x3c
    20e4:	ad af       	std	Y+61, r26	; 0x3d
    20e6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    20ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    20ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f0:	2b ea       	ldi	r18, 0xAB	; 171
    20f2:	3a ea       	ldi	r19, 0xAA	; 170
    20f4:	4a e2       	ldi	r20, 0x2A	; 42
    20f6:	50 e4       	ldi	r21, 0x40	; 64
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8f ab       	std	Y+55, r24	; 0x37
    2102:	98 af       	std	Y+56, r25	; 0x38
    2104:	a9 af       	std	Y+57, r26	; 0x39
    2106:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2108:	6f a9       	ldd	r22, Y+55	; 0x37
    210a:	78 ad       	ldd	r23, Y+56	; 0x38
    210c:	89 ad       	ldd	r24, Y+57	; 0x39
    210e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	1c f4       	brge	.+6      	; 0x2126 <HLCD_voidSendData+0x346>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	8e ab       	std	Y+54, r24	; 0x36
    2124:	91 c0       	rjmp	.+290    	; 0x2248 <HLCD_voidSendData+0x468>
	else if (__tmp > 255)
    2126:	6f a9       	ldd	r22, Y+55	; 0x37
    2128:	78 ad       	ldd	r23, Y+56	; 0x38
    212a:	89 ad       	ldd	r24, Y+57	; 0x39
    212c:	9a ad       	ldd	r25, Y+58	; 0x3a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	53 e4       	ldi	r21, 0x43	; 67
    2136:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	0c f0       	brlt	.+2      	; 0x2140 <HLCD_voidSendData+0x360>
    213e:	7b c0       	rjmp	.+246    	; 0x2236 <HLCD_voidSendData+0x456>
	{
		_delay_ms(__us / 1000.0);
    2140:	6b ad       	ldd	r22, Y+59	; 0x3b
    2142:	7c ad       	ldd	r23, Y+60	; 0x3c
    2144:	8d ad       	ldd	r24, Y+61	; 0x3d
    2146:	9e ad       	ldd	r25, Y+62	; 0x3e
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a e7       	ldi	r20, 0x7A	; 122
    214e:	54 e4       	ldi	r21, 0x44	; 68
    2150:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8a ab       	std	Y+50, r24	; 0x32
    215a:	9b ab       	std	Y+51, r25	; 0x33
    215c:	ac ab       	std	Y+52, r26	; 0x34
    215e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6a a9       	ldd	r22, Y+50	; 0x32
    2162:	7b a9       	ldd	r23, Y+51	; 0x33
    2164:	8c a9       	ldd	r24, Y+52	; 0x34
    2166:	9d a9       	ldd	r25, Y+53	; 0x35
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a ef       	ldi	r20, 0xFA	; 250
    216e:	54 e4       	ldi	r21, 0x44	; 68
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8e a7       	std	Y+46, r24	; 0x2e
    217a:	9f a7       	std	Y+47, r25	; 0x2f
    217c:	a8 ab       	std	Y+48, r26	; 0x30
    217e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2180:	6e a5       	ldd	r22, Y+46	; 0x2e
    2182:	7f a5       	ldd	r23, Y+47	; 0x2f
    2184:	88 a9       	ldd	r24, Y+48	; 0x30
    2186:	99 a9       	ldd	r25, Y+49	; 0x31
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <HLCD_voidSendData+0x3c2>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9d a7       	std	Y+45, r25	; 0x2d
    219e:	8c a7       	std	Y+44, r24	; 0x2c
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <HLCD_voidSendData+0x440>
	else if (__tmp > 65535)
    21a2:	6e a5       	ldd	r22, Y+46	; 0x2e
    21a4:	7f a5       	ldd	r23, Y+47	; 0x2f
    21a6:	88 a9       	ldd	r24, Y+48	; 0x30
    21a8:	99 a9       	ldd	r25, Y+49	; 0x31
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <HLCD_voidSendData+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6a a9       	ldd	r22, Y+50	; 0x32
    21bc:	7b a9       	ldd	r23, Y+51	; 0x33
    21be:	8c a9       	ldd	r24, Y+52	; 0x34
    21c0:	9d a9       	ldd	r25, Y+53	; 0x35
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9d a7       	std	Y+45, r25	; 0x2d
    21e0:	8c a7       	std	Y+44, r24	; 0x2c
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <HLCD_voidSendData+0x422>
    21e4:	88 ec       	ldi	r24, 0xC8	; 200
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9b a7       	std	Y+43, r25	; 0x2b
    21ea:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ec:	8a a5       	ldd	r24, Y+42	; 0x2a
    21ee:	9b a5       	ldd	r25, Y+43	; 0x2b
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <HLCD_voidSendData+0x410>
    21f4:	9b a7       	std	Y+43, r25	; 0x2b
    21f6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    21fa:	9d a5       	ldd	r25, Y+45	; 0x2d
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9d a7       	std	Y+45, r25	; 0x2d
    2200:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8c a5       	ldd	r24, Y+44	; 0x2c
    2204:	9d a5       	ldd	r25, Y+45	; 0x2d
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <HLCD_voidSendData+0x404>
    220a:	24 c0       	rjmp	.+72     	; 0x2254 <HLCD_voidSendData+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6e a5       	ldd	r22, Y+46	; 0x2e
    220e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2210:	88 a9       	ldd	r24, Y+48	; 0x30
    2212:	99 a9       	ldd	r25, Y+49	; 0x31
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9d a7       	std	Y+45, r25	; 0x2d
    221e:	8c a7       	std	Y+44, r24	; 0x2c
    2220:	8c a5       	ldd	r24, Y+44	; 0x2c
    2222:	9d a5       	ldd	r25, Y+45	; 0x2d
    2224:	99 a7       	std	Y+41, r25	; 0x29
    2226:	88 a7       	std	Y+40, r24	; 0x28
    2228:	88 a5       	ldd	r24, Y+40	; 0x28
    222a:	99 a5       	ldd	r25, Y+41	; 0x29
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <HLCD_voidSendData+0x44c>
    2230:	99 a7       	std	Y+41, r25	; 0x29
    2232:	88 a7       	std	Y+40, r24	; 0x28
    2234:	0f c0       	rjmp	.+30     	; 0x2254 <HLCD_voidSendData+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2236:	6f a9       	ldd	r22, Y+55	; 0x37
    2238:	78 ad       	ldd	r23, Y+56	; 0x38
    223a:	89 ad       	ldd	r24, Y+57	; 0x39
    223c:	9a ad       	ldd	r25, Y+58	; 0x3a
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8e ab       	std	Y+54, r24	; 0x36
    2248:	8e a9       	ldd	r24, Y+54	; 0x36
    224a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    224c:	8f a1       	ldd	r24, Y+39	; 0x27
    224e:	8a 95       	dec	r24
    2250:	f1 f7       	brne	.-4      	; 0x224e <HLCD_voidSendData+0x46e>
    2252:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending Data LOWER nibble */
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Data>>0)&1));
    2254:	fe 01       	movw	r30, r28
    2256:	e9 5a       	subi	r30, 0xA9	; 169
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	98 2f       	mov	r25, r24
    225e:	91 70       	andi	r25, 0x01	; 1
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	64 e0       	ldi	r22, 0x04	; 4
    2264:	49 2f       	mov	r20, r25
    2266:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Data>>1)&1));
    226a:	fe 01       	movw	r30, r28
    226c:	e9 5a       	subi	r30, 0xA9	; 169
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	86 95       	lsr	r24
    2274:	98 2f       	mov	r25, r24
    2276:	91 70       	andi	r25, 0x01	; 1
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	65 e0       	ldi	r22, 0x05	; 5
    227c:	49 2f       	mov	r20, r25
    227e:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Data>>2)&1));
    2282:	fe 01       	movw	r30, r28
    2284:	e9 5a       	subi	r30, 0xA9	; 169
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	86 95       	lsr	r24
    228c:	86 95       	lsr	r24
    228e:	98 2f       	mov	r25, r24
    2290:	91 70       	andi	r25, 0x01	; 1
    2292:	83 e0       	ldi	r24, 0x03	; 3
    2294:	66 e0       	ldi	r22, 0x06	; 6
    2296:	49 2f       	mov	r20, r25
    2298:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Data>>3)&1));
    229c:	fe 01       	movw	r30, r28
    229e:	e9 5a       	subi	r30, 0xA9	; 169
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 81       	ld	r24, Z
    22a4:	86 95       	lsr	r24
    22a6:	86 95       	lsr	r24
    22a8:	86 95       	lsr	r24
    22aa:	98 2f       	mov	r25, r24
    22ac:	91 70       	andi	r25, 0x01	; 1
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	67 e0       	ldi	r22, 0x07	; 7
    22b2:	49 2f       	mov	r20, r25
    22b4:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	62 e0       	ldi	r22, 0x02	; 2
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e8       	ldi	r26, 0x80	; 128
    22c8:	bf e3       	ldi	r27, 0x3F	; 63
    22ca:	8b a3       	std	Y+35, r24	; 0x23
    22cc:	9c a3       	std	Y+36, r25	; 0x24
    22ce:	ad a3       	std	Y+37, r26	; 0x25
    22d0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22d2:	6b a1       	ldd	r22, Y+35	; 0x23
    22d4:	7c a1       	ldd	r23, Y+36	; 0x24
    22d6:	8d a1       	ldd	r24, Y+37	; 0x25
    22d8:	9e a1       	ldd	r25, Y+38	; 0x26
    22da:	2b ea       	ldi	r18, 0xAB	; 171
    22dc:	3a ea       	ldi	r19, 0xAA	; 170
    22de:	4a e2       	ldi	r20, 0x2A	; 42
    22e0:	50 e4       	ldi	r21, 0x40	; 64
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8f 8f       	std	Y+31, r24	; 0x1f
    22ec:	98 a3       	std	Y+32, r25	; 0x20
    22ee:	a9 a3       	std	Y+33, r26	; 0x21
    22f0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22f2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22f4:	78 a1       	ldd	r23, Y+32	; 0x20
    22f6:	89 a1       	ldd	r24, Y+33	; 0x21
    22f8:	9a a1       	ldd	r25, Y+34	; 0x22
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	1c f4       	brge	.+6      	; 0x2310 <HLCD_voidSendData+0x530>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	8e 8f       	std	Y+30, r24	; 0x1e
    230e:	91 c0       	rjmp	.+290    	; 0x2432 <HLCD_voidSendData+0x652>
	else if (__tmp > 255)
    2310:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2312:	78 a1       	ldd	r23, Y+32	; 0x20
    2314:	89 a1       	ldd	r24, Y+33	; 0x21
    2316:	9a a1       	ldd	r25, Y+34	; 0x22
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	53 e4       	ldi	r21, 0x43	; 67
    2320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2324:	18 16       	cp	r1, r24
    2326:	0c f0       	brlt	.+2      	; 0x232a <HLCD_voidSendData+0x54a>
    2328:	7b c0       	rjmp	.+246    	; 0x2420 <HLCD_voidSendData+0x640>
	{
		_delay_ms(__us / 1000.0);
    232a:	6b a1       	ldd	r22, Y+35	; 0x23
    232c:	7c a1       	ldd	r23, Y+36	; 0x24
    232e:	8d a1       	ldd	r24, Y+37	; 0x25
    2330:	9e a1       	ldd	r25, Y+38	; 0x26
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a e7       	ldi	r20, 0x7A	; 122
    2338:	54 e4       	ldi	r21, 0x44	; 68
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	8a 8f       	std	Y+26, r24	; 0x1a
    2344:	9b 8f       	std	Y+27, r25	; 0x1b
    2346:	ac 8f       	std	Y+28, r26	; 0x1c
    2348:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    234c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    234e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2350:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a ef       	ldi	r20, 0xFA	; 250
    2358:	54 e4       	ldi	r21, 0x44	; 68
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8e 8b       	std	Y+22, r24	; 0x16
    2364:	9f 8b       	std	Y+23, r25	; 0x17
    2366:	a8 8f       	std	Y+24, r26	; 0x18
    2368:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    236a:	6e 89       	ldd	r22, Y+22	; 0x16
    236c:	7f 89       	ldd	r23, Y+23	; 0x17
    236e:	88 8d       	ldd	r24, Y+24	; 0x18
    2370:	99 8d       	ldd	r25, Y+25	; 0x19
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	2c f4       	brge	.+10     	; 0x238c <HLCD_voidSendData+0x5ac>
		__ticks = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9d 8b       	std	Y+21, r25	; 0x15
    2388:	8c 8b       	std	Y+20, r24	; 0x14
    238a:	3f c0       	rjmp	.+126    	; 0x240a <HLCD_voidSendData+0x62a>
	else if (__tmp > 65535)
    238c:	6e 89       	ldd	r22, Y+22	; 0x16
    238e:	7f 89       	ldd	r23, Y+23	; 0x17
    2390:	88 8d       	ldd	r24, Y+24	; 0x18
    2392:	99 8d       	ldd	r25, Y+25	; 0x19
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	3f ef       	ldi	r19, 0xFF	; 255
    2398:	4f e7       	ldi	r20, 0x7F	; 127
    239a:	57 e4       	ldi	r21, 0x47	; 71
    239c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a0:	18 16       	cp	r1, r24
    23a2:	4c f5       	brge	.+82     	; 0x23f6 <HLCD_voidSendData+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e2       	ldi	r20, 0x20	; 32
    23b2:	51 e4       	ldi	r21, 0x41	; 65
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9d 8b       	std	Y+21, r25	; 0x15
    23ca:	8c 8b       	std	Y+20, r24	; 0x14
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <HLCD_voidSendData+0x60c>
    23ce:	88 ec       	ldi	r24, 0xC8	; 200
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9b 8b       	std	Y+19, r25	; 0x13
    23d4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d6:	8a 89       	ldd	r24, Y+18	; 0x12
    23d8:	9b 89       	ldd	r25, Y+19	; 0x13
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <HLCD_voidSendData+0x5fa>
    23de:	9b 8b       	std	Y+19, r25	; 0x13
    23e0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e2:	8c 89       	ldd	r24, Y+20	; 0x14
    23e4:	9d 89       	ldd	r25, Y+21	; 0x15
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	9d 8b       	std	Y+21, r25	; 0x15
    23ea:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ec:	8c 89       	ldd	r24, Y+20	; 0x14
    23ee:	9d 89       	ldd	r25, Y+21	; 0x15
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	69 f7       	brne	.-38     	; 0x23ce <HLCD_voidSendData+0x5ee>
    23f4:	24 c0       	rjmp	.+72     	; 0x243e <HLCD_voidSendData+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f6:	6e 89       	ldd	r22, Y+22	; 0x16
    23f8:	7f 89       	ldd	r23, Y+23	; 0x17
    23fa:	88 8d       	ldd	r24, Y+24	; 0x18
    23fc:	99 8d       	ldd	r25, Y+25	; 0x19
    23fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9d 8b       	std	Y+21, r25	; 0x15
    2408:	8c 8b       	std	Y+20, r24	; 0x14
    240a:	8c 89       	ldd	r24, Y+20	; 0x14
    240c:	9d 89       	ldd	r25, Y+21	; 0x15
    240e:	99 8b       	std	Y+17, r25	; 0x11
    2410:	88 8b       	std	Y+16, r24	; 0x10
    2412:	88 89       	ldd	r24, Y+16	; 0x10
    2414:	99 89       	ldd	r25, Y+17	; 0x11
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <HLCD_voidSendData+0x636>
    241a:	99 8b       	std	Y+17, r25	; 0x11
    241c:	88 8b       	std	Y+16, r24	; 0x10
    241e:	0f c0       	rjmp	.+30     	; 0x243e <HLCD_voidSendData+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2420:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2422:	78 a1       	ldd	r23, Y+32	; 0x20
    2424:	89 a1       	ldd	r24, Y+33	; 0x21
    2426:	9a a1       	ldd	r25, Y+34	; 0x22
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8e 8f       	std	Y+30, r24	; 0x1e
    2432:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2434:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2436:	8f 85       	ldd	r24, Y+15	; 0x0f
    2438:	8a 95       	dec	r24
    243a:	f1 f7       	brne	.-4      	; 0x2438 <HLCD_voidSendData+0x658>
    243c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e0       	ldi	r26, 0x00	; 0
    244e:	b0 e4       	ldi	r27, 0x40	; 64
    2450:	8b 87       	std	Y+11, r24	; 0x0b
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	ad 87       	std	Y+13, r26	; 0x0d
    2456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6b 85       	ldd	r22, Y+11	; 0x0b
    245a:	7c 85       	ldd	r23, Y+12	; 0x0c
    245c:	8d 85       	ldd	r24, Y+13	; 0x0d
    245e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a ef       	ldi	r20, 0xFA	; 250
    2466:	54 e4       	ldi	r21, 0x44	; 68
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8f 83       	std	Y+7, r24	; 0x07
    2472:	98 87       	std	Y+8, r25	; 0x08
    2474:	a9 87       	std	Y+9, r26	; 0x09
    2476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <HLCD_voidSendData+0x6ba>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <HLCD_voidSendData+0x738>
	else if (__tmp > 65535)
    249a:	6f 81       	ldd	r22, Y+7	; 0x07
    249c:	78 85       	ldd	r23, Y+8	; 0x08
    249e:	89 85       	ldd	r24, Y+9	; 0x09
    24a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <HLCD_voidSendData+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <HLCD_voidSendData+0x71a>
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <HLCD_voidSendData+0x708>
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9e 83       	std	Y+6, r25	; 0x06
    24f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <HLCD_voidSendData+0x6fc>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <HLCD_voidSendData+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6f 81       	ldd	r22, Y+7	; 0x07
    2506:	78 85       	ldd	r23, Y+8	; 0x08
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	9a 83       	std	Y+2, r25	; 0x02
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <HLCD_voidSendData+0x744>
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    252c:	c9 5a       	subi	r28, 0xA9	; 169
    252e:	df 4f       	sbci	r29, 0xFF	; 255
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	08 95       	ret

00002544 <HLCD_voidSendCommand>:


void HLCD_voidSendCommand(u8 Copy_u8Command){
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	c7 55       	subi	r28, 0x57	; 87
    2552:	d0 40       	sbci	r29, 0x00	; 0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	fe 01       	movw	r30, r28
    2560:	e9 5a       	subi	r30, 0xA9	; 169
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 83       	st	Z, r24
	/*Sending UPPER Nibble of the command */
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Command>>4)&1));
    2566:	fe 01       	movw	r30, r28
    2568:	e9 5a       	subi	r30, 0xA9	; 169
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	82 95       	swap	r24
    2570:	8f 70       	andi	r24, 0x0F	; 15
    2572:	98 2f       	mov	r25, r24
    2574:	91 70       	andi	r25, 0x01	; 1
    2576:	83 e0       	ldi	r24, 0x03	; 3
    2578:	64 e0       	ldi	r22, 0x04	; 4
    257a:	49 2f       	mov	r20, r25
    257c:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Command>>5)&1));
    2580:	fe 01       	movw	r30, r28
    2582:	e9 5a       	subi	r30, 0xA9	; 169
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	82 95       	swap	r24
    258a:	86 95       	lsr	r24
    258c:	87 70       	andi	r24, 0x07	; 7
    258e:	98 2f       	mov	r25, r24
    2590:	91 70       	andi	r25, 0x01	; 1
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	65 e0       	ldi	r22, 0x05	; 5
    2596:	49 2f       	mov	r20, r25
    2598:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Command>>6)&1));
    259c:	fe 01       	movw	r30, r28
    259e:	e9 5a       	subi	r30, 0xA9	; 169
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	82 95       	swap	r24
    25a6:	86 95       	lsr	r24
    25a8:	86 95       	lsr	r24
    25aa:	83 70       	andi	r24, 0x03	; 3
    25ac:	98 2f       	mov	r25, r24
    25ae:	91 70       	andi	r25, 0x01	; 1
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	66 e0       	ldi	r22, 0x06	; 6
    25b4:	49 2f       	mov	r20, r25
    25b6:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Command>>7)&1));
    25ba:	fe 01       	movw	r30, r28
    25bc:	e9 5a       	subi	r30, 0xA9	; 169
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	98 2f       	mov	r25, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	99 27       	eor	r25, r25
    25c8:	99 1f       	adc	r25, r25
    25ca:	83 e0       	ldi	r24, 0x03	; 3
    25cc:	67 e0       	ldi	r22, 0x07	; 7
    25ce:	49 2f       	mov	r20, r25
    25d0:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

	/*	CLR RS to send command */
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_PIN_LOW);
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
	/*	CLR RS to Enable write */
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_PIN_LOW);
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	61 e0       	ldi	r22, 0x01	; 1
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>


	/* set EN for 2ms to make LCD CPU reads the command  */
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	62 e0       	ldi	r22, 0x02	; 2
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    25f2:	fe 01       	movw	r30, r28
    25f4:	ed 5a       	subi	r30, 0xAD	; 173
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e8       	ldi	r26, 0x80	; 128
    25fe:	bf e3       	ldi	r27, 0x3F	; 63
    2600:	80 83       	st	Z, r24
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	a2 83       	std	Z+2, r26	; 0x02
    2606:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2608:	8e 01       	movw	r16, r28
    260a:	01 5b       	subi	r16, 0xB1	; 177
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	fe 01       	movw	r30, r28
    2610:	ed 5a       	subi	r30, 0xAD	; 173
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	60 81       	ld	r22, Z
    2616:	71 81       	ldd	r23, Z+1	; 0x01
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	2b ea       	ldi	r18, 0xAB	; 171
    261e:	3a ea       	ldi	r19, 0xAA	; 170
    2620:	4a e2       	ldi	r20, 0x2A	; 42
    2622:	50 e4       	ldi	r21, 0x40	; 64
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	f8 01       	movw	r30, r16
    262e:	80 83       	st	Z, r24
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	a2 83       	std	Z+2, r26	; 0x02
    2634:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2636:	fe 01       	movw	r30, r28
    2638:	e1 5b       	subi	r30, 0xB1	; 177
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2650:	88 23       	and	r24, r24
    2652:	34 f4       	brge	.+12     	; 0x2660 <HLCD_voidSendCommand+0x11c>
		__ticks = 1;
    2654:	fe 01       	movw	r30, r28
    2656:	e2 5b       	subi	r30, 0xB2	; 178
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 83       	st	Z, r24
    265e:	e0 c0       	rjmp	.+448    	; 0x2820 <HLCD_voidSendCommand+0x2dc>
	else if (__tmp > 255)
    2660:	fe 01       	movw	r30, r28
    2662:	e1 5b       	subi	r30, 0xB1	; 177
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	53 e4       	ldi	r21, 0x43	; 67
    2676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	0c f0       	brlt	.+2      	; 0x2680 <HLCD_voidSendCommand+0x13c>
    267e:	c0 c0       	rjmp	.+384    	; 0x2800 <HLCD_voidSendCommand+0x2bc>
	{
		_delay_ms(__us / 1000.0);
    2680:	fe 01       	movw	r30, r28
    2682:	ed 5a       	subi	r30, 0xAD	; 173
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	4a e7       	ldi	r20, 0x7A	; 122
    2694:	54 e4       	ldi	r21, 0x44	; 68
    2696:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	fe 01       	movw	r30, r28
    26a0:	e6 5b       	subi	r30, 0xB6	; 182
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 83       	st	Z, r24
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	a2 83       	std	Z+2, r26	; 0x02
    26aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ac:	8e 01       	movw	r16, r28
    26ae:	0a 5b       	subi	r16, 0xBA	; 186
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	fe 01       	movw	r30, r28
    26b4:	e6 5b       	subi	r30, 0xB6	; 182
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a ef       	ldi	r20, 0xFA	; 250
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	f8 01       	movw	r30, r16
    26d2:	80 83       	st	Z, r24
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	a2 83       	std	Z+2, r26	; 0x02
    26d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26da:	fe 01       	movw	r30, r28
    26dc:	ea 5b       	subi	r30, 0xBA	; 186
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	60 81       	ld	r22, Z
    26e2:	71 81       	ldd	r23, Z+1	; 0x01
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e8       	ldi	r20, 0x80	; 128
    26ee:	5f e3       	ldi	r21, 0x3F	; 63
    26f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f4:	88 23       	and	r24, r24
    26f6:	44 f4       	brge	.+16     	; 0x2708 <HLCD_voidSendCommand+0x1c4>
		__ticks = 1;
    26f8:	fe 01       	movw	r30, r28
    26fa:	ec 5b       	subi	r30, 0xBC	; 188
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	80 83       	st	Z, r24
    2706:	64 c0       	rjmp	.+200    	; 0x27d0 <HLCD_voidSendCommand+0x28c>
	else if (__tmp > 65535)
    2708:	fe 01       	movw	r30, r28
    270a:	ea 5b       	subi	r30, 0xBA	; 186
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	57 e4       	ldi	r21, 0x47	; 71
    271e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2722:	18 16       	cp	r1, r24
    2724:	0c f0       	brlt	.+2      	; 0x2728 <HLCD_voidSendCommand+0x1e4>
    2726:	43 c0       	rjmp	.+134    	; 0x27ae <HLCD_voidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2728:	fe 01       	movw	r30, r28
    272a:	e6 5b       	subi	r30, 0xB6	; 182
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	8e 01       	movw	r16, r28
    2748:	0c 5b       	subi	r16, 0xBC	; 188
    274a:	1f 4f       	sbci	r17, 0xFF	; 255
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	f8 01       	movw	r30, r16
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
    275e:	1f c0       	rjmp	.+62     	; 0x279e <HLCD_voidSendCommand+0x25a>
    2760:	fe 01       	movw	r30, r28
    2762:	ee 5b       	subi	r30, 0xBE	; 190
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	88 ec       	ldi	r24, 0xC8	; 200
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	80 83       	st	Z, r24
    276e:	fe 01       	movw	r30, r28
    2770:	ee 5b       	subi	r30, 0xBE	; 190
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <HLCD_voidSendCommand+0x234>
    277c:	fe 01       	movw	r30, r28
    277e:	ee 5b       	subi	r30, 0xBE	; 190
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	de 01       	movw	r26, r28
    2788:	ac 5b       	subi	r26, 0xBC	; 188
    278a:	bf 4f       	sbci	r27, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	ec 5b       	subi	r30, 0xBC	; 188
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	11 96       	adiw	r26, 0x01	; 1
    279a:	9c 93       	st	X, r25
    279c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	fe 01       	movw	r30, r28
    27a0:	ec 5b       	subi	r30, 0xBC	; 188
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	d1 f6       	brne	.-76     	; 0x2760 <HLCD_voidSendCommand+0x21c>
    27ac:	42 c0       	rjmp	.+132    	; 0x2832 <HLCD_voidSendCommand+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ae:	8e 01       	movw	r16, r28
    27b0:	0c 5b       	subi	r16, 0xBC	; 188
    27b2:	1f 4f       	sbci	r17, 0xFF	; 255
    27b4:	fe 01       	movw	r30, r28
    27b6:	ea 5b       	subi	r30, 0xBA	; 186
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	60 81       	ld	r22, Z
    27bc:	71 81       	ldd	r23, Z+1	; 0x01
    27be:	82 81       	ldd	r24, Z+2	; 0x02
    27c0:	93 81       	ldd	r25, Z+3	; 0x03
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	f8 01       	movw	r30, r16
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	de 01       	movw	r26, r28
    27d2:	a0 5c       	subi	r26, 0xC0	; 192
    27d4:	bf 4f       	sbci	r27, 0xFF	; 255
    27d6:	fe 01       	movw	r30, r28
    27d8:	ec 5b       	subi	r30, 0xBC	; 188
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	11 96       	adiw	r26, 0x01	; 1
    27e2:	9c 93       	st	X, r25
    27e4:	8e 93       	st	-X, r24
    27e6:	fe 01       	movw	r30, r28
    27e8:	e0 5c       	subi	r30, 0xC0	; 192
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <HLCD_voidSendCommand+0x2ac>
    27f4:	fe 01       	movw	r30, r28
    27f6:	e0 5c       	subi	r30, 0xC0	; 192
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	19 c0       	rjmp	.+50     	; 0x2832 <HLCD_voidSendCommand+0x2ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2800:	8e 01       	movw	r16, r28
    2802:	02 5b       	subi	r16, 0xB2	; 178
    2804:	1f 4f       	sbci	r17, 0xFF	; 255
    2806:	fe 01       	movw	r30, r28
    2808:	e1 5b       	subi	r30, 0xB1	; 177
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	60 81       	ld	r22, Z
    280e:	71 81       	ldd	r23, Z+1	; 0x01
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	f8 01       	movw	r30, r16
    281e:	80 83       	st	Z, r24
    2820:	fe 01       	movw	r30, r28
    2822:	e2 5b       	subi	r30, 0xB2	; 178
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    282a:	8f ad       	ldd	r24, Y+63	; 0x3f
    282c:	8a 95       	dec	r24
    282e:	f1 f7       	brne	.-4      	; 0x282c <HLCD_voidSendCommand+0x2e8>
    2830:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	62 e0       	ldi	r22, 0x02	; 2
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a8 e4       	ldi	r26, 0x48	; 72
    2842:	b3 e4       	ldi	r27, 0x43	; 67
    2844:	8b af       	std	Y+59, r24	; 0x3b
    2846:	9c af       	std	Y+60, r25	; 0x3c
    2848:	ad af       	std	Y+61, r26	; 0x3d
    284a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    284c:	6b ad       	ldd	r22, Y+59	; 0x3b
    284e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2850:	8d ad       	ldd	r24, Y+61	; 0x3d
    2852:	9e ad       	ldd	r25, Y+62	; 0x3e
    2854:	2b ea       	ldi	r18, 0xAB	; 171
    2856:	3a ea       	ldi	r19, 0xAA	; 170
    2858:	4a e2       	ldi	r20, 0x2A	; 42
    285a:	50 e4       	ldi	r21, 0x40	; 64
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8f ab       	std	Y+55, r24	; 0x37
    2866:	98 af       	std	Y+56, r25	; 0x38
    2868:	a9 af       	std	Y+57, r26	; 0x39
    286a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    286c:	6f a9       	ldd	r22, Y+55	; 0x37
    286e:	78 ad       	ldd	r23, Y+56	; 0x38
    2870:	89 ad       	ldd	r24, Y+57	; 0x39
    2872:	9a ad       	ldd	r25, Y+58	; 0x3a
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2880:	88 23       	and	r24, r24
    2882:	1c f4       	brge	.+6      	; 0x288a <HLCD_voidSendCommand+0x346>
		__ticks = 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	8e ab       	std	Y+54, r24	; 0x36
    2888:	91 c0       	rjmp	.+290    	; 0x29ac <HLCD_voidSendCommand+0x468>
	else if (__tmp > 255)
    288a:	6f a9       	ldd	r22, Y+55	; 0x37
    288c:	78 ad       	ldd	r23, Y+56	; 0x38
    288e:	89 ad       	ldd	r24, Y+57	; 0x39
    2890:	9a ad       	ldd	r25, Y+58	; 0x3a
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4f e7       	ldi	r20, 0x7F	; 127
    2898:	53 e4       	ldi	r21, 0x43	; 67
    289a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289e:	18 16       	cp	r1, r24
    28a0:	0c f0       	brlt	.+2      	; 0x28a4 <HLCD_voidSendCommand+0x360>
    28a2:	7b c0       	rjmp	.+246    	; 0x299a <HLCD_voidSendCommand+0x456>
	{
		_delay_ms(__us / 1000.0);
    28a4:	6b ad       	ldd	r22, Y+59	; 0x3b
    28a6:	7c ad       	ldd	r23, Y+60	; 0x3c
    28a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	4a e7       	ldi	r20, 0x7A	; 122
    28b2:	54 e4       	ldi	r21, 0x44	; 68
    28b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	8a ab       	std	Y+50, r24	; 0x32
    28be:	9b ab       	std	Y+51, r25	; 0x33
    28c0:	ac ab       	std	Y+52, r26	; 0x34
    28c2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	6a a9       	ldd	r22, Y+50	; 0x32
    28c6:	7b a9       	ldd	r23, Y+51	; 0x33
    28c8:	8c a9       	ldd	r24, Y+52	; 0x34
    28ca:	9d a9       	ldd	r25, Y+53	; 0x35
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a ef       	ldi	r20, 0xFA	; 250
    28d2:	54 e4       	ldi	r21, 0x44	; 68
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	8e a7       	std	Y+46, r24	; 0x2e
    28de:	9f a7       	std	Y+47, r25	; 0x2f
    28e0:	a8 ab       	std	Y+48, r26	; 0x30
    28e2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    28e4:	6e a5       	ldd	r22, Y+46	; 0x2e
    28e6:	7f a5       	ldd	r23, Y+47	; 0x2f
    28e8:	88 a9       	ldd	r24, Y+48	; 0x30
    28ea:	99 a9       	ldd	r25, Y+49	; 0x31
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	2c f4       	brge	.+10     	; 0x2906 <HLCD_voidSendCommand+0x3c2>
		__ticks = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9d a7       	std	Y+45, r25	; 0x2d
    2902:	8c a7       	std	Y+44, r24	; 0x2c
    2904:	3f c0       	rjmp	.+126    	; 0x2984 <HLCD_voidSendCommand+0x440>
	else if (__tmp > 65535)
    2906:	6e a5       	ldd	r22, Y+46	; 0x2e
    2908:	7f a5       	ldd	r23, Y+47	; 0x2f
    290a:	88 a9       	ldd	r24, Y+48	; 0x30
    290c:	99 a9       	ldd	r25, Y+49	; 0x31
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	57 e4       	ldi	r21, 0x47	; 71
    2916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	4c f5       	brge	.+82     	; 0x2970 <HLCD_voidSendCommand+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291e:	6a a9       	ldd	r22, Y+50	; 0x32
    2920:	7b a9       	ldd	r23, Y+51	; 0x33
    2922:	8c a9       	ldd	r24, Y+52	; 0x34
    2924:	9d a9       	ldd	r25, Y+53	; 0x35
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9d a7       	std	Y+45, r25	; 0x2d
    2944:	8c a7       	std	Y+44, r24	; 0x2c
    2946:	0f c0       	rjmp	.+30     	; 0x2966 <HLCD_voidSendCommand+0x422>
    2948:	88 ec       	ldi	r24, 0xC8	; 200
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9b a7       	std	Y+43, r25	; 0x2b
    294e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2950:	8a a5       	ldd	r24, Y+42	; 0x2a
    2952:	9b a5       	ldd	r25, Y+43	; 0x2b
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <HLCD_voidSendCommand+0x410>
    2958:	9b a7       	std	Y+43, r25	; 0x2b
    295a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	8c a5       	ldd	r24, Y+44	; 0x2c
    295e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	9d a7       	std	Y+45, r25	; 0x2d
    2964:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	8c a5       	ldd	r24, Y+44	; 0x2c
    2968:	9d a5       	ldd	r25, Y+45	; 0x2d
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	69 f7       	brne	.-38     	; 0x2948 <HLCD_voidSendCommand+0x404>
    296e:	24 c0       	rjmp	.+72     	; 0x29b8 <HLCD_voidSendCommand+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	6e a5       	ldd	r22, Y+46	; 0x2e
    2972:	7f a5       	ldd	r23, Y+47	; 0x2f
    2974:	88 a9       	ldd	r24, Y+48	; 0x30
    2976:	99 a9       	ldd	r25, Y+49	; 0x31
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9d a7       	std	Y+45, r25	; 0x2d
    2982:	8c a7       	std	Y+44, r24	; 0x2c
    2984:	8c a5       	ldd	r24, Y+44	; 0x2c
    2986:	9d a5       	ldd	r25, Y+45	; 0x2d
    2988:	99 a7       	std	Y+41, r25	; 0x29
    298a:	88 a7       	std	Y+40, r24	; 0x28
    298c:	88 a5       	ldd	r24, Y+40	; 0x28
    298e:	99 a5       	ldd	r25, Y+41	; 0x29
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <HLCD_voidSendCommand+0x44c>
    2994:	99 a7       	std	Y+41, r25	; 0x29
    2996:	88 a7       	std	Y+40, r24	; 0x28
    2998:	0f c0       	rjmp	.+30     	; 0x29b8 <HLCD_voidSendCommand+0x474>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    299a:	6f a9       	ldd	r22, Y+55	; 0x37
    299c:	78 ad       	ldd	r23, Y+56	; 0x38
    299e:	89 ad       	ldd	r24, Y+57	; 0x39
    29a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	8e ab       	std	Y+54, r24	; 0x36
    29ac:	8e a9       	ldd	r24, Y+54	; 0x36
    29ae:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29b0:	8f a1       	ldd	r24, Y+39	; 0x27
    29b2:	8a 95       	dec	r24
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <HLCD_voidSendCommand+0x46e>
    29b6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);

	/*Sending LAST Nibble of the command */
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D0,((Copy_u8Command>>0)&1));
    29b8:	fe 01       	movw	r30, r28
    29ba:	e9 5a       	subi	r30, 0xA9	; 169
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	98 2f       	mov	r25, r24
    29c2:	91 70       	andi	r25, 0x01	; 1
    29c4:	83 e0       	ldi	r24, 0x03	; 3
    29c6:	64 e0       	ldi	r22, 0x04	; 4
    29c8:	49 2f       	mov	r20, r25
    29ca:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D1,((Copy_u8Command>>1)&1));
    29ce:	fe 01       	movw	r30, r28
    29d0:	e9 5a       	subi	r30, 0xA9	; 169
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	86 95       	lsr	r24
    29d8:	98 2f       	mov	r25, r24
    29da:	91 70       	andi	r25, 0x01	; 1
    29dc:	83 e0       	ldi	r24, 0x03	; 3
    29de:	65 e0       	ldi	r22, 0x05	; 5
    29e0:	49 2f       	mov	r20, r25
    29e2:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D2,((Copy_u8Command>>2)&1));
    29e6:	fe 01       	movw	r30, r28
    29e8:	e9 5a       	subi	r30, 0xA9	; 169
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	80 81       	ld	r24, Z
    29ee:	86 95       	lsr	r24
    29f0:	86 95       	lsr	r24
    29f2:	98 2f       	mov	r25, r24
    29f4:	91 70       	andi	r25, 0x01	; 1
    29f6:	83 e0       	ldi	r24, 0x03	; 3
    29f8:	66 e0       	ldi	r22, 0x06	; 6
    29fa:	49 2f       	mov	r20, r25
    29fc:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
MDIO_VoidSetPinValue(LCD_PORT_DATA,LCD_D3,((Copy_u8Command>>3)&1));
    2a00:	fe 01       	movw	r30, r28
    2a02:	e9 5a       	subi	r30, 0xA9	; 169
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	86 95       	lsr	r24
    2a0a:	86 95       	lsr	r24
    2a0c:	86 95       	lsr	r24
    2a0e:	98 2f       	mov	r25, r24
    2a10:	91 70       	andi	r25, 0x01	; 1
    2a12:	83 e0       	ldi	r24, 0x03	; 3
    2a14:	67 e0       	ldi	r22, 0x07	; 7
    2a16:	49 2f       	mov	r20, r25
    2a18:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>

	/* set EN for 2ms to make LCD CPU reads the command  */
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_HIGH);
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	62 e0       	ldi	r22, 0x02	; 2
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a0 e8       	ldi	r26, 0x80	; 128
    2a2c:	bf e3       	ldi	r27, 0x3F	; 63
    2a2e:	8b a3       	std	Y+35, r24	; 0x23
    2a30:	9c a3       	std	Y+36, r25	; 0x24
    2a32:	ad a3       	std	Y+37, r26	; 0x25
    2a34:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a36:	6b a1       	ldd	r22, Y+35	; 0x23
    2a38:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3e:	2b ea       	ldi	r18, 0xAB	; 171
    2a40:	3a ea       	ldi	r19, 0xAA	; 170
    2a42:	4a e2       	ldi	r20, 0x2A	; 42
    2a44:	50 e4       	ldi	r21, 0x40	; 64
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8f 8f       	std	Y+31, r24	; 0x1f
    2a50:	98 a3       	std	Y+32, r25	; 0x20
    2a52:	a9 a3       	std	Y+33, r26	; 0x21
    2a54:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2a56:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a58:	78 a1       	ldd	r23, Y+32	; 0x20
    2a5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	1c f4       	brge	.+6      	; 0x2a74 <HLCD_voidSendCommand+0x530>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	8e 8f       	std	Y+30, r24	; 0x1e
    2a72:	91 c0       	rjmp	.+290    	; 0x2b96 <HLCD_voidSendCommand+0x652>
	else if (__tmp > 255)
    2a74:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a76:	78 a1       	ldd	r23, Y+32	; 0x20
    2a78:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4f e7       	ldi	r20, 0x7F	; 127
    2a82:	53 e4       	ldi	r21, 0x43	; 67
    2a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a88:	18 16       	cp	r1, r24
    2a8a:	0c f0       	brlt	.+2      	; 0x2a8e <HLCD_voidSendCommand+0x54a>
    2a8c:	7b c0       	rjmp	.+246    	; 0x2b84 <HLCD_voidSendCommand+0x640>
	{
		_delay_ms(__us / 1000.0);
    2a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a90:	7c a1       	ldd	r23, Y+36	; 0x24
    2a92:	8d a1       	ldd	r24, Y+37	; 0x25
    2a94:	9e a1       	ldd	r25, Y+38	; 0x26
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a e7       	ldi	r20, 0x7A	; 122
    2a9c:	54 e4       	ldi	r21, 0x44	; 68
    2a9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8a 8f       	std	Y+26, r24	; 0x1a
    2aa8:	9b 8f       	std	Y+27, r25	; 0x1b
    2aaa:	ac 8f       	std	Y+28, r26	; 0x1c
    2aac:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ab0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ab2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ab4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8e 8b       	std	Y+22, r24	; 0x16
    2ac8:	9f 8b       	std	Y+23, r25	; 0x17
    2aca:	a8 8f       	std	Y+24, r26	; 0x18
    2acc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2ace:	6e 89       	ldd	r22, Y+22	; 0x16
    2ad0:	7f 89       	ldd	r23, Y+23	; 0x17
    2ad2:	88 8d       	ldd	r24, Y+24	; 0x18
    2ad4:	99 8d       	ldd	r25, Y+25	; 0x19
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <HLCD_voidSendCommand+0x5ac>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9d 8b       	std	Y+21, r25	; 0x15
    2aec:	8c 8b       	std	Y+20, r24	; 0x14
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <HLCD_voidSendCommand+0x62a>
	else if (__tmp > 65535)
    2af0:	6e 89       	ldd	r22, Y+22	; 0x16
    2af2:	7f 89       	ldd	r23, Y+23	; 0x17
    2af4:	88 8d       	ldd	r24, Y+24	; 0x18
    2af6:	99 8d       	ldd	r25, Y+25	; 0x19
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <HLCD_voidSendCommand+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b0a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b0e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9d 8b       	std	Y+21, r25	; 0x15
    2b2e:	8c 8b       	std	Y+20, r24	; 0x14
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <HLCD_voidSendCommand+0x60c>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9b 8b       	std	Y+19, r25	; 0x13
    2b38:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b3a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b3c:	9b 89       	ldd	r25, Y+19	; 0x13
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <HLCD_voidSendCommand+0x5fa>
    2b42:	9b 8b       	std	Y+19, r25	; 0x13
    2b44:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8c 89       	ldd	r24, Y+20	; 0x14
    2b48:	9d 89       	ldd	r25, Y+21	; 0x15
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9d 8b       	std	Y+21, r25	; 0x15
    2b4e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8c 89       	ldd	r24, Y+20	; 0x14
    2b52:	9d 89       	ldd	r25, Y+21	; 0x15
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <HLCD_voidSendCommand+0x5ee>
    2b58:	24 c0       	rjmp	.+72     	; 0x2ba2 <HLCD_voidSendCommand+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6e 89       	ldd	r22, Y+22	; 0x16
    2b5c:	7f 89       	ldd	r23, Y+23	; 0x17
    2b5e:	88 8d       	ldd	r24, Y+24	; 0x18
    2b60:	99 8d       	ldd	r25, Y+25	; 0x19
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9d 8b       	std	Y+21, r25	; 0x15
    2b6c:	8c 8b       	std	Y+20, r24	; 0x14
    2b6e:	8c 89       	ldd	r24, Y+20	; 0x14
    2b70:	9d 89       	ldd	r25, Y+21	; 0x15
    2b72:	99 8b       	std	Y+17, r25	; 0x11
    2b74:	88 8b       	std	Y+16, r24	; 0x10
    2b76:	88 89       	ldd	r24, Y+16	; 0x10
    2b78:	99 89       	ldd	r25, Y+17	; 0x11
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <HLCD_voidSendCommand+0x636>
    2b7e:	99 8b       	std	Y+17, r25	; 0x11
    2b80:	88 8b       	std	Y+16, r24	; 0x10
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <HLCD_voidSendCommand+0x65e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b84:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b86:	78 a1       	ldd	r23, Y+32	; 0x20
    2b88:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	8e 8f       	std	Y+30, r24	; 0x1e
    2b96:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b98:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9c:	8a 95       	dec	r24
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <HLCD_voidSendCommand+0x658>
    2ba0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
MDIO_VoidSetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_PIN_LOW);
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	62 e0       	ldi	r22, 0x02	; 2
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	0e 94 41 18 	call	0x3082	; 0x3082 <MDIO_VoidSetPinValue>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e0       	ldi	r26, 0x00	; 0
    2bb2:	b0 e4       	ldi	r27, 0x40	; 64
    2bb4:	8b 87       	std	Y+11, r24	; 0x0b
    2bb6:	9c 87       	std	Y+12, r25	; 0x0c
    2bb8:	ad 87       	std	Y+13, r26	; 0x0d
    2bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a ef       	ldi	r20, 0xFA	; 250
    2bca:	54 e4       	ldi	r21, 0x44	; 68
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	8f 83       	std	Y+7, r24	; 0x07
    2bd6:	98 87       	std	Y+8, r25	; 0x08
    2bd8:	a9 87       	std	Y+9, r26	; 0x09
    2bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <HLCD_voidSendCommand+0x6ba>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <HLCD_voidSendCommand+0x738>
	else if (__tmp > 65535)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <HLCD_voidSendCommand+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <HLCD_voidSendCommand+0x71a>
    2c40:	88 ec       	ldi	r24, 0xC8	; 200
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9c 83       	std	Y+4, r25	; 0x04
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <HLCD_voidSendCommand+0x708>
    2c50:	9c 83       	std	Y+4, r25	; 0x04
    2c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	9e 83       	std	Y+6, r25	; 0x06
    2c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <HLCD_voidSendCommand+0x6fc>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <HLCD_voidSendCommand+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6a:	78 85       	ldd	r23, Y+8	; 0x08
    2c6c:	89 85       	ldd	r24, Y+9	; 0x09
    2c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	9a 83       	std	Y+2, r25	; 0x02
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a 81       	ldd	r25, Y+2	; 0x02
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <HLCD_voidSendCommand+0x744>
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2c90:	c9 5a       	subi	r28, 0xA9	; 169
    2c92:	df 4f       	sbci	r29, 0xFF	; 255
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	08 95       	ret

00002ca8 <HLCD_voidSendString>:


void HLCD_voidSendString(char Copy_u8Data[]){
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <HLCD_voidSendString+0x6>
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <HLCD_voidSendString+0x8>
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0 ;
    2cb8:	1a 82       	std	Y+2, r1	; 0x02
    2cba:	19 82       	std	Y+1, r1	; 0x01
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <HLCD_voidSendString+0x34>
	while (Copy_u8Data[i]!='\0'){
		HLCD_voidSendData(Copy_u8Data[i]);
    2cbe:	29 81       	ldd	r18, Y+1	; 0x01
    2cc0:	3a 81       	ldd	r19, Y+2	; 0x02
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	80 81       	ld	r24, Z
    2cce:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <HLCD_voidSendData>
		i++;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
}


void HLCD_voidSendString(char Copy_u8Data[]){
	int i = 0 ;
	while (Copy_u8Data[i]!='\0'){
    2cdc:	29 81       	ldd	r18, Y+1	; 0x01
    2cde:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	e2 0f       	add	r30, r18
    2ce8:	f3 1f       	adc	r31, r19
    2cea:	80 81       	ld	r24, Z
    2cec:	88 23       	and	r24, r24
    2cee:	39 f7       	brne	.-50     	; 0x2cbe <HLCD_voidSendString+0x16>
		HLCD_voidSendData(Copy_u8Data[i]);
		i++;
	}
}
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <HLCD_voidSendInt>:

void HLCD_voidSendInt(s32 Copy_u32Data){
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	68 97       	sbiw	r28, 0x18	; 24
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	6d 8b       	std	Y+21, r22	; 0x15
    2d14:	7e 8b       	std	Y+22, r23	; 0x16
    2d16:	8f 8b       	std	Y+23, r24	; 0x17
    2d18:	98 8f       	std	Y+24, r25	; 0x18
	s8 s[20];
	itoa(Copy_u32Data, s, 10);
    2d1a:	8d 89       	ldd	r24, Y+21	; 0x15
    2d1c:	9e 89       	ldd	r25, Y+22	; 0x16
    2d1e:	9e 01       	movw	r18, r28
    2d20:	2f 5f       	subi	r18, 0xFF	; 255
    2d22:	3f 4f       	sbci	r19, 0xFF	; 255
    2d24:	b9 01       	movw	r22, r18
    2d26:	4a e0       	ldi	r20, 0x0A	; 10
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	0e 94 49 31 	call	0x6292	; 0x6292 <itoa>
	HLCD_voidSendString(s);
    2d2e:	ce 01       	movw	r24, r28
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
}
    2d36:	68 96       	adiw	r28, 0x18	; 24
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(){
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000001);
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>

}
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <HLCD_voidReturnHome>:

void HLCD_voidReturnHome(){
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000010);
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>
}
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	08 95       	ret

00002d70 <HLCD_voidSetCursorPosition>:

void HLCD_voidSetCursorPosition(u8 x , u8 y){
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <HLCD_voidSetCursorPosition+0x6>
    2d76:	0f 92       	push	r0
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	8a 83       	std	Y+2, r24	; 0x02
    2d7e:	6b 83       	std	Y+3, r22	; 0x03
	u8 command = 0b10000000;
    2d80:	80 e8       	ldi	r24, 0x80	; 128
    2d82:	89 83       	std	Y+1, r24	; 0x01
	if (x == 2) command  |=0x40 ;
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	82 30       	cpi	r24, 0x02	; 2
    2d88:	19 f4       	brne	.+6      	; 0x2d90 <HLCD_voidSetCursorPosition+0x20>
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	80 64       	ori	r24, 0x40	; 64
    2d8e:	89 83       	std	Y+1, r24	; 0x01
	command  +=y ;
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	89 0f       	add	r24, r25
    2d96:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(command);
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	0e 94 a2 12 	call	0x2544	; 0x2544 <HLCD_voidSendCommand>
}
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <Mapping>:




u16 Mapping(u16 X_MAX,u16 X_MIN,u16 Y_MAX,u16 Y_MIN,u16 Y)
{
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	2c 97       	sbiw	r28, 0x0c	; 12
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	9c 83       	std	Y+4, r25	; 0x04
    2dc8:	8b 83       	std	Y+3, r24	; 0x03
    2dca:	7e 83       	std	Y+6, r23	; 0x06
    2dcc:	6d 83       	std	Y+5, r22	; 0x05
    2dce:	58 87       	std	Y+8, r21	; 0x08
    2dd0:	4f 83       	std	Y+7, r20	; 0x07
    2dd2:	3a 87       	std	Y+10, r19	; 0x0a
    2dd4:	29 87       	std	Y+9, r18	; 0x09
    2dd6:	1c 87       	std	Y+12, r17	; 0x0c
    2dd8:	0b 87       	std	Y+11, r16	; 0x0b
	u16 X;
	X = ( (  ((u32) (X_MAX - X_MIN) * (Y-Y_MIN) )/ (Y_MAX-Y_MIN) ) + X_MIN);
    2dda:	2b 81       	ldd	r18, Y+3	; 0x03
    2ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	a9 01       	movw	r20, r18
    2de4:	48 1b       	sub	r20, r24
    2de6:	59 0b       	sbc	r21, r25
    2de8:	ca 01       	movw	r24, r20
    2dea:	7c 01       	movw	r14, r24
    2dec:	00 e0       	ldi	r16, 0x00	; 0
    2dee:	10 e0       	ldi	r17, 0x00	; 0
    2df0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2df2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2df4:	89 85       	ldd	r24, Y+9	; 0x09
    2df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df8:	a9 01       	movw	r20, r18
    2dfa:	48 1b       	sub	r20, r24
    2dfc:	59 0b       	sbc	r21, r25
    2dfe:	ca 01       	movw	r24, r20
    2e00:	9c 01       	movw	r18, r24
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	50 e0       	ldi	r21, 0x00	; 0
    2e06:	c8 01       	movw	r24, r16
    2e08:	b7 01       	movw	r22, r14
    2e0a:	0e 94 bd 30 	call	0x617a	; 0x617a <__mulsi3>
    2e0e:	7b 01       	movw	r14, r22
    2e10:	8c 01       	movw	r16, r24
    2e12:	2f 81       	ldd	r18, Y+7	; 0x07
    2e14:	38 85       	ldd	r19, Y+8	; 0x08
    2e16:	89 85       	ldd	r24, Y+9	; 0x09
    2e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1a:	a9 01       	movw	r20, r18
    2e1c:	48 1b       	sub	r20, r24
    2e1e:	59 0b       	sbc	r21, r25
    2e20:	ca 01       	movw	r24, r20
    2e22:	9c 01       	movw	r18, r24
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	c8 01       	movw	r24, r16
    2e2a:	b7 01       	movw	r22, r14
    2e2c:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <__udivmodsi4>
    2e30:	da 01       	movw	r26, r20
    2e32:	c9 01       	movw	r24, r18
    2e34:	9c 01       	movw	r18, r24
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	82 0f       	add	r24, r18
    2e3c:	93 1f       	adc	r25, r19
    2e3e:	9a 83       	std	Y+2, r25	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01

	return X ;
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e46:	2c 96       	adiw	r28, 0x0c	; 12
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	ef 90       	pop	r14
    2e5e:	08 95       	ret

00002e60 <MDIO_VoidSetPinDirection>:




Error_state_t MDIO_VoidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	28 97       	sbiw	r28, 0x08	; 8
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	8a 83       	std	Y+2, r24	; 0x02
    2e76:	6b 83       	std	Y+3, r22	; 0x03
    2e78:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_state=Return_Ok ;
    2e7a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	88 30       	cpi	r24, 0x08	; 8
    2e80:	08 f0       	brcs	.+2      	; 0x2e84 <MDIO_VoidSetPinDirection+0x24>
    2e82:	f3 c0       	rjmp	.+486    	; 0x306a <MDIO_VoidSetPinDirection+0x20a>
	{
		if(Copy_u8Mode==DIO_PIN_INPUT)
    2e84:	8c 81       	ldd	r24, Y+4	; 0x04
    2e86:	82 30       	cpi	r24, 0x02	; 2
    2e88:	09 f0       	breq	.+2      	; 0x2e8c <MDIO_VoidSetPinDirection+0x2c>
    2e8a:	78 c0       	rjmp	.+240    	; 0x2f7c <MDIO_VoidSetPinDirection+0x11c>
		{
			switch(Copy_u8Port)
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	38 87       	std	Y+8, r19	; 0x08
    2e94:	2f 83       	std	Y+7, r18	; 0x07
    2e96:	8f 81       	ldd	r24, Y+7	; 0x07
    2e98:	98 85       	ldd	r25, Y+8	; 0x08
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	61 f1       	breq	.+88     	; 0x2ef8 <MDIO_VoidSetPinDirection+0x98>
    2ea0:	2f 81       	ldd	r18, Y+7	; 0x07
    2ea2:	38 85       	ldd	r19, Y+8	; 0x08
    2ea4:	23 30       	cpi	r18, 0x03	; 3
    2ea6:	31 05       	cpc	r19, r1
    2ea8:	34 f4       	brge	.+12     	; 0x2eb6 <MDIO_VoidSetPinDirection+0x56>
    2eaa:	8f 81       	ldd	r24, Y+7	; 0x07
    2eac:	98 85       	ldd	r25, Y+8	; 0x08
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	91 05       	cpc	r25, r1
    2eb2:	69 f0       	breq	.+26     	; 0x2ece <MDIO_VoidSetPinDirection+0x6e>
    2eb4:	60 c0       	rjmp	.+192    	; 0x2f76 <MDIO_VoidSetPinDirection+0x116>
    2eb6:	2f 81       	ldd	r18, Y+7	; 0x07
    2eb8:	38 85       	ldd	r19, Y+8	; 0x08
    2eba:	23 30       	cpi	r18, 0x03	; 3
    2ebc:	31 05       	cpc	r19, r1
    2ebe:	89 f1       	breq	.+98     	; 0x2f22 <MDIO_VoidSetPinDirection+0xc2>
    2ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec2:	98 85       	ldd	r25, Y+8	; 0x08
    2ec4:	84 30       	cpi	r24, 0x04	; 4
    2ec6:	91 05       	cpc	r25, r1
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <MDIO_VoidSetPinDirection+0x6c>
    2eca:	40 c0       	rjmp	.+128    	; 0x2f4c <MDIO_VoidSetPinDirection+0xec>
    2ecc:	54 c0       	rjmp	.+168    	; 0x2f76 <MDIO_VoidSetPinDirection+0x116>
			{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break ;
    2ece:	aa e3       	ldi	r26, 0x3A	; 58
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	ea e3       	ldi	r30, 0x3A	; 58
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	48 2f       	mov	r20, r24
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	02 2e       	mov	r0, r18
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <MDIO_VoidSetPinDirection+0x8c>
    2ee8:	88 0f       	add	r24, r24
    2eea:	99 1f       	adc	r25, r25
    2eec:	0a 94       	dec	r0
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <MDIO_VoidSetPinDirection+0x88>
    2ef0:	80 95       	com	r24
    2ef2:	84 23       	and	r24, r20
    2ef4:	8c 93       	st	X, r24
    2ef6:	bb c0       	rjmp	.+374    	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break ;
    2ef8:	a7 e3       	ldi	r26, 0x37	; 55
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e7 e3       	ldi	r30, 0x37	; 55
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	48 2f       	mov	r20, r24
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	28 2f       	mov	r18, r24
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	02 2e       	mov	r0, r18
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <MDIO_VoidSetPinDirection+0xb6>
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	0a 94       	dec	r0
    2f18:	e2 f7       	brpl	.-8      	; 0x2f12 <MDIO_VoidSetPinDirection+0xb2>
    2f1a:	80 95       	com	r24
    2f1c:	84 23       	and	r24, r20
    2f1e:	8c 93       	st	X, r24
    2f20:	a6 c0       	rjmp	.+332    	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break ;
    2f22:	a4 e3       	ldi	r26, 0x34	; 52
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e4 e3       	ldi	r30, 0x34	; 52
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	48 2f       	mov	r20, r24
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	02 2e       	mov	r0, r18
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <MDIO_VoidSetPinDirection+0xe0>
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	0a 94       	dec	r0
    2f42:	e2 f7       	brpl	.-8      	; 0x2f3c <MDIO_VoidSetPinDirection+0xdc>
    2f44:	80 95       	com	r24
    2f46:	84 23       	and	r24, r20
    2f48:	8c 93       	st	X, r24
    2f4a:	91 c0       	rjmp	.+290    	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break ;
    2f4c:	a1 e3       	ldi	r26, 0x31	; 49
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e1 e3       	ldi	r30, 0x31	; 49
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	48 2f       	mov	r20, r24
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	02 2e       	mov	r0, r18
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <MDIO_VoidSetPinDirection+0x10a>
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	0a 94       	dec	r0
    2f6c:	e2 f7       	brpl	.-8      	; 0x2f66 <MDIO_VoidSetPinDirection+0x106>
    2f6e:	80 95       	com	r24
    2f70:	84 23       	and	r24, r20
    2f72:	8c 93       	st	X, r24
    2f74:	7c c0       	rjmp	.+248    	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			default : Error_state=Return_Nok ; break ;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	79 c0       	rjmp	.+242    	; 0x306e <MDIO_VoidSetPinDirection+0x20e>

			}
		}
		else if(Copy_u8Mode==DIO_PIN_OUTPUT)
    2f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7e:	81 30       	cpi	r24, 0x01	; 1
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <MDIO_VoidSetPinDirection+0x124>
    2f82:	75 c0       	rjmp	.+234    	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
		{
			switch(Copy_u8Port)
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	3e 83       	std	Y+6, r19	; 0x06
    2f8c:	2d 83       	std	Y+5, r18	; 0x05
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	82 30       	cpi	r24, 0x02	; 2
    2f94:	91 05       	cpc	r25, r1
    2f96:	51 f1       	breq	.+84     	; 0x2fec <MDIO_VoidSetPinDirection+0x18c>
    2f98:	2d 81       	ldd	r18, Y+5	; 0x05
    2f9a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f9c:	23 30       	cpi	r18, 0x03	; 3
    2f9e:	31 05       	cpc	r19, r1
    2fa0:	34 f4       	brge	.+12     	; 0x2fae <MDIO_VoidSetPinDirection+0x14e>
    2fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa6:	81 30       	cpi	r24, 0x01	; 1
    2fa8:	91 05       	cpc	r25, r1
    2faa:	61 f0       	breq	.+24     	; 0x2fc4 <MDIO_VoidSetPinDirection+0x164>
    2fac:	5b c0       	rjmp	.+182    	; 0x3064 <MDIO_VoidSetPinDirection+0x204>
    2fae:	2d 81       	ldd	r18, Y+5	; 0x05
    2fb0:	3e 81       	ldd	r19, Y+6	; 0x06
    2fb2:	23 30       	cpi	r18, 0x03	; 3
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	71 f1       	breq	.+92     	; 0x3014 <MDIO_VoidSetPinDirection+0x1b4>
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	84 30       	cpi	r24, 0x04	; 4
    2fbe:	91 05       	cpc	r25, r1
    2fc0:	e9 f1       	breq	.+122    	; 0x303c <MDIO_VoidSetPinDirection+0x1dc>
    2fc2:	50 c0       	rjmp	.+160    	; 0x3064 <MDIO_VoidSetPinDirection+0x204>
			{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin); break ;
    2fc4:	aa e3       	ldi	r26, 0x3A	; 58
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	ea e3       	ldi	r30, 0x3A	; 58
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	48 2f       	mov	r20, r24
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	02 2e       	mov	r0, r18
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <MDIO_VoidSetPinDirection+0x182>
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	0a 94       	dec	r0
    2fe4:	e2 f7       	brpl	.-8      	; 0x2fde <MDIO_VoidSetPinDirection+0x17e>
    2fe6:	84 2b       	or	r24, r20
    2fe8:	8c 93       	st	X, r24
    2fea:	41 c0       	rjmp	.+130    	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin); break ;
    2fec:	a7 e3       	ldi	r26, 0x37	; 55
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	e7 e3       	ldi	r30, 0x37	; 55
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	48 2f       	mov	r20, r24
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	02 2e       	mov	r0, r18
    3004:	02 c0       	rjmp	.+4      	; 0x300a <MDIO_VoidSetPinDirection+0x1aa>
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	0a 94       	dec	r0
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <MDIO_VoidSetPinDirection+0x1a6>
    300e:	84 2b       	or	r24, r20
    3010:	8c 93       	st	X, r24
    3012:	2d c0       	rjmp	.+90     	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin); break ;
    3014:	a4 e3       	ldi	r26, 0x34	; 52
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e4 e3       	ldi	r30, 0x34	; 52
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	48 2f       	mov	r20, r24
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	02 2e       	mov	r0, r18
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <MDIO_VoidSetPinDirection+0x1d2>
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	0a 94       	dec	r0
    3034:	e2 f7       	brpl	.-8      	; 0x302e <MDIO_VoidSetPinDirection+0x1ce>
    3036:	84 2b       	or	r24, r20
    3038:	8c 93       	st	X, r24
    303a:	19 c0       	rjmp	.+50     	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin); break ;
    303c:	a1 e3       	ldi	r26, 0x31	; 49
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e1 e3       	ldi	r30, 0x31	; 49
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	48 2f       	mov	r20, r24
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	02 2e       	mov	r0, r18
    3054:	02 c0       	rjmp	.+4      	; 0x305a <MDIO_VoidSetPinDirection+0x1fa>
    3056:	88 0f       	add	r24, r24
    3058:	99 1f       	adc	r25, r25
    305a:	0a 94       	dec	r0
    305c:	e2 f7       	brpl	.-8      	; 0x3056 <MDIO_VoidSetPinDirection+0x1f6>
    305e:	84 2b       	or	r24, r20
    3060:	8c 93       	st	X, r24
    3062:	05 c0       	rjmp	.+10     	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			default :Error_state=Return_Nok ;  break ;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	02 c0       	rjmp	.+4      	; 0x306e <MDIO_VoidSetPinDirection+0x20e>
			}
		}
	}
	else
	{
		Error_state=Return_Nok ;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    306e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3070:	28 96       	adiw	r28, 0x08	; 8
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <MDIO_VoidSetPinValue>:
Error_state_t MDIO_VoidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	28 97       	sbiw	r28, 0x08	; 8
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	8a 83       	std	Y+2, r24	; 0x02
    3098:	6b 83       	std	Y+3, r22	; 0x03
    309a:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_state=Return_Ok ;
    309c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	88 30       	cpi	r24, 0x08	; 8
    30a2:	08 f0       	brcs	.+2      	; 0x30a6 <MDIO_VoidSetPinValue+0x24>
    30a4:	f3 c0       	rjmp	.+486    	; 0x328c <MDIO_VoidSetPinValue+0x20a>
	{
		if(Copy_u8Mode==DIO_PIN_LOW)
    30a6:	8c 81       	ldd	r24, Y+4	; 0x04
    30a8:	88 23       	and	r24, r24
    30aa:	09 f0       	breq	.+2      	; 0x30ae <MDIO_VoidSetPinValue+0x2c>
    30ac:	78 c0       	rjmp	.+240    	; 0x319e <MDIO_VoidSetPinValue+0x11c>
		{
			switch(Copy_u8Port)
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	28 2f       	mov	r18, r24
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	38 87       	std	Y+8, r19	; 0x08
    30b6:	2f 83       	std	Y+7, r18	; 0x07
    30b8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ba:	98 85       	ldd	r25, Y+8	; 0x08
    30bc:	82 30       	cpi	r24, 0x02	; 2
    30be:	91 05       	cpc	r25, r1
    30c0:	61 f1       	breq	.+88     	; 0x311a <MDIO_VoidSetPinValue+0x98>
    30c2:	2f 81       	ldd	r18, Y+7	; 0x07
    30c4:	38 85       	ldd	r19, Y+8	; 0x08
    30c6:	23 30       	cpi	r18, 0x03	; 3
    30c8:	31 05       	cpc	r19, r1
    30ca:	34 f4       	brge	.+12     	; 0x30d8 <MDIO_VoidSetPinValue+0x56>
    30cc:	8f 81       	ldd	r24, Y+7	; 0x07
    30ce:	98 85       	ldd	r25, Y+8	; 0x08
    30d0:	81 30       	cpi	r24, 0x01	; 1
    30d2:	91 05       	cpc	r25, r1
    30d4:	69 f0       	breq	.+26     	; 0x30f0 <MDIO_VoidSetPinValue+0x6e>
    30d6:	60 c0       	rjmp	.+192    	; 0x3198 <MDIO_VoidSetPinValue+0x116>
    30d8:	2f 81       	ldd	r18, Y+7	; 0x07
    30da:	38 85       	ldd	r19, Y+8	; 0x08
    30dc:	23 30       	cpi	r18, 0x03	; 3
    30de:	31 05       	cpc	r19, r1
    30e0:	89 f1       	breq	.+98     	; 0x3144 <MDIO_VoidSetPinValue+0xc2>
    30e2:	8f 81       	ldd	r24, Y+7	; 0x07
    30e4:	98 85       	ldd	r25, Y+8	; 0x08
    30e6:	84 30       	cpi	r24, 0x04	; 4
    30e8:	91 05       	cpc	r25, r1
    30ea:	09 f4       	brne	.+2      	; 0x30ee <MDIO_VoidSetPinValue+0x6c>
    30ec:	40 c0       	rjmp	.+128    	; 0x316e <MDIO_VoidSetPinValue+0xec>
    30ee:	54 c0       	rjmp	.+168    	; 0x3198 <MDIO_VoidSetPinValue+0x116>
			{
			case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin); break ;
    30f0:	ab e3       	ldi	r26, 0x3B	; 59
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	eb e3       	ldi	r30, 0x3B	; 59
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	48 2f       	mov	r20, r24
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	28 2f       	mov	r18, r24
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	02 2e       	mov	r0, r18
    3108:	02 c0       	rjmp	.+4      	; 0x310e <MDIO_VoidSetPinValue+0x8c>
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	0a 94       	dec	r0
    3110:	e2 f7       	brpl	.-8      	; 0x310a <MDIO_VoidSetPinValue+0x88>
    3112:	80 95       	com	r24
    3114:	84 23       	and	r24, r20
    3116:	8c 93       	st	X, r24
    3118:	bb c0       	rjmp	.+374    	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin); break ;
    311a:	a8 e3       	ldi	r26, 0x38	; 56
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e8 e3       	ldi	r30, 0x38	; 56
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	48 2f       	mov	r20, r24
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	02 2e       	mov	r0, r18
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <MDIO_VoidSetPinValue+0xb6>
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	0a 94       	dec	r0
    313a:	e2 f7       	brpl	.-8      	; 0x3134 <MDIO_VoidSetPinValue+0xb2>
    313c:	80 95       	com	r24
    313e:	84 23       	and	r24, r20
    3140:	8c 93       	st	X, r24
    3142:	a6 c0       	rjmp	.+332    	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin); break ;
    3144:	a5 e3       	ldi	r26, 0x35	; 53
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e5 e3       	ldi	r30, 0x35	; 53
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	48 2f       	mov	r20, r24
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	02 2e       	mov	r0, r18
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <MDIO_VoidSetPinValue+0xe0>
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	0a 94       	dec	r0
    3164:	e2 f7       	brpl	.-8      	; 0x315e <MDIO_VoidSetPinValue+0xdc>
    3166:	80 95       	com	r24
    3168:	84 23       	and	r24, r20
    316a:	8c 93       	st	X, r24
    316c:	91 c0       	rjmp	.+290    	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin); break ;
    316e:	a2 e3       	ldi	r26, 0x32	; 50
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e2 e3       	ldi	r30, 0x32	; 50
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	48 2f       	mov	r20, r24
    317a:	8b 81       	ldd	r24, Y+3	; 0x03
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	02 2e       	mov	r0, r18
    3186:	02 c0       	rjmp	.+4      	; 0x318c <MDIO_VoidSetPinValue+0x10a>
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	0a 94       	dec	r0
    318e:	e2 f7       	brpl	.-8      	; 0x3188 <MDIO_VoidSetPinValue+0x106>
    3190:	80 95       	com	r24
    3192:	84 23       	and	r24, r20
    3194:	8c 93       	st	X, r24
    3196:	7c c0       	rjmp	.+248    	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			default :Error_state = Return_Nok ; break ;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	79 c0       	rjmp	.+242    	; 0x3290 <MDIO_VoidSetPinValue+0x20e>

			}
		}
		else if(Copy_u8Mode==DIO_PIN_HIGH)
    319e:	8c 81       	ldd	r24, Y+4	; 0x04
    31a0:	81 30       	cpi	r24, 0x01	; 1
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <MDIO_VoidSetPinValue+0x124>
    31a4:	75 c0       	rjmp	.+234    	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
		{
			switch(Copy_u8Port)
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	3e 83       	std	Y+6, r19	; 0x06
    31ae:	2d 83       	std	Y+5, r18	; 0x05
    31b0:	8d 81       	ldd	r24, Y+5	; 0x05
    31b2:	9e 81       	ldd	r25, Y+6	; 0x06
    31b4:	82 30       	cpi	r24, 0x02	; 2
    31b6:	91 05       	cpc	r25, r1
    31b8:	51 f1       	breq	.+84     	; 0x320e <MDIO_VoidSetPinValue+0x18c>
    31ba:	2d 81       	ldd	r18, Y+5	; 0x05
    31bc:	3e 81       	ldd	r19, Y+6	; 0x06
    31be:	23 30       	cpi	r18, 0x03	; 3
    31c0:	31 05       	cpc	r19, r1
    31c2:	34 f4       	brge	.+12     	; 0x31d0 <MDIO_VoidSetPinValue+0x14e>
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	9e 81       	ldd	r25, Y+6	; 0x06
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	91 05       	cpc	r25, r1
    31cc:	61 f0       	breq	.+24     	; 0x31e6 <MDIO_VoidSetPinValue+0x164>
    31ce:	5b c0       	rjmp	.+182    	; 0x3286 <MDIO_VoidSetPinValue+0x204>
    31d0:	2d 81       	ldd	r18, Y+5	; 0x05
    31d2:	3e 81       	ldd	r19, Y+6	; 0x06
    31d4:	23 30       	cpi	r18, 0x03	; 3
    31d6:	31 05       	cpc	r19, r1
    31d8:	71 f1       	breq	.+92     	; 0x3236 <MDIO_VoidSetPinValue+0x1b4>
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	84 30       	cpi	r24, 0x04	; 4
    31e0:	91 05       	cpc	r25, r1
    31e2:	e9 f1       	breq	.+122    	; 0x325e <MDIO_VoidSetPinValue+0x1dc>
    31e4:	50 c0       	rjmp	.+160    	; 0x3286 <MDIO_VoidSetPinValue+0x204>
			{
			case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin); break ;
    31e6:	ab e3       	ldi	r26, 0x3B	; 59
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	eb e3       	ldi	r30, 0x3B	; 59
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	48 2f       	mov	r20, r24
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	28 2f       	mov	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	02 2e       	mov	r0, r18
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <MDIO_VoidSetPinValue+0x182>
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	0a 94       	dec	r0
    3206:	e2 f7       	brpl	.-8      	; 0x3200 <MDIO_VoidSetPinValue+0x17e>
    3208:	84 2b       	or	r24, r20
    320a:	8c 93       	st	X, r24
    320c:	41 c0       	rjmp	.+130    	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin); break ;
    320e:	a8 e3       	ldi	r26, 0x38	; 56
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e8 e3       	ldi	r30, 0x38	; 56
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	48 2f       	mov	r20, r24
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	02 2e       	mov	r0, r18
    3226:	02 c0       	rjmp	.+4      	; 0x322c <MDIO_VoidSetPinValue+0x1aa>
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	0a 94       	dec	r0
    322e:	e2 f7       	brpl	.-8      	; 0x3228 <MDIO_VoidSetPinValue+0x1a6>
    3230:	84 2b       	or	r24, r20
    3232:	8c 93       	st	X, r24
    3234:	2d c0       	rjmp	.+90     	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin); break ;
    3236:	a5 e3       	ldi	r26, 0x35	; 53
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e5 e3       	ldi	r30, 0x35	; 53
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	48 2f       	mov	r20, r24
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	02 2e       	mov	r0, r18
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <MDIO_VoidSetPinValue+0x1d2>
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	0a 94       	dec	r0
    3256:	e2 f7       	brpl	.-8      	; 0x3250 <MDIO_VoidSetPinValue+0x1ce>
    3258:	84 2b       	or	r24, r20
    325a:	8c 93       	st	X, r24
    325c:	19 c0       	rjmp	.+50     	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin); break ;
    325e:	a2 e3       	ldi	r26, 0x32	; 50
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e2 e3       	ldi	r30, 0x32	; 50
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	48 2f       	mov	r20, r24
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	02 2e       	mov	r0, r18
    3276:	02 c0       	rjmp	.+4      	; 0x327c <MDIO_VoidSetPinValue+0x1fa>
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	0a 94       	dec	r0
    327e:	e2 f7       	brpl	.-8      	; 0x3278 <MDIO_VoidSetPinValue+0x1f6>
    3280:	84 2b       	or	r24, r20
    3282:	8c 93       	st	X, r24
    3284:	05 c0       	rjmp	.+10     	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			default :Error_state = Return_Nok ; break ;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <MDIO_VoidSetPinValue+0x20e>
			}
		}
	}
	else
	{
		Error_state = Return_Nok ;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    3290:	89 81       	ldd	r24, Y+1	; 0x01

}
    3292:	28 96       	adiw	r28, 0x08	; 8
    3294:	0f b6       	in	r0, 0x3f	; 63
    3296:	f8 94       	cli
    3298:	de bf       	out	0x3e, r29	; 62
    329a:	0f be       	out	0x3f, r0	; 63
    329c:	cd bf       	out	0x3d, r28	; 61
    329e:	cf 91       	pop	r28
    32a0:	df 91       	pop	r29
    32a2:	08 95       	ret

000032a4 <MDIO_VoidGetPinValue>:
Error_state_t MDIO_VoidGetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *P_u8Value)
{
    32a4:	df 93       	push	r29
    32a6:	cf 93       	push	r28
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	27 97       	sbiw	r28, 0x07	; 7
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
    32b8:	8a 83       	std	Y+2, r24	; 0x02
    32ba:	6b 83       	std	Y+3, r22	; 0x03
    32bc:	5d 83       	std	Y+5, r21	; 0x05
    32be:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_State=Return_Ok ;
    32c0:	19 82       	std	Y+1, r1	; 0x01
	if(P_u8Value != NULL)
    32c2:	8c 81       	ldd	r24, Y+4	; 0x04
    32c4:	9d 81       	ldd	r25, Y+5	; 0x05
    32c6:	81 30       	cpi	r24, 0x01	; 1
    32c8:	91 05       	cpc	r25, r1
    32ca:	09 f4       	brne	.+2      	; 0x32ce <MDIO_VoidGetPinValue+0x2a>
    32cc:	7b c0       	rjmp	.+246    	; 0x33c4 <MDIO_VoidGetPinValue+0x120>
	{
		if(Copy_u8Pin<=7)
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	88 30       	cpi	r24, 0x08	; 8
    32d2:	08 f0       	brcs	.+2      	; 0x32d6 <MDIO_VoidGetPinValue+0x32>
    32d4:	74 c0       	rjmp	.+232    	; 0x33be <MDIO_VoidGetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	3f 83       	std	Y+7, r19	; 0x07
    32de:	2e 83       	std	Y+6, r18	; 0x06
    32e0:	4e 81       	ldd	r20, Y+6	; 0x06
    32e2:	5f 81       	ldd	r21, Y+7	; 0x07
    32e4:	42 30       	cpi	r20, 0x02	; 2
    32e6:	51 05       	cpc	r21, r1
    32e8:	59 f1       	breq	.+86     	; 0x3340 <MDIO_VoidGetPinValue+0x9c>
    32ea:	8e 81       	ldd	r24, Y+6	; 0x06
    32ec:	9f 81       	ldd	r25, Y+7	; 0x07
    32ee:	83 30       	cpi	r24, 0x03	; 3
    32f0:	91 05       	cpc	r25, r1
    32f2:	34 f4       	brge	.+12     	; 0x3300 <MDIO_VoidGetPinValue+0x5c>
    32f4:	2e 81       	ldd	r18, Y+6	; 0x06
    32f6:	3f 81       	ldd	r19, Y+7	; 0x07
    32f8:	21 30       	cpi	r18, 0x01	; 1
    32fa:	31 05       	cpc	r19, r1
    32fc:	69 f0       	breq	.+26     	; 0x3318 <MDIO_VoidGetPinValue+0x74>
    32fe:	5c c0       	rjmp	.+184    	; 0x33b8 <MDIO_VoidGetPinValue+0x114>
    3300:	4e 81       	ldd	r20, Y+6	; 0x06
    3302:	5f 81       	ldd	r21, Y+7	; 0x07
    3304:	43 30       	cpi	r20, 0x03	; 3
    3306:	51 05       	cpc	r21, r1
    3308:	79 f1       	breq	.+94     	; 0x3368 <MDIO_VoidGetPinValue+0xc4>
    330a:	8e 81       	ldd	r24, Y+6	; 0x06
    330c:	9f 81       	ldd	r25, Y+7	; 0x07
    330e:	84 30       	cpi	r24, 0x04	; 4
    3310:	91 05       	cpc	r25, r1
    3312:	09 f4       	brne	.+2      	; 0x3316 <MDIO_VoidGetPinValue+0x72>
    3314:	3d c0       	rjmp	.+122    	; 0x3390 <MDIO_VoidGetPinValue+0xec>
    3316:	50 c0       	rjmp	.+160    	; 0x33b8 <MDIO_VoidGetPinValue+0x114>
			{
			case DIO_PORTA :*P_u8Value= GET_BIT(PINA,Copy_u8Pin); break ;
    3318:	e9 e3       	ldi	r30, 0x39	; 57
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	88 2f       	mov	r24, r24
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a9 01       	movw	r20, r18
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <MDIO_VoidGetPinValue+0x8c>
    332c:	55 95       	asr	r21
    332e:	47 95       	ror	r20
    3330:	8a 95       	dec	r24
    3332:	e2 f7       	brpl	.-8      	; 0x332c <MDIO_VoidGetPinValue+0x88>
    3334:	ca 01       	movw	r24, r20
    3336:	81 70       	andi	r24, 0x01	; 1
    3338:	ec 81       	ldd	r30, Y+4	; 0x04
    333a:	fd 81       	ldd	r31, Y+5	; 0x05
    333c:	80 83       	st	Z, r24
    333e:	44 c0       	rjmp	.+136    	; 0x33c8 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTB :*P_u8Value= GET_BIT(PINB,Copy_u8Pin); break ;
    3340:	e6 e3       	ldi	r30, 0x36	; 54
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	8b 81       	ldd	r24, Y+3	; 0x03
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a9 01       	movw	r20, r18
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <MDIO_VoidGetPinValue+0xb4>
    3354:	55 95       	asr	r21
    3356:	47 95       	ror	r20
    3358:	8a 95       	dec	r24
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <MDIO_VoidGetPinValue+0xb0>
    335c:	ca 01       	movw	r24, r20
    335e:	81 70       	andi	r24, 0x01	; 1
    3360:	ec 81       	ldd	r30, Y+4	; 0x04
    3362:	fd 81       	ldd	r31, Y+5	; 0x05
    3364:	80 83       	st	Z, r24
    3366:	30 c0       	rjmp	.+96     	; 0x33c8 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTC :*P_u8Value= GET_BIT(PINC,Copy_u8Pin); break ;
    3368:	e3 e3       	ldi	r30, 0x33	; 51
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	88 2f       	mov	r24, r24
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	a9 01       	movw	r20, r18
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <MDIO_VoidGetPinValue+0xdc>
    337c:	55 95       	asr	r21
    337e:	47 95       	ror	r20
    3380:	8a 95       	dec	r24
    3382:	e2 f7       	brpl	.-8      	; 0x337c <MDIO_VoidGetPinValue+0xd8>
    3384:	ca 01       	movw	r24, r20
    3386:	81 70       	andi	r24, 0x01	; 1
    3388:	ec 81       	ldd	r30, Y+4	; 0x04
    338a:	fd 81       	ldd	r31, Y+5	; 0x05
    338c:	80 83       	st	Z, r24
    338e:	1c c0       	rjmp	.+56     	; 0x33c8 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTD :*P_u8Value= GET_BIT(PIND,Copy_u8Pin); break ;
    3390:	e0 e3       	ldi	r30, 0x30	; 48
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	88 2f       	mov	r24, r24
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	a9 01       	movw	r20, r18
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <MDIO_VoidGetPinValue+0x104>
    33a4:	55 95       	asr	r21
    33a6:	47 95       	ror	r20
    33a8:	8a 95       	dec	r24
    33aa:	e2 f7       	brpl	.-8      	; 0x33a4 <MDIO_VoidGetPinValue+0x100>
    33ac:	ca 01       	movw	r24, r20
    33ae:	81 70       	andi	r24, 0x01	; 1
    33b0:	ec 81       	ldd	r30, Y+4	; 0x04
    33b2:	fd 81       	ldd	r31, Y+5	; 0x05
    33b4:	80 83       	st	Z, r24
    33b6:	08 c0       	rjmp	.+16     	; 0x33c8 <MDIO_VoidGetPinValue+0x124>
			default :Error_State=Return_Nok ;  break ;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	05 c0       	rjmp	.+10     	; 0x33c8 <MDIO_VoidGetPinValue+0x124>
			}
		}
		else
		{
			Error_State=Return_Nok ;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	89 83       	std	Y+1, r24	; 0x01
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <MDIO_VoidGetPinValue+0x124>
		}
	}
	else
	{
		Error_State=Return_NullPointer ;
    33c4:	82 e0       	ldi	r24, 0x02	; 2
    33c6:	89 83       	std	Y+1, r24	; 0x01
	}



	return Error_State ;
    33c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    33ca:	27 96       	adiw	r28, 0x07	; 7
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <MDIO_VoidSetPortValue>:

Error_state_t MDIO_VoidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <MDIO_VoidSetPortValue+0x6>
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <MDIO_VoidSetPortValue+0x8>
    33e4:	0f 92       	push	r0
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	8a 83       	std	Y+2, r24	; 0x02
    33ec:	6b 83       	std	Y+3, r22	; 0x03
	Error_state_t Error_State=Return_Ok ;
    33ee:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	3d 83       	std	Y+5, r19	; 0x05
    33f8:	2c 83       	std	Y+4, r18	; 0x04
    33fa:	8c 81       	ldd	r24, Y+4	; 0x04
    33fc:	9d 81       	ldd	r25, Y+5	; 0x05
    33fe:	82 30       	cpi	r24, 0x02	; 2
    3400:	91 05       	cpc	r25, r1
    3402:	d9 f0       	breq	.+54     	; 0x343a <MDIO_VoidSetPortValue+0x5e>
    3404:	2c 81       	ldd	r18, Y+4	; 0x04
    3406:	3d 81       	ldd	r19, Y+5	; 0x05
    3408:	23 30       	cpi	r18, 0x03	; 3
    340a:	31 05       	cpc	r19, r1
    340c:	34 f4       	brge	.+12     	; 0x341a <MDIO_VoidSetPortValue+0x3e>
    340e:	8c 81       	ldd	r24, Y+4	; 0x04
    3410:	9d 81       	ldd	r25, Y+5	; 0x05
    3412:	81 30       	cpi	r24, 0x01	; 1
    3414:	91 05       	cpc	r25, r1
    3416:	61 f0       	breq	.+24     	; 0x3430 <MDIO_VoidSetPortValue+0x54>
    3418:	1f c0       	rjmp	.+62     	; 0x3458 <MDIO_VoidSetPortValue+0x7c>
    341a:	2c 81       	ldd	r18, Y+4	; 0x04
    341c:	3d 81       	ldd	r19, Y+5	; 0x05
    341e:	23 30       	cpi	r18, 0x03	; 3
    3420:	31 05       	cpc	r19, r1
    3422:	81 f0       	breq	.+32     	; 0x3444 <MDIO_VoidSetPortValue+0x68>
    3424:	8c 81       	ldd	r24, Y+4	; 0x04
    3426:	9d 81       	ldd	r25, Y+5	; 0x05
    3428:	84 30       	cpi	r24, 0x04	; 4
    342a:	91 05       	cpc	r25, r1
    342c:	81 f0       	breq	.+32     	; 0x344e <MDIO_VoidSetPortValue+0x72>
    342e:	14 c0       	rjmp	.+40     	; 0x3458 <MDIO_VoidSetPortValue+0x7c>
	{
	case DIO_PORTA : PORTA=Copy_u8Value ;break ;
    3430:	eb e3       	ldi	r30, 0x3B	; 59
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	80 83       	st	Z, r24
    3438:	11 c0       	rjmp	.+34     	; 0x345c <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTB : PORTB=Copy_u8Value ;break ;
    343a:	e8 e3       	ldi	r30, 0x38	; 56
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	80 83       	st	Z, r24
    3442:	0c c0       	rjmp	.+24     	; 0x345c <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTC : PORTC=Copy_u8Value ;break ;
    3444:	e5 e3       	ldi	r30, 0x35	; 53
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	8b 81       	ldd	r24, Y+3	; 0x03
    344a:	80 83       	st	Z, r24
    344c:	07 c0       	rjmp	.+14     	; 0x345c <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTD : PORTD=Copy_u8Value ;break ;
    344e:	e2 e3       	ldi	r30, 0x32	; 50
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	8b 81       	ldd	r24, Y+3	; 0x03
    3454:	80 83       	st	Z, r24
    3456:	02 c0       	rjmp	.+4      	; 0x345c <MDIO_VoidSetPortValue+0x80>
	default : Error_State=Return_Nok ;break ;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State=Return_Nok ;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	89 83       	std	Y+1, r24	; 0x01
    3460:	89 81       	ldd	r24, Y+1	; 0x01
}
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <Port_voidInit>:
void Port_voidInit()
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR ;
    347a:	ea e3       	ldi	r30, 0x3A	; 58
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 ec       	ldi	r24, 0xC0	; 192
    3480:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
    3482:	e7 e3       	ldi	r30, 0x37	; 55
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	8f ea       	ldi	r24, 0xAF	; 175
    3488:	80 83       	st	Z, r24
	DDRC = PORTC_DIR ;
    348a:	e4 e3       	ldi	r30, 0x34	; 52
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    3492:	e1 e3       	ldi	r30, 0x31	; 49
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	8e ef       	ldi	r24, 0xFE	; 254
    3498:	80 83       	st	Z, r24


	PORTA = PORTA_Value ;
    349a:	eb e3       	ldi	r30, 0x3B	; 59
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	8c e3       	ldi	r24, 0x3C	; 60
    34a0:	80 83       	st	Z, r24
	PORTB = PORTB_Value ;
    34a2:	e8 e3       	ldi	r30, 0x38	; 56
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	10 82       	st	Z, r1
	PORTC = PORTC_Value ;
    34a8:	e5 e3       	ldi	r30, 0x35	; 53
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	10 82       	st	Z, r1
	PORTD = PORTD_Value ;
    34ae:	e2 e3       	ldi	r30, 0x32	; 50
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	10 82       	st	Z, r1

}
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <MDIO_VoidTogglePin>:


Error_state_t MDIO_VoidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <MDIO_VoidTogglePin+0x6>
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <MDIO_VoidTogglePin+0x8>
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	8a 83       	std	Y+2, r24	; 0x02
    34ca:	6b 83       	std	Y+3, r22	; 0x03
	Error_state_t Error_state=Return_Ok ;
    34cc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	88 30       	cpi	r24, 0x08	; 8
    34d2:	08 f0       	brcs	.+2      	; 0x34d6 <MDIO_VoidTogglePin+0x1c>
    34d4:	73 c0       	rjmp	.+230    	; 0x35bc <MDIO_VoidTogglePin+0x102>
	{

			switch(Copy_u8Port)
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	3d 83       	std	Y+5, r19	; 0x05
    34de:	2c 83       	std	Y+4, r18	; 0x04
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	9d 81       	ldd	r25, Y+5	; 0x05
    34e4:	82 30       	cpi	r24, 0x02	; 2
    34e6:	91 05       	cpc	r25, r1
    34e8:	51 f1       	breq	.+84     	; 0x353e <MDIO_VoidTogglePin+0x84>
    34ea:	2c 81       	ldd	r18, Y+4	; 0x04
    34ec:	3d 81       	ldd	r19, Y+5	; 0x05
    34ee:	23 30       	cpi	r18, 0x03	; 3
    34f0:	31 05       	cpc	r19, r1
    34f2:	34 f4       	brge	.+12     	; 0x3500 <MDIO_VoidTogglePin+0x46>
    34f4:	8c 81       	ldd	r24, Y+4	; 0x04
    34f6:	9d 81       	ldd	r25, Y+5	; 0x05
    34f8:	81 30       	cpi	r24, 0x01	; 1
    34fa:	91 05       	cpc	r25, r1
    34fc:	61 f0       	breq	.+24     	; 0x3516 <MDIO_VoidTogglePin+0x5c>
    34fe:	5b c0       	rjmp	.+182    	; 0x35b6 <MDIO_VoidTogglePin+0xfc>
    3500:	2c 81       	ldd	r18, Y+4	; 0x04
    3502:	3d 81       	ldd	r19, Y+5	; 0x05
    3504:	23 30       	cpi	r18, 0x03	; 3
    3506:	31 05       	cpc	r19, r1
    3508:	71 f1       	breq	.+92     	; 0x3566 <MDIO_VoidTogglePin+0xac>
    350a:	8c 81       	ldd	r24, Y+4	; 0x04
    350c:	9d 81       	ldd	r25, Y+5	; 0x05
    350e:	84 30       	cpi	r24, 0x04	; 4
    3510:	91 05       	cpc	r25, r1
    3512:	e9 f1       	breq	.+122    	; 0x358e <MDIO_VoidTogglePin+0xd4>
    3514:	50 c0       	rjmp	.+160    	; 0x35b6 <MDIO_VoidTogglePin+0xfc>
			{
			case DIO_PORTA : TOGGLE_BIT(PORTA,Copy_u8Pin); break ;
    3516:	ab e3       	ldi	r26, 0x3B	; 59
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	eb e3       	ldi	r30, 0x3B	; 59
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	48 2f       	mov	r20, r24
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	02 2e       	mov	r0, r18
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <MDIO_VoidTogglePin+0x7a>
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	0a 94       	dec	r0
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <MDIO_VoidTogglePin+0x76>
    3538:	84 27       	eor	r24, r20
    353a:	8c 93       	st	X, r24
    353c:	41 c0       	rjmp	.+130    	; 0x35c0 <MDIO_VoidTogglePin+0x106>
			case DIO_PORTB : TOGGLE_BIT(PORTB,Copy_u8Pin); break ;
    353e:	a8 e3       	ldi	r26, 0x38	; 56
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	e8 e3       	ldi	r30, 0x38	; 56
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	48 2f       	mov	r20, r24
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	02 2e       	mov	r0, r18
    3556:	02 c0       	rjmp	.+4      	; 0x355c <MDIO_VoidTogglePin+0xa2>
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	0a 94       	dec	r0
    355e:	e2 f7       	brpl	.-8      	; 0x3558 <MDIO_VoidTogglePin+0x9e>
    3560:	84 27       	eor	r24, r20
    3562:	8c 93       	st	X, r24
    3564:	2d c0       	rjmp	.+90     	; 0x35c0 <MDIO_VoidTogglePin+0x106>
			case DIO_PORTC : TOGGLE_BIT(PORTC,Copy_u8Pin); break ;
    3566:	a5 e3       	ldi	r26, 0x35	; 53
    3568:	b0 e0       	ldi	r27, 0x00	; 0
    356a:	e5 e3       	ldi	r30, 0x35	; 53
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
    3570:	48 2f       	mov	r20, r24
    3572:	8b 81       	ldd	r24, Y+3	; 0x03
    3574:	28 2f       	mov	r18, r24
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	02 2e       	mov	r0, r18
    357e:	02 c0       	rjmp	.+4      	; 0x3584 <MDIO_VoidTogglePin+0xca>
    3580:	88 0f       	add	r24, r24
    3582:	99 1f       	adc	r25, r25
    3584:	0a 94       	dec	r0
    3586:	e2 f7       	brpl	.-8      	; 0x3580 <MDIO_VoidTogglePin+0xc6>
    3588:	84 27       	eor	r24, r20
    358a:	8c 93       	st	X, r24
    358c:	19 c0       	rjmp	.+50     	; 0x35c0 <MDIO_VoidTogglePin+0x106>
			case DIO_PORTD : TOGGLE_BIT(PORTD,Copy_u8Pin); break ;
    358e:	a2 e3       	ldi	r26, 0x32	; 50
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	e2 e3       	ldi	r30, 0x32	; 50
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	48 2f       	mov	r20, r24
    359a:	8b 81       	ldd	r24, Y+3	; 0x03
    359c:	28 2f       	mov	r18, r24
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	02 2e       	mov	r0, r18
    35a6:	02 c0       	rjmp	.+4      	; 0x35ac <MDIO_VoidTogglePin+0xf2>
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	0a 94       	dec	r0
    35ae:	e2 f7       	brpl	.-8      	; 0x35a8 <MDIO_VoidTogglePin+0xee>
    35b0:	84 27       	eor	r24, r20
    35b2:	8c 93       	st	X, r24
    35b4:	05 c0       	rjmp	.+10     	; 0x35c0 <MDIO_VoidTogglePin+0x106>
			default :Error_state = Return_Nok ; break ;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	89 83       	std	Y+1, r24	; 0x01
    35ba:	02 c0       	rjmp	.+4      	; 0x35c0 <MDIO_VoidTogglePin+0x106>
			}
	}
	else
	{
		Error_state = Return_Nok ;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    35c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	cf 91       	pop	r28
    35ce:	df 91       	pop	r29
    35d0:	08 95       	ret

000035d2 <MGIE_voidEnable>:
#include "MACROS.h"
#include "MGIE_register.h".h"
#include "MGIE_interface.h"

void MGIE_voidEnable()
{
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_INT);
    35da:	af e5       	ldi	r26, 0x5F	; 95
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	ef e5       	ldi	r30, 0x5F	; 95
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	80 68       	ori	r24, 0x80	; 128
    35e6:	8c 93       	st	X, r24
}
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	08 95       	ret

000035ee <MGIE_voidDisable>:
void MGIE_voidDisable()
{
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_INT);
    35f6:	af e5       	ldi	r26, 0x5F	; 95
    35f8:	b0 e0       	ldi	r27, 0x00	; 0
    35fa:	ef e5       	ldi	r30, 0x5F	; 95
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	8f 77       	andi	r24, 0x7F	; 127
    3602:	8c 93       	st	X, r24
}
    3604:	cf 91       	pop	r28
    3606:	df 91       	pop	r29
    3608:	08 95       	ret

0000360a <MSPI_voidInit>:
#include "MSPI_config.h"
#include "MSPI_private.h"
#include "MSPI_interface.h"

void MSPI_voidInit()
{
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	cd b7       	in	r28, 0x3d	; 61
    3610:	de b7       	in	r29, 0x3e	; 62

	/*Data Order*/
	SET_BIT(SPCR,SPCR_DORD);
    3612:	ad e2       	ldi	r26, 0x2D	; 45
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	ed e2       	ldi	r30, 0x2D	; 45
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	80 62       	ori	r24, 0x20	; 32
    361e:	8c 93       	st	X, r24
	/*Master & Slave Selection */
#if SPI_MODE==SPI_MASTER
	SET_BIT(SPCR,SPCR_MSTR);
    3620:	ad e2       	ldi	r26, 0x2D	; 45
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	ed e2       	ldi	r30, 0x2D	; 45
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	80 61       	ori	r24, 0x10	; 16
    362c:	8c 93       	st	X, r24
	/*Select Prescaler as 16*/
	SET_BIT(SPCR,SPCR_SPR0);
    362e:	ad e2       	ldi	r26, 0x2D	; 45
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	ed e2       	ldi	r30, 0x2D	; 45
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	81 60       	ori	r24, 0x01	; 1
    363a:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    363c:	ad e2       	ldi	r26, 0x2D	; 45
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	ed e2       	ldi	r30, 0x2D	; 45
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	8d 7f       	andi	r24, 0xFD	; 253
    3648:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    364a:	ae e2       	ldi	r26, 0x2E	; 46
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	ee e2       	ldi	r30, 0x2E	; 46
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	8e 7f       	andi	r24, 0xFE	; 254
    3656:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_MSTR);
#else
#error"Wrong SPI Mode Configuration"
#endif
	/* Select Clock Polarity as Leading edge rising*/
	CLR_BIT(SPCR,SPCR_CPOL);
    3658:	ad e2       	ldi	r26, 0x2D	; 45
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	ed e2       	ldi	r30, 0x2D	; 45
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	87 7f       	andi	r24, 0xF7	; 247
    3664:	8c 93       	st	X, r24
	/* Select Clock Phase as Leading edge is sample*/
	CLR_BIT(SPCR,SPCR_CPHA);
    3666:	ad e2       	ldi	r26, 0x2D	; 45
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	ed e2       	ldi	r30, 0x2D	; 45
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	8b 7f       	andi	r24, 0xFB	; 251
    3672:	8c 93       	st	X, r24

	/*Enable SPI peripheral*/
	SET_BIT(SPCR,SPCR_SPE);
    3674:	ad e2       	ldi	r26, 0x2D	; 45
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	ed e2       	ldi	r30, 0x2D	; 45
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	80 64       	ori	r24, 0x40	; 64
    3680:	8c 93       	st	X, r24

}
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <MSPI_voidTranceive>:
u8 MSPI_voidTranceive(u8 Copy_u8Data)
{
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	0f 92       	push	r0
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data ;
    3694:	ef e2       	ldi	r30, 0x2F	; 47
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	80 83       	st	Z, r24

	while( (GET_BIT(SPSR,SPSR_SPIF)) ==0);
    369c:	ee e2       	ldi	r30, 0x2E	; 46
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	88 23       	and	r24, r24
    36a4:	dc f7       	brge	.-10     	; 0x369c <MSPI_voidTranceive+0x14>

	return SPDR ;
    36a6:	ef e2       	ldi	r30, 0x2F	; 47
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	80 81       	ld	r24, Z
}
    36ac:	0f 90       	pop	r0
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <MTIMER0_voidInit>:
void (*Timer2_PF_CMP)(void)=NULL ;

/**************************************TIMER0 ******************************************/

void MTIMER0_voidInit()
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TIMSK,TIMSK_TOIE0); // Overflow Interrupt enable

#elif TIMER0_MODE==TIMER0_CTC_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
    36bc:	a3 e5       	ldi	r26, 0x53	; 83
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	e3 e5       	ldi	r30, 0x53	; 83
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	8f 7b       	andi	r24, 0xBF	; 191
    36c8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    36ca:	a3 e5       	ldi	r26, 0x53	; 83
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	e3 e5       	ldi	r30, 0x53	; 83
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	88 60       	ori	r24, 0x08	; 8
    36d6:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_OCIE0); // Compare Match Interrupt enable
    36d8:	a9 e5       	ldi	r26, 0x59	; 89
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e9 e5       	ldi	r30, 0x59	; 89
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	80 81       	ld	r24, Z
    36e2:	82 60       	ori	r24, 0x02	; 2
    36e4:	8c 93       	st	X, r24
#if TIMER0_PRESCALER==TIMER0_NO_PRESCALER
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
#elif  TIMER0_PRESCALER==TIMER0_8_PRESCALER
	CLR_BIT(TCCR0,TCCR0_CS00);
    36e6:	a3 e5       	ldi	r26, 0x53	; 83
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e3 e5       	ldi	r30, 0x53	; 83
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	8e 7f       	andi	r24, 0xFE	; 254
    36f2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    36f4:	a3 e5       	ldi	r26, 0x53	; 83
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e3 e5       	ldi	r30, 0x53	; 83
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	82 60       	ori	r24, 0x02	; 2
    3700:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    3702:	a3 e5       	ldi	r26, 0x53	; 83
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	e3 e5       	ldi	r30, 0x53	; 83
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	8b 7f       	andi	r24, 0xFB	; 251
    370e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
#else
#error"Wrong Timer0 Prescaler Selection"
#endif
}
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	08 95       	ret

00003716 <MTIMER0_voidDisable>:
void MTIMER0_voidDisable()
{
    3716:	df 93       	push	r29
    3718:	cf 93       	push	r28
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
	/*No Clock Source*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    371e:	a3 e5       	ldi	r26, 0x53	; 83
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e3 e5       	ldi	r30, 0x53	; 83
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	8e 7f       	andi	r24, 0xFE	; 254
    372a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    372c:	a3 e5       	ldi	r26, 0x53	; 83
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e3 e5       	ldi	r30, 0x53	; 83
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	8d 7f       	andi	r24, 0xFD	; 253
    3738:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    373a:	a3 e5       	ldi	r26, 0x53	; 83
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e3 e5       	ldi	r30, 0x53	; 83
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	8b 7f       	andi	r24, 0xFB	; 251
    3746:	8c 93       	st	X, r24
}
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	0f 92       	push	r0
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle ;
    375a:	ec e5       	ldi	r30, 0x5C	; 92
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	80 83       	st	Z, r24
}
    3762:	0f 90       	pop	r0
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <MTIMER0_voidPreload>:
void MTIMER0_voidPreload(u8 Copy_u8Preload)
{
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	0f 92       	push	r0
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62
    3774:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload ;
    3776:	e2 e5       	ldi	r30, 0x52	; 82
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	80 83       	st	Z, r24
}
    377e:	0f 90       	pop	r0
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <MTIMER0_voidCompMatchValue>:

void MTIMER0_voidCompMatchValue(u8 Copy_u8ComMatchValue)
{
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	0f 92       	push	r0
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8ComMatchValue ;
    3792:	ec e5       	ldi	r30, 0x5C	; 92
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	80 83       	st	Z, r24
}
    379a:	0f 90       	pop	r0
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <MTIMER0_voidSetCallBack_OVF>:

void MTIMER0_voidSetCallBack_OVF(void (*Copy_pf)(void) )
{
    37a2:	df 93       	push	r29
    37a4:	cf 93       	push	r28
    37a6:	00 d0       	rcall	.+0      	; 0x37a8 <MTIMER0_voidSetCallBack_OVF+0x6>
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	9a 83       	std	Y+2, r25	; 0x02
    37ae:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_OVF=Copy_pf ;
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	90 93 1b 01 	sts	0x011B, r25
    37b8:	80 93 1a 01 	sts	0x011A, r24
}
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <MTIMER0_voidSetCallBack_CMP>:
void MTIMER0_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <MTIMER0_voidSetCallBack_CMP+0x6>
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	9a 83       	std	Y+2, r25	; 0x02
    37d2:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_CMP=Copy_pf ;
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	9a 81       	ldd	r25, Y+2	; 0x02
    37d8:	90 93 1d 01 	sts	0x011D, r25
    37dc:	80 93 1c 01 	sts	0x011C, r24
}
    37e0:	0f 90       	pop	r0
    37e2:	0f 90       	pop	r0
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	08 95       	ret

000037ea <__vector_11>:
/*OVF*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    37ea:	1f 92       	push	r1
    37ec:	0f 92       	push	r0
    37ee:	0f b6       	in	r0, 0x3f	; 63
    37f0:	0f 92       	push	r0
    37f2:	11 24       	eor	r1, r1
    37f4:	2f 93       	push	r18
    37f6:	3f 93       	push	r19
    37f8:	4f 93       	push	r20
    37fa:	5f 93       	push	r21
    37fc:	6f 93       	push	r22
    37fe:	7f 93       	push	r23
    3800:	8f 93       	push	r24
    3802:	9f 93       	push	r25
    3804:	af 93       	push	r26
    3806:	bf 93       	push	r27
    3808:	ef 93       	push	r30
    380a:	ff 93       	push	r31
    380c:	df 93       	push	r29
    380e:	cf 93       	push	r28
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_OVF != NULL)
    3814:	80 91 1a 01 	lds	r24, 0x011A
    3818:	90 91 1b 01 	lds	r25, 0x011B
    381c:	00 97       	sbiw	r24, 0x00	; 0
    381e:	29 f0       	breq	.+10     	; 0x382a <__vector_11+0x40>
	{
		Timer0_PF_OVF() ;
    3820:	e0 91 1a 01 	lds	r30, 0x011A
    3824:	f0 91 1b 01 	lds	r31, 0x011B
    3828:	09 95       	icall
	}
}
    382a:	cf 91       	pop	r28
    382c:	df 91       	pop	r29
    382e:	ff 91       	pop	r31
    3830:	ef 91       	pop	r30
    3832:	bf 91       	pop	r27
    3834:	af 91       	pop	r26
    3836:	9f 91       	pop	r25
    3838:	8f 91       	pop	r24
    383a:	7f 91       	pop	r23
    383c:	6f 91       	pop	r22
    383e:	5f 91       	pop	r21
    3840:	4f 91       	pop	r20
    3842:	3f 91       	pop	r19
    3844:	2f 91       	pop	r18
    3846:	0f 90       	pop	r0
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	0f 90       	pop	r0
    384c:	1f 90       	pop	r1
    384e:	18 95       	reti

00003850 <__vector_10>:
/*CMP*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    3850:	1f 92       	push	r1
    3852:	0f 92       	push	r0
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	0f 92       	push	r0
    3858:	11 24       	eor	r1, r1
    385a:	2f 93       	push	r18
    385c:	3f 93       	push	r19
    385e:	4f 93       	push	r20
    3860:	5f 93       	push	r21
    3862:	6f 93       	push	r22
    3864:	7f 93       	push	r23
    3866:	8f 93       	push	r24
    3868:	9f 93       	push	r25
    386a:	af 93       	push	r26
    386c:	bf 93       	push	r27
    386e:	ef 93       	push	r30
    3870:	ff 93       	push	r31
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_CMP != NULL)
    387a:	80 91 1c 01 	lds	r24, 0x011C
    387e:	90 91 1d 01 	lds	r25, 0x011D
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	29 f0       	breq	.+10     	; 0x3890 <__vector_10+0x40>
	{
		Timer0_PF_CMP() ;
    3886:	e0 91 1c 01 	lds	r30, 0x011C
    388a:	f0 91 1d 01 	lds	r31, 0x011D
    388e:	09 95       	icall
	}
}
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	ff 91       	pop	r31
    3896:	ef 91       	pop	r30
    3898:	bf 91       	pop	r27
    389a:	af 91       	pop	r26
    389c:	9f 91       	pop	r25
    389e:	8f 91       	pop	r24
    38a0:	7f 91       	pop	r23
    38a2:	6f 91       	pop	r22
    38a4:	5f 91       	pop	r21
    38a6:	4f 91       	pop	r20
    38a8:	3f 91       	pop	r19
    38aa:	2f 91       	pop	r18
    38ac:	0f 90       	pop	r0
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	0f 90       	pop	r0
    38b2:	1f 90       	pop	r1
    38b4:	18 95       	reti

000038b6 <MTIMER1_voidInit>:
/**************************************TIMER1 ******************************************/
void MTIMER1_voidInit(TIMER1MODES_t Copy_enuTimer1Mode , TIMER1_TOPMODES_t Copy_enuTimer1TopMode,TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
    38be:	29 97       	sbiw	r28, 0x09	; 9
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	89 83       	std	Y+1, r24	; 0x01
    38cc:	6a 83       	std	Y+2, r22	; 0x02
    38ce:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_enuTimer1Mode)
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	28 2f       	mov	r18, r24
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	39 87       	std	Y+9, r19	; 0x09
    38d8:	28 87       	std	Y+8, r18	; 0x08
    38da:	88 85       	ldd	r24, Y+8	; 0x08
    38dc:	99 85       	ldd	r25, Y+9	; 0x09
    38de:	81 30       	cpi	r24, 0x01	; 1
    38e0:	91 05       	cpc	r25, r1
    38e2:	79 f1       	breq	.+94     	; 0x3942 <MTIMER1_voidInit+0x8c>
    38e4:	28 85       	ldd	r18, Y+8	; 0x08
    38e6:	39 85       	ldd	r19, Y+9	; 0x09
    38e8:	22 30       	cpi	r18, 0x02	; 2
    38ea:	31 05       	cpc	r19, r1
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <MTIMER1_voidInit+0x3a>
    38ee:	46 c0       	rjmp	.+140    	; 0x397c <MTIMER1_voidInit+0xc6>
    38f0:	88 85       	ldd	r24, Y+8	; 0x08
    38f2:	99 85       	ldd	r25, Y+9	; 0x09
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	09 f0       	breq	.+2      	; 0x38fa <MTIMER1_voidInit+0x44>
    38f8:	5d c0       	rjmp	.+186    	; 0x39b4 <MTIMER1_voidInit+0xfe>
	{
	case TIMER1_CTC_MODE :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    38fa:	af e4       	ldi	r26, 0x4F	; 79
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	ef e4       	ldi	r30, 0x4F	; 79
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	80 81       	ld	r24, Z
    3904:	8f 7b       	andi	r24, 0xBF	; 191
    3906:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    3908:	af e4       	ldi	r26, 0x4F	; 79
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	ef e4       	ldi	r30, 0x4F	; 79
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	80 81       	ld	r24, Z
    3912:	8f 7e       	andi	r24, 0xEF	; 239
    3914:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    3916:	af e4       	ldi	r26, 0x4F	; 79
    3918:	b0 e0       	ldi	r27, 0x00	; 0
    391a:	ef e4       	ldi	r30, 0x4F	; 79
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
    3920:	8f 77       	andi	r24, 0x7F	; 127
    3922:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B1);
    3924:	af e4       	ldi	r26, 0x4F	; 79
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	ef e4       	ldi	r30, 0x4F	; 79
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	8f 7d       	andi	r24, 0xDF	; 223
    3930:	8c 93       	st	X, r24
		/*SEI*/
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    3932:	a9 e5       	ldi	r26, 0x59	; 89
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	e9 e5       	ldi	r30, 0x59	; 89
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	80 61       	ori	r24, 0x10	; 16
    393e:	8c 93       	st	X, r24
    3940:	39 c0       	rjmp	.+114    	; 0x39b4 <MTIMER1_voidInit+0xfe>
		break;
	case TIMER1_FPWM_NON_INVERTING :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    3942:	af e4       	ldi	r26, 0x4F	; 79
    3944:	b0 e0       	ldi	r27, 0x00	; 0
    3946:	ef e4       	ldi	r30, 0x4F	; 79
    3948:	f0 e0       	ldi	r31, 0x00	; 0
    394a:	80 81       	ld	r24, Z
    394c:	8f 7b       	andi	r24, 0xBF	; 191
    394e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    3950:	af e4       	ldi	r26, 0x4F	; 79
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	ef e4       	ldi	r30, 0x4F	; 79
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	80 81       	ld	r24, Z
    395a:	8f 7e       	andi	r24, 0xEF	; 239
    395c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    395e:	af e4       	ldi	r26, 0x4F	; 79
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	ef e4       	ldi	r30, 0x4F	; 79
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	80 68       	ori	r24, 0x80	; 128
    396a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    396c:	af e4       	ldi	r26, 0x4F	; 79
    396e:	b0 e0       	ldi	r27, 0x00	; 0
    3970:	ef e4       	ldi	r30, 0x4F	; 79
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	80 81       	ld	r24, Z
    3976:	80 62       	ori	r24, 0x20	; 32
    3978:	8c 93       	st	X, r24
    397a:	1c c0       	rjmp	.+56     	; 0x39b4 <MTIMER1_voidInit+0xfe>
	case TIMER1_PPWM_NON_INVERTING :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    397c:	af e4       	ldi	r26, 0x4F	; 79
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	ef e4       	ldi	r30, 0x4F	; 79
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	8f 7b       	andi	r24, 0xBF	; 191
    3988:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    398a:	af e4       	ldi	r26, 0x4F	; 79
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	ef e4       	ldi	r30, 0x4F	; 79
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	8f 7e       	andi	r24, 0xEF	; 239
    3996:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    3998:	af e4       	ldi	r26, 0x4F	; 79
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	ef e4       	ldi	r30, 0x4F	; 79
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	80 68       	ori	r24, 0x80	; 128
    39a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    39a6:	af e4       	ldi	r26, 0x4F	; 79
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	ef e4       	ldi	r30, 0x4F	; 79
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	80 62       	ori	r24, 0x20	; 32
    39b2:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1TopMode)
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	28 2f       	mov	r18, r24
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	3f 83       	std	Y+7, r19	; 0x07
    39bc:	2e 83       	std	Y+6, r18	; 0x06
    39be:	8e 81       	ldd	r24, Y+6	; 0x06
    39c0:	9f 81       	ldd	r25, Y+7	; 0x07
    39c2:	81 30       	cpi	r24, 0x01	; 1
    39c4:	91 05       	cpc	r25, r1
    39c6:	b1 f0       	breq	.+44     	; 0x39f4 <MTIMER1_voidInit+0x13e>
    39c8:	2e 81       	ldd	r18, Y+6	; 0x06
    39ca:	3f 81       	ldd	r19, Y+7	; 0x07
    39cc:	22 30       	cpi	r18, 0x02	; 2
    39ce:	31 05       	cpc	r19, r1
    39d0:	2c f4       	brge	.+10     	; 0x39dc <MTIMER1_voidInit+0x126>
    39d2:	8e 81       	ldd	r24, Y+6	; 0x06
    39d4:	9f 81       	ldd	r25, Y+7	; 0x07
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	51 f1       	breq	.+84     	; 0x3a2e <MTIMER1_voidInit+0x178>
    39da:	7f c0       	rjmp	.+254    	; 0x3ada <MTIMER1_voidInit+0x224>
    39dc:	2e 81       	ldd	r18, Y+6	; 0x06
    39de:	3f 81       	ldd	r19, Y+7	; 0x07
    39e0:	22 30       	cpi	r18, 0x02	; 2
    39e2:	31 05       	cpc	r19, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <MTIMER1_voidInit+0x132>
    39e6:	5d c0       	rjmp	.+186    	; 0x3aa2 <MTIMER1_voidInit+0x1ec>
    39e8:	8e 81       	ldd	r24, Y+6	; 0x06
    39ea:	9f 81       	ldd	r25, Y+7	; 0x07
    39ec:	83 30       	cpi	r24, 0x03	; 3
    39ee:	91 05       	cpc	r25, r1
    39f0:	d9 f1       	breq	.+118    	; 0x3a68 <MTIMER1_voidInit+0x1b2>
    39f2:	73 c0       	rjmp	.+230    	; 0x3ada <MTIMER1_voidInit+0x224>
	{
	case TOP_CTC_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    39f4:	af e4       	ldi	r26, 0x4F	; 79
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	ef e4       	ldi	r30, 0x4F	; 79
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	8e 7f       	andi	r24, 0xFE	; 254
    3a00:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3a02:	af e4       	ldi	r26, 0x4F	; 79
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	ef e4       	ldi	r30, 0x4F	; 79
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	8d 7f       	andi	r24, 0xFD	; 253
    3a0e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3a10:	ae e4       	ldi	r26, 0x4E	; 78
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	ee e4       	ldi	r30, 0x4E	; 78
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	88 60       	ori	r24, 0x08	; 8
    3a1c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    3a1e:	ae e4       	ldi	r26, 0x4E	; 78
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	ee e4       	ldi	r30, 0x4E	; 78
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	80 61       	ori	r24, 0x10	; 16
    3a2a:	8c 93       	st	X, r24
    3a2c:	56 c0       	rjmp	.+172    	; 0x3ada <MTIMER1_voidInit+0x224>
	case TOP_CTC_OCR1A :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3a2e:	af e4       	ldi	r26, 0x4F	; 79
    3a30:	b0 e0       	ldi	r27, 0x00	; 0
    3a32:	ef e4       	ldi	r30, 0x4F	; 79
    3a34:	f0 e0       	ldi	r31, 0x00	; 0
    3a36:	80 81       	ld	r24, Z
    3a38:	8e 7f       	andi	r24, 0xFE	; 254
    3a3a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3a3c:	af e4       	ldi	r26, 0x4F	; 79
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	ef e4       	ldi	r30, 0x4F	; 79
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	8d 7f       	andi	r24, 0xFD	; 253
    3a48:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3a4a:	ae e4       	ldi	r26, 0x4E	; 78
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	ee e4       	ldi	r30, 0x4E	; 78
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	80 81       	ld	r24, Z
    3a54:	88 60       	ori	r24, 0x08	; 8
    3a56:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);break;
    3a58:	ae e4       	ldi	r26, 0x4E	; 78
    3a5a:	b0 e0       	ldi	r27, 0x00	; 0
    3a5c:	ee e4       	ldi	r30, 0x4E	; 78
    3a5e:	f0 e0       	ldi	r31, 0x00	; 0
    3a60:	80 81       	ld	r24, Z
    3a62:	8f 7e       	andi	r24, 0xEF	; 239
    3a64:	8c 93       	st	X, r24
    3a66:	39 c0       	rjmp	.+114    	; 0x3ada <MTIMER1_voidInit+0x224>
	case TOP_FPWM_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3a68:	af e4       	ldi	r26, 0x4F	; 79
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	ef e4       	ldi	r30, 0x4F	; 79
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	8e 7f       	andi	r24, 0xFE	; 254
    3a74:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3a76:	af e4       	ldi	r26, 0x4F	; 79
    3a78:	b0 e0       	ldi	r27, 0x00	; 0
    3a7a:	ef e4       	ldi	r30, 0x4F	; 79
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	82 60       	ori	r24, 0x02	; 2
    3a82:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3a84:	ae e4       	ldi	r26, 0x4E	; 78
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	ee e4       	ldi	r30, 0x4E	; 78
    3a8a:	f0 e0       	ldi	r31, 0x00	; 0
    3a8c:	80 81       	ld	r24, Z
    3a8e:	88 60       	ori	r24, 0x08	; 8
    3a90:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    3a92:	ae e4       	ldi	r26, 0x4E	; 78
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	ee e4       	ldi	r30, 0x4E	; 78
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	80 61       	ori	r24, 0x10	; 16
    3a9e:	8c 93       	st	X, r24
    3aa0:	1c c0       	rjmp	.+56     	; 0x3ada <MTIMER1_voidInit+0x224>
	case TOP_FPWM_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    3aa2:	af e4       	ldi	r26, 0x4F	; 79
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	ef e4       	ldi	r30, 0x4F	; 79
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	80 81       	ld	r24, Z
    3aac:	81 60       	ori	r24, 0x01	; 1
    3aae:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    3ab0:	af e4       	ldi	r26, 0x4F	; 79
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	ef e4       	ldi	r30, 0x4F	; 79
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	82 60       	ori	r24, 0x02	; 2
    3abc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    3abe:	ae e4       	ldi	r26, 0x4E	; 78
    3ac0:	b0 e0       	ldi	r27, 0x00	; 0
    3ac2:	ee e4       	ldi	r30, 0x4E	; 78
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	80 81       	ld	r24, Z
    3ac8:	88 60       	ori	r24, 0x08	; 8
    3aca:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    3acc:	ae e4       	ldi	r26, 0x4E	; 78
    3ace:	b0 e0       	ldi	r27, 0x00	; 0
    3ad0:	ee e4       	ldi	r30, 0x4E	; 78
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	80 81       	ld	r24, Z
    3ad6:	80 61       	ori	r24, 0x10	; 16
    3ad8:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1Prescaler)
    3ada:	8b 81       	ldd	r24, Y+3	; 0x03
    3adc:	28 2f       	mov	r18, r24
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	3d 83       	std	Y+5, r19	; 0x05
    3ae2:	2c 83       	std	Y+4, r18	; 0x04
    3ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae8:	82 30       	cpi	r24, 0x02	; 2
    3aea:	91 05       	cpc	r25, r1
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <MTIMER1_voidInit+0x23a>
    3aee:	48 c0       	rjmp	.+144    	; 0x3b80 <MTIMER1_voidInit+0x2ca>
    3af0:	2c 81       	ldd	r18, Y+4	; 0x04
    3af2:	3d 81       	ldd	r19, Y+5	; 0x05
    3af4:	23 30       	cpi	r18, 0x03	; 3
    3af6:	31 05       	cpc	r19, r1
    3af8:	54 f4       	brge	.+20     	; 0x3b0e <MTIMER1_voidInit+0x258>
    3afa:	8c 81       	ldd	r24, Y+4	; 0x04
    3afc:	9d 81       	ldd	r25, Y+5	; 0x05
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	99 f0       	breq	.+38     	; 0x3b28 <MTIMER1_voidInit+0x272>
    3b02:	2c 81       	ldd	r18, Y+4	; 0x04
    3b04:	3d 81       	ldd	r19, Y+5	; 0x05
    3b06:	21 30       	cpi	r18, 0x01	; 1
    3b08:	31 05       	cpc	r19, r1
    3b0a:	21 f1       	breq	.+72     	; 0x3b54 <MTIMER1_voidInit+0x29e>
    3b0c:	7a c0       	rjmp	.+244    	; 0x3c02 <MTIMER1_voidInit+0x34c>
    3b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b10:	9d 81       	ldd	r25, Y+5	; 0x05
    3b12:	83 30       	cpi	r24, 0x03	; 3
    3b14:	91 05       	cpc	r25, r1
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <MTIMER1_voidInit+0x264>
    3b18:	49 c0       	rjmp	.+146    	; 0x3bac <MTIMER1_voidInit+0x2f6>
    3b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b1e:	24 30       	cpi	r18, 0x04	; 4
    3b20:	31 05       	cpc	r19, r1
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <MTIMER1_voidInit+0x270>
    3b24:	59 c0       	rjmp	.+178    	; 0x3bd8 <MTIMER1_voidInit+0x322>
    3b26:	6d c0       	rjmp	.+218    	; 0x3c02 <MTIMER1_voidInit+0x34c>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    3b28:	ae e4       	ldi	r26, 0x4E	; 78
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	ee e4       	ldi	r30, 0x4E	; 78
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	80 81       	ld	r24, Z
    3b32:	81 60       	ori	r24, 0x01	; 1
    3b34:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    3b36:	ae e4       	ldi	r26, 0x4E	; 78
    3b38:	b0 e0       	ldi	r27, 0x00	; 0
    3b3a:	ee e4       	ldi	r30, 0x4E	; 78
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	80 81       	ld	r24, Z
    3b40:	8d 7f       	andi	r24, 0xFD	; 253
    3b42:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    3b44:	ae e4       	ldi	r26, 0x4E	; 78
    3b46:	b0 e0       	ldi	r27, 0x00	; 0
    3b48:	ee e4       	ldi	r30, 0x4E	; 78
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 81       	ld	r24, Z
    3b4e:	8b 7f       	andi	r24, 0xFB	; 251
    3b50:	8c 93       	st	X, r24
    3b52:	57 c0       	rjmp	.+174    	; 0x3c02 <MTIMER1_voidInit+0x34c>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    3b54:	ae e4       	ldi	r26, 0x4E	; 78
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	ee e4       	ldi	r30, 0x4E	; 78
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	80 81       	ld	r24, Z
    3b5e:	8e 7f       	andi	r24, 0xFE	; 254
    3b60:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    3b62:	ae e4       	ldi	r26, 0x4E	; 78
    3b64:	b0 e0       	ldi	r27, 0x00	; 0
    3b66:	ee e4       	ldi	r30, 0x4E	; 78
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	80 81       	ld	r24, Z
    3b6c:	82 60       	ori	r24, 0x02	; 2
    3b6e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    3b70:	ae e4       	ldi	r26, 0x4E	; 78
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	ee e4       	ldi	r30, 0x4E	; 78
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	8b 7f       	andi	r24, 0xFB	; 251
    3b7c:	8c 93       	st	X, r24
    3b7e:	41 c0       	rjmp	.+130    	; 0x3c02 <MTIMER1_voidInit+0x34c>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    3b80:	ae e4       	ldi	r26, 0x4E	; 78
    3b82:	b0 e0       	ldi	r27, 0x00	; 0
    3b84:	ee e4       	ldi	r30, 0x4E	; 78
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	80 81       	ld	r24, Z
    3b8a:	81 60       	ori	r24, 0x01	; 1
    3b8c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    3b8e:	ae e4       	ldi	r26, 0x4E	; 78
    3b90:	b0 e0       	ldi	r27, 0x00	; 0
    3b92:	ee e4       	ldi	r30, 0x4E	; 78
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	82 60       	ori	r24, 0x02	; 2
    3b9a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    3b9c:	ae e4       	ldi	r26, 0x4E	; 78
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	ee e4       	ldi	r30, 0x4E	; 78
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	80 81       	ld	r24, Z
    3ba6:	8b 7f       	andi	r24, 0xFB	; 251
    3ba8:	8c 93       	st	X, r24
    3baa:	2b c0       	rjmp	.+86     	; 0x3c02 <MTIMER1_voidInit+0x34c>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    3bac:	ae e4       	ldi	r26, 0x4E	; 78
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	ee e4       	ldi	r30, 0x4E	; 78
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	80 81       	ld	r24, Z
    3bb6:	8e 7f       	andi	r24, 0xFE	; 254
    3bb8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    3bba:	ae e4       	ldi	r26, 0x4E	; 78
    3bbc:	b0 e0       	ldi	r27, 0x00	; 0
    3bbe:	ee e4       	ldi	r30, 0x4E	; 78
    3bc0:	f0 e0       	ldi	r31, 0x00	; 0
    3bc2:	80 81       	ld	r24, Z
    3bc4:	8d 7f       	andi	r24, 0xFD	; 253
    3bc6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    3bc8:	ae e4       	ldi	r26, 0x4E	; 78
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	ee e4       	ldi	r30, 0x4E	; 78
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	84 60       	ori	r24, 0x04	; 4
    3bd4:	8c 93       	st	X, r24
    3bd6:	15 c0       	rjmp	.+42     	; 0x3c02 <MTIMER1_voidInit+0x34c>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    3bd8:	ae e4       	ldi	r26, 0x4E	; 78
    3bda:	b0 e0       	ldi	r27, 0x00	; 0
    3bdc:	ee e4       	ldi	r30, 0x4E	; 78
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	80 81       	ld	r24, Z
    3be2:	81 60       	ori	r24, 0x01	; 1
    3be4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    3be6:	ae e4       	ldi	r26, 0x4E	; 78
    3be8:	b0 e0       	ldi	r27, 0x00	; 0
    3bea:	ee e4       	ldi	r30, 0x4E	; 78
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	80 81       	ld	r24, Z
    3bf0:	8d 7f       	andi	r24, 0xFD	; 253
    3bf2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    3bf4:	ae e4       	ldi	r26, 0x4E	; 78
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	ee e4       	ldi	r30, 0x4E	; 78
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	84 60       	ori	r24, 0x04	; 4
    3c00:	8c 93       	st	X, r24
	default:break;

	}

}
    3c02:	29 96       	adiw	r28, 0x09	; 9
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	08 95       	ret

00003c14 <MTIMER1_voidDisable>:
void MTIMER1_voidDisable()
{
    3c14:	df 93       	push	r29
    3c16:	cf 93       	push	r28
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    3c1c:	ae e4       	ldi	r26, 0x4E	; 78
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	ee e4       	ldi	r30, 0x4E	; 78
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	8e 7f       	andi	r24, 0xFE	; 254
    3c28:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    3c2a:	ae e4       	ldi	r26, 0x4E	; 78
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	ee e4       	ldi	r30, 0x4E	; 78
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	80 81       	ld	r24, Z
    3c34:	8d 7f       	andi	r24, 0xFD	; 253
    3c36:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    3c38:	ae e4       	ldi	r26, 0x4E	; 78
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	ee e4       	ldi	r30, 0x4E	; 78
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	80 81       	ld	r24, Z
    3c42:	8b 7f       	andi	r24, 0xFB	; 251
    3c44:	8c 93       	st	X, r24
}
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	08 95       	ret

00003c4c <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue(u16 Copy_TopValue ,TIMER1_TOPMODES_t Copy_enuTimer1TopMode)
{
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	00 d0       	rcall	.+0      	; 0x3c52 <MTIMER1_voidSetTopValue+0x6>
    3c52:	00 d0       	rcall	.+0      	; 0x3c54 <MTIMER1_voidSetTopValue+0x8>
    3c54:	0f 92       	push	r0
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	9a 83       	std	Y+2, r25	; 0x02
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuTimer1TopMode)
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	28 2f       	mov	r18, r24
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	3d 83       	std	Y+5, r19	; 0x05
    3c68:	2c 83       	std	Y+4, r18	; 0x04
    3c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c6e:	81 30       	cpi	r24, 0x01	; 1
    3c70:	91 05       	cpc	r25, r1
    3c72:	a9 f0       	breq	.+42     	; 0x3c9e <MTIMER1_voidSetTopValue+0x52>
    3c74:	2c 81       	ldd	r18, Y+4	; 0x04
    3c76:	3d 81       	ldd	r19, Y+5	; 0x05
    3c78:	22 30       	cpi	r18, 0x02	; 2
    3c7a:	31 05       	cpc	r19, r1
    3c7c:	2c f4       	brge	.+10     	; 0x3c88 <MTIMER1_voidSetTopValue+0x3c>
    3c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c80:	9d 81       	ldd	r25, Y+5	; 0x05
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	99 f0       	breq	.+38     	; 0x3cac <MTIMER1_voidSetTopValue+0x60>
    3c86:	26 c0       	rjmp	.+76     	; 0x3cd4 <MTIMER1_voidSetTopValue+0x88>
    3c88:	2c 81       	ldd	r18, Y+4	; 0x04
    3c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c8c:	22 30       	cpi	r18, 0x02	; 2
    3c8e:	31 05       	cpc	r19, r1
    3c90:	d9 f0       	breq	.+54     	; 0x3cc8 <MTIMER1_voidSetTopValue+0x7c>
    3c92:	8c 81       	ldd	r24, Y+4	; 0x04
    3c94:	9d 81       	ldd	r25, Y+5	; 0x05
    3c96:	83 30       	cpi	r24, 0x03	; 3
    3c98:	91 05       	cpc	r25, r1
    3c9a:	79 f0       	breq	.+30     	; 0x3cba <MTIMER1_voidSetTopValue+0x6e>
    3c9c:	1b c0       	rjmp	.+54     	; 0x3cd4 <MTIMER1_voidSetTopValue+0x88>
	{
	case TOP_CTC_ICR1 : ICR1 = Copy_TopValue ;break ;
    3c9e:	e6 e4       	ldi	r30, 0x46	; 70
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	89 81       	ldd	r24, Y+1	; 0x01
    3ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24
    3caa:	14 c0       	rjmp	.+40     	; 0x3cd4 <MTIMER1_voidSetTopValue+0x88>
	case TOP_CTC_OCR1A : OCR1A = Copy_TopValue ;break ;
    3cac:	ea e4       	ldi	r30, 0x4A	; 74
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb4:	91 83       	std	Z+1, r25	; 0x01
    3cb6:	80 83       	st	Z, r24
    3cb8:	0d c0       	rjmp	.+26     	; 0x3cd4 <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_ICR1 : ICR1 = Copy_TopValue ;break ;
    3cba:	e6 e4       	ldi	r30, 0x46	; 70
    3cbc:	f0 e0       	ldi	r31, 0x00	; 0
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
    3cc6:	06 c0       	rjmp	.+12     	; 0x3cd4 <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_OCR1A : OCR1A = Copy_TopValue ;break ;
    3cc8:	ea e4       	ldi	r30, 0x4A	; 74
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
	default:break;

	}
}
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
    3cde:	cf 91       	pop	r28
    3ce0:	df 91       	pop	r29
    3ce2:	08 95       	ret

00003ce4 <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 Copy_DutyCycleValue)
{
    3ce4:	df 93       	push	r29
    3ce6:	cf 93       	push	r28
    3ce8:	00 d0       	rcall	.+0      	; 0x3cea <MTIMER1_voidSetDutyCycle+0x6>
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	9a 83       	std	Y+2, r25	; 0x02
    3cf0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_DutyCycleValue ;
    3cf2:	ea e4       	ldi	r30, 0x4A	; 74
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
}
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	08 95       	ret

00003d08 <MTIMER1_voidSetCallBack_CMP>:

void MTIMER1_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	00 d0       	rcall	.+0      	; 0x3d0e <MTIMER1_voidSetCallBack_CMP+0x6>
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	9a 83       	std	Y+2, r25	; 0x02
    3d14:	89 83       	std	Y+1, r24	; 0x01
	Timer1_PF_CMP=Copy_pf ;
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
    3d18:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1a:	90 93 1f 01 	sts	0x011F, r25
    3d1e:	80 93 1e 01 	sts	0x011E, r24
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	08 95       	ret

00003d2c <MTIMER1_voidICUInit>:

void MTIMER1_voidICUInit(TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <MTIMER1_voidICUInit+0x6>
    3d32:	0f 92       	push	r0
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enuTimer1Prescaler)
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	3b 83       	std	Y+3, r19	; 0x03
    3d42:	2a 83       	std	Y+2, r18	; 0x02
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	9b 81       	ldd	r25, Y+3	; 0x03
    3d48:	82 30       	cpi	r24, 0x02	; 2
    3d4a:	91 05       	cpc	r25, r1
    3d4c:	09 f4       	brne	.+2      	; 0x3d50 <MTIMER1_voidICUInit+0x24>
    3d4e:	48 c0       	rjmp	.+144    	; 0x3de0 <MTIMER1_voidICUInit+0xb4>
    3d50:	2a 81       	ldd	r18, Y+2	; 0x02
    3d52:	3b 81       	ldd	r19, Y+3	; 0x03
    3d54:	23 30       	cpi	r18, 0x03	; 3
    3d56:	31 05       	cpc	r19, r1
    3d58:	54 f4       	brge	.+20     	; 0x3d6e <MTIMER1_voidICUInit+0x42>
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5e:	00 97       	sbiw	r24, 0x00	; 0
    3d60:	99 f0       	breq	.+38     	; 0x3d88 <MTIMER1_voidICUInit+0x5c>
    3d62:	2a 81       	ldd	r18, Y+2	; 0x02
    3d64:	3b 81       	ldd	r19, Y+3	; 0x03
    3d66:	21 30       	cpi	r18, 0x01	; 1
    3d68:	31 05       	cpc	r19, r1
    3d6a:	21 f1       	breq	.+72     	; 0x3db4 <MTIMER1_voidICUInit+0x88>
    3d6c:	7a c0       	rjmp	.+244    	; 0x3e62 <MTIMER1_voidICUInit+0x136>
    3d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d70:	9b 81       	ldd	r25, Y+3	; 0x03
    3d72:	83 30       	cpi	r24, 0x03	; 3
    3d74:	91 05       	cpc	r25, r1
    3d76:	09 f4       	brne	.+2      	; 0x3d7a <MTIMER1_voidICUInit+0x4e>
    3d78:	49 c0       	rjmp	.+146    	; 0x3e0c <MTIMER1_voidICUInit+0xe0>
    3d7a:	2a 81       	ldd	r18, Y+2	; 0x02
    3d7c:	3b 81       	ldd	r19, Y+3	; 0x03
    3d7e:	24 30       	cpi	r18, 0x04	; 4
    3d80:	31 05       	cpc	r19, r1
    3d82:	09 f4       	brne	.+2      	; 0x3d86 <MTIMER1_voidICUInit+0x5a>
    3d84:	59 c0       	rjmp	.+178    	; 0x3e38 <MTIMER1_voidICUInit+0x10c>
    3d86:	6d c0       	rjmp	.+218    	; 0x3e62 <MTIMER1_voidICUInit+0x136>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    3d88:	ae e4       	ldi	r26, 0x4E	; 78
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	ee e4       	ldi	r30, 0x4E	; 78
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	80 81       	ld	r24, Z
    3d92:	81 60       	ori	r24, 0x01	; 1
    3d94:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    3d96:	ae e4       	ldi	r26, 0x4E	; 78
    3d98:	b0 e0       	ldi	r27, 0x00	; 0
    3d9a:	ee e4       	ldi	r30, 0x4E	; 78
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	80 81       	ld	r24, Z
    3da0:	8d 7f       	andi	r24, 0xFD	; 253
    3da2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    3da4:	ae e4       	ldi	r26, 0x4E	; 78
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	ee e4       	ldi	r30, 0x4E	; 78
    3daa:	f0 e0       	ldi	r31, 0x00	; 0
    3dac:	80 81       	ld	r24, Z
    3dae:	8b 7f       	andi	r24, 0xFB	; 251
    3db0:	8c 93       	st	X, r24
    3db2:	57 c0       	rjmp	.+174    	; 0x3e62 <MTIMER1_voidICUInit+0x136>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    3db4:	ae e4       	ldi	r26, 0x4E	; 78
    3db6:	b0 e0       	ldi	r27, 0x00	; 0
    3db8:	ee e4       	ldi	r30, 0x4E	; 78
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	80 81       	ld	r24, Z
    3dbe:	8e 7f       	andi	r24, 0xFE	; 254
    3dc0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    3dc2:	ae e4       	ldi	r26, 0x4E	; 78
    3dc4:	b0 e0       	ldi	r27, 0x00	; 0
    3dc6:	ee e4       	ldi	r30, 0x4E	; 78
    3dc8:	f0 e0       	ldi	r31, 0x00	; 0
    3dca:	80 81       	ld	r24, Z
    3dcc:	82 60       	ori	r24, 0x02	; 2
    3dce:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    3dd0:	ae e4       	ldi	r26, 0x4E	; 78
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	ee e4       	ldi	r30, 0x4E	; 78
    3dd6:	f0 e0       	ldi	r31, 0x00	; 0
    3dd8:	80 81       	ld	r24, Z
    3dda:	8b 7f       	andi	r24, 0xFB	; 251
    3ddc:	8c 93       	st	X, r24
    3dde:	41 c0       	rjmp	.+130    	; 0x3e62 <MTIMER1_voidICUInit+0x136>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    3de0:	ae e4       	ldi	r26, 0x4E	; 78
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	ee e4       	ldi	r30, 0x4E	; 78
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	81 60       	ori	r24, 0x01	; 1
    3dec:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    3dee:	ae e4       	ldi	r26, 0x4E	; 78
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	ee e4       	ldi	r30, 0x4E	; 78
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	80 81       	ld	r24, Z
    3df8:	82 60       	ori	r24, 0x02	; 2
    3dfa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    3dfc:	ae e4       	ldi	r26, 0x4E	; 78
    3dfe:	b0 e0       	ldi	r27, 0x00	; 0
    3e00:	ee e4       	ldi	r30, 0x4E	; 78
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 81       	ld	r24, Z
    3e06:	8b 7f       	andi	r24, 0xFB	; 251
    3e08:	8c 93       	st	X, r24
    3e0a:	2b c0       	rjmp	.+86     	; 0x3e62 <MTIMER1_voidICUInit+0x136>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    3e0c:	ae e4       	ldi	r26, 0x4E	; 78
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	ee e4       	ldi	r30, 0x4E	; 78
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	80 81       	ld	r24, Z
    3e16:	8e 7f       	andi	r24, 0xFE	; 254
    3e18:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    3e1a:	ae e4       	ldi	r26, 0x4E	; 78
    3e1c:	b0 e0       	ldi	r27, 0x00	; 0
    3e1e:	ee e4       	ldi	r30, 0x4E	; 78
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	80 81       	ld	r24, Z
    3e24:	8d 7f       	andi	r24, 0xFD	; 253
    3e26:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    3e28:	ae e4       	ldi	r26, 0x4E	; 78
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	ee e4       	ldi	r30, 0x4E	; 78
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	80 81       	ld	r24, Z
    3e32:	84 60       	ori	r24, 0x04	; 4
    3e34:	8c 93       	st	X, r24
    3e36:	15 c0       	rjmp	.+42     	; 0x3e62 <MTIMER1_voidICUInit+0x136>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    3e38:	ae e4       	ldi	r26, 0x4E	; 78
    3e3a:	b0 e0       	ldi	r27, 0x00	; 0
    3e3c:	ee e4       	ldi	r30, 0x4E	; 78
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	80 81       	ld	r24, Z
    3e42:	81 60       	ori	r24, 0x01	; 1
    3e44:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    3e46:	ae e4       	ldi	r26, 0x4E	; 78
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	ee e4       	ldi	r30, 0x4E	; 78
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 81       	ld	r24, Z
    3e50:	8d 7f       	andi	r24, 0xFD	; 253
    3e52:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    3e54:	ae e4       	ldi	r26, 0x4E	; 78
    3e56:	b0 e0       	ldi	r27, 0x00	; 0
    3e58:	ee e4       	ldi	r30, 0x4E	; 78
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	80 81       	ld	r24, Z
    3e5e:	84 60       	ori	r24, 0x04	; 4
    3e60:	8c 93       	st	X, r24
	default:break;
	}

}
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	cf 91       	pop	r28
    3e6a:	df 91       	pop	r29
    3e6c:	08 95       	ret

00003e6e <MTIMER1_voidSetICUSense>:
void MTIMER1_voidSetICUSense(u8 Copy_u8ICUSense)
{
    3e6e:	df 93       	push	r29
    3e70:	cf 93       	push	r28
    3e72:	00 d0       	rcall	.+0      	; 0x3e74 <MTIMER1_voidSetICUSense+0x6>
    3e74:	0f 92       	push	r0
    3e76:	cd b7       	in	r28, 0x3d	; 61
    3e78:	de b7       	in	r29, 0x3e	; 62
    3e7a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8ICUSense)
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	28 2f       	mov	r18, r24
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	3b 83       	std	Y+3, r19	; 0x03
    3e84:	2a 83       	std	Y+2, r18	; 0x02
    3e86:	8a 81       	ldd	r24, Y+2	; 0x02
    3e88:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8a:	81 30       	cpi	r24, 0x01	; 1
    3e8c:	91 05       	cpc	r25, r1
    3e8e:	69 f0       	breq	.+26     	; 0x3eaa <MTIMER1_voidSetICUSense+0x3c>
    3e90:	2a 81       	ldd	r18, Y+2	; 0x02
    3e92:	3b 81       	ldd	r19, Y+3	; 0x03
    3e94:	22 30       	cpi	r18, 0x02	; 2
    3e96:	31 05       	cpc	r19, r1
    3e98:	79 f4       	brne	.+30     	; 0x3eb8 <MTIMER1_voidSetICUSense+0x4a>
	{
	case ICU_RISING : SET_BIT(TCCR1B,TCCR1B_ICES1);break ;
    3e9a:	ae e4       	ldi	r26, 0x4E	; 78
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	ee e4       	ldi	r30, 0x4E	; 78
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	80 64       	ori	r24, 0x40	; 64
    3ea6:	8c 93       	st	X, r24
    3ea8:	07 c0       	rjmp	.+14     	; 0x3eb8 <MTIMER1_voidSetICUSense+0x4a>
	case ICU_FALLING : CLR_BIT(TCCR1B,TCCR1B_ICES1);break ;
    3eaa:	ae e4       	ldi	r26, 0x4E	; 78
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	ee e4       	ldi	r30, 0x4E	; 78
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	80 81       	ld	r24, Z
    3eb4:	8f 7b       	andi	r24, 0xBF	; 191
    3eb6:	8c 93       	st	X, r24
	default:break;
	}
}
    3eb8:	0f 90       	pop	r0
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	cf 91       	pop	r28
    3ec0:	df 91       	pop	r29
    3ec2:	08 95       	ret

00003ec4 <MTIMER1_voidEnableICUInterrupt>:

void MTIMER1_voidEnableICUInterrupt()
{
    3ec4:	df 93       	push	r29
    3ec6:	cf 93       	push	r28
    3ec8:	cd b7       	in	r28, 0x3d	; 61
    3eca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    3ecc:	a9 e5       	ldi	r26, 0x59	; 89
    3ece:	b0 e0       	ldi	r27, 0x00	; 0
    3ed0:	e9 e5       	ldi	r30, 0x59	; 89
    3ed2:	f0 e0       	ldi	r31, 0x00	; 0
    3ed4:	80 81       	ld	r24, Z
    3ed6:	80 62       	ori	r24, 0x20	; 32
    3ed8:	8c 93       	st	X, r24
}
    3eda:	cf 91       	pop	r28
    3edc:	df 91       	pop	r29
    3ede:	08 95       	ret

00003ee0 <MTIMER1_voidDisableICUInterrupt>:
void MTIMER1_voidDisableICUInterrupt()
{
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	cd b7       	in	r28, 0x3d	; 61
    3ee6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    3ee8:	a9 e5       	ldi	r26, 0x59	; 89
    3eea:	b0 e0       	ldi	r27, 0x00	; 0
    3eec:	e9 e5       	ldi	r30, 0x59	; 89
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	80 81       	ld	r24, Z
    3ef2:	8f 7d       	andi	r24, 0xDF	; 223
    3ef4:	8c 93       	st	X, r24
}
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <MTIMER1_voidGetICUValue>:
u16 MTIMER1_voidGetICUValue()
{
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    3f04:	e6 e4       	ldi	r30, 0x46	; 70
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	08 95       	ret

00003f12 <MTIMER1_voidSetICUCallBack>:
void MTIMER1_voidSetICUCallBack(void (*Copy_pf)(void))
{
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <MTIMER1_voidSetICUCallBack+0x6>
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	9a 83       	std	Y+2, r25	; 0x02
    3f1e:	89 83       	std	Y+1, r24	; 0x01

	ICU_PF=Copy_pf ;
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	9a 81       	ldd	r25, Y+2	; 0x02
    3f24:	90 93 21 01 	sts	0x0121, r25
    3f28:	80 93 20 01 	sts	0x0120, r24
}
    3f2c:	0f 90       	pop	r0
    3f2e:	0f 90       	pop	r0
    3f30:	cf 91       	pop	r28
    3f32:	df 91       	pop	r29
    3f34:	08 95       	ret

00003f36 <__vector_6>:

/*ICU*/
void __vector_6(void)  __attribute__((signal));
void __vector_6(void)
{
    3f36:	1f 92       	push	r1
    3f38:	0f 92       	push	r0
    3f3a:	0f b6       	in	r0, 0x3f	; 63
    3f3c:	0f 92       	push	r0
    3f3e:	11 24       	eor	r1, r1
    3f40:	2f 93       	push	r18
    3f42:	3f 93       	push	r19
    3f44:	4f 93       	push	r20
    3f46:	5f 93       	push	r21
    3f48:	6f 93       	push	r22
    3f4a:	7f 93       	push	r23
    3f4c:	8f 93       	push	r24
    3f4e:	9f 93       	push	r25
    3f50:	af 93       	push	r26
    3f52:	bf 93       	push	r27
    3f54:	ef 93       	push	r30
    3f56:	ff 93       	push	r31
    3f58:	df 93       	push	r29
    3f5a:	cf 93       	push	r28
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
	if(ICU_PF!=NULL)
    3f60:	80 91 20 01 	lds	r24, 0x0120
    3f64:	90 91 21 01 	lds	r25, 0x0121
    3f68:	00 97       	sbiw	r24, 0x00	; 0
    3f6a:	29 f0       	breq	.+10     	; 0x3f76 <__vector_6+0x40>
	{
		ICU_PF() ;
    3f6c:	e0 91 20 01 	lds	r30, 0x0120
    3f70:	f0 91 21 01 	lds	r31, 0x0121
    3f74:	09 95       	icall
	}

}
    3f76:	cf 91       	pop	r28
    3f78:	df 91       	pop	r29
    3f7a:	ff 91       	pop	r31
    3f7c:	ef 91       	pop	r30
    3f7e:	bf 91       	pop	r27
    3f80:	af 91       	pop	r26
    3f82:	9f 91       	pop	r25
    3f84:	8f 91       	pop	r24
    3f86:	7f 91       	pop	r23
    3f88:	6f 91       	pop	r22
    3f8a:	5f 91       	pop	r21
    3f8c:	4f 91       	pop	r20
    3f8e:	3f 91       	pop	r19
    3f90:	2f 91       	pop	r18
    3f92:	0f 90       	pop	r0
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	0f 90       	pop	r0
    3f98:	1f 90       	pop	r1
    3f9a:	18 95       	reti

00003f9c <__vector_7>:
/*COMPA*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    3f9c:	1f 92       	push	r1
    3f9e:	0f 92       	push	r0
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	0f 92       	push	r0
    3fa4:	11 24       	eor	r1, r1
    3fa6:	2f 93       	push	r18
    3fa8:	3f 93       	push	r19
    3faa:	4f 93       	push	r20
    3fac:	5f 93       	push	r21
    3fae:	6f 93       	push	r22
    3fb0:	7f 93       	push	r23
    3fb2:	8f 93       	push	r24
    3fb4:	9f 93       	push	r25
    3fb6:	af 93       	push	r26
    3fb8:	bf 93       	push	r27
    3fba:	ef 93       	push	r30
    3fbc:	ff 93       	push	r31
    3fbe:	df 93       	push	r29
    3fc0:	cf 93       	push	r28
    3fc2:	cd b7       	in	r28, 0x3d	; 61
    3fc4:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_PF_CMP!=NULL)
    3fc6:	80 91 1e 01 	lds	r24, 0x011E
    3fca:	90 91 1f 01 	lds	r25, 0x011F
    3fce:	00 97       	sbiw	r24, 0x00	; 0
    3fd0:	29 f0       	breq	.+10     	; 0x3fdc <__vector_7+0x40>
	{
		Timer1_PF_CMP();
    3fd2:	e0 91 1e 01 	lds	r30, 0x011E
    3fd6:	f0 91 1f 01 	lds	r31, 0x011F
    3fda:	09 95       	icall
	}
}
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	ff 91       	pop	r31
    3fe2:	ef 91       	pop	r30
    3fe4:	bf 91       	pop	r27
    3fe6:	af 91       	pop	r26
    3fe8:	9f 91       	pop	r25
    3fea:	8f 91       	pop	r24
    3fec:	7f 91       	pop	r23
    3fee:	6f 91       	pop	r22
    3ff0:	5f 91       	pop	r21
    3ff2:	4f 91       	pop	r20
    3ff4:	3f 91       	pop	r19
    3ff6:	2f 91       	pop	r18
    3ff8:	0f 90       	pop	r0
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	0f 90       	pop	r0
    3ffe:	1f 90       	pop	r1
    4000:	18 95       	reti

00004002 <MTIMER2_voidInit>:
/**************************************TIMER2 ******************************************/
void MTIMER2_voidInit()
{
    4002:	df 93       	push	r29
    4004:	cf 93       	push	r28
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_WGM20);
	CLR_BIT(TCCR2,TCCR2_WGM21);
	/*SEI*/
	SET_BIT(TIMSK,TIMSK_TOIE2);
#elif TIMER2_MODE==TIMER2_CTC_MODE
	CLR_BIT(TCCR2,TCCR2_WGM20);
    400a:	a5 e4       	ldi	r26, 0x45	; 69
    400c:	b0 e0       	ldi	r27, 0x00	; 0
    400e:	e5 e4       	ldi	r30, 0x45	; 69
    4010:	f0 e0       	ldi	r31, 0x00	; 0
    4012:	80 81       	ld	r24, Z
    4014:	8f 7b       	andi	r24, 0xBF	; 191
    4016:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
    4018:	a5 e4       	ldi	r26, 0x45	; 69
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	e5 e4       	ldi	r30, 0x45	; 69
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	88 60       	ori	r24, 0x08	; 8
    4024:	8c 93       	st	X, r24
	/*Normal Operation*/
	CLR_BIT(TCCR2,TCCR2_COM20);
    4026:	a5 e4       	ldi	r26, 0x45	; 69
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	e5 e4       	ldi	r30, 0x45	; 69
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	8f 7e       	andi	r24, 0xEF	; 239
    4032:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM21);
    4034:	a5 e4       	ldi	r26, 0x45	; 69
    4036:	b0 e0       	ldi	r27, 0x00	; 0
    4038:	e5 e4       	ldi	r30, 0x45	; 69
    403a:	f0 e0       	ldi	r31, 0x00	; 0
    403c:	80 81       	ld	r24, Z
    403e:	8f 7d       	andi	r24, 0xDF	; 223
    4040:	8c 93       	st	X, r24
	/*SEI*/
	SET_BIT(TIMSK,TIMSK_OCIE2);
    4042:	a9 e5       	ldi	r26, 0x59	; 89
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	e9 e5       	ldi	r30, 0x59	; 89
    4048:	f0 e0       	ldi	r31, 0x00	; 0
    404a:	80 81       	ld	r24, Z
    404c:	80 68       	ori	r24, 0x80	; 128
    404e:	8c 93       	st	X, r24
#if TIMER2_PRESCALER==TIMER2_NO_PRESCALER
	SET_BIT(TCCR2,TCCR2_CS20);
	CLR_BIT(TCCR2,TCCR2_CS21);
	CLR_BIT(TCCR2,TCCR2_CS22);
#elif TIMER2_PRESCALER==TIMER2_8_PRESCALER
	CLR_BIT(TCCR2,TCCR2_CS20);
    4050:	a5 e4       	ldi	r26, 0x45	; 69
    4052:	b0 e0       	ldi	r27, 0x00	; 0
    4054:	e5 e4       	ldi	r30, 0x45	; 69
    4056:	f0 e0       	ldi	r31, 0x00	; 0
    4058:	80 81       	ld	r24, Z
    405a:	8e 7f       	andi	r24, 0xFE	; 254
    405c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS21);
    405e:	a5 e4       	ldi	r26, 0x45	; 69
    4060:	b0 e0       	ldi	r27, 0x00	; 0
    4062:	e5 e4       	ldi	r30, 0x45	; 69
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	80 81       	ld	r24, Z
    4068:	82 60       	ori	r24, 0x02	; 2
    406a:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS22);
    406c:	a5 e4       	ldi	r26, 0x45	; 69
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	e5 e4       	ldi	r30, 0x45	; 69
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	8b 7f       	andi	r24, 0xFB	; 251
    4078:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
#else
#error " Wrong Timer2 Prescaler Configuration"
#endif
}
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <MTIMER2_voidDisable>:
void MTIMER2_voidDisable()
{
    4080:	df 93       	push	r29
    4082:	cf 93       	push	r28
    4084:	cd b7       	in	r28, 0x3d	; 61
    4086:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_CS20);
    4088:	a5 e4       	ldi	r26, 0x45	; 69
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	e5 e4       	ldi	r30, 0x45	; 69
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	8e 7f       	andi	r24, 0xFE	; 254
    4094:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    4096:	a5 e4       	ldi	r26, 0x45	; 69
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	e5 e4       	ldi	r30, 0x45	; 69
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	8d 7f       	andi	r24, 0xFD	; 253
    40a2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS22);
    40a4:	a5 e4       	ldi	r26, 0x45	; 69
    40a6:	b0 e0       	ldi	r27, 0x00	; 0
    40a8:	e5 e4       	ldi	r30, 0x45	; 69
    40aa:	f0 e0       	ldi	r31, 0x00	; 0
    40ac:	80 81       	ld	r24, Z
    40ae:	8b 7f       	andi	r24, 0xFB	; 251
    40b0:	8c 93       	st	X, r24
}
    40b2:	cf 91       	pop	r28
    40b4:	df 91       	pop	r29
    40b6:	08 95       	ret

000040b8 <MTIMER2_voidPreload>:
void MTIMER2_voidPreload(u8 Copy_u8Preload)
{
    40b8:	df 93       	push	r29
    40ba:	cf 93       	push	r28
    40bc:	0f 92       	push	r0
    40be:	cd b7       	in	r28, 0x3d	; 61
    40c0:	de b7       	in	r29, 0x3e	; 62
    40c2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Preload ;
    40c4:	e4 e4       	ldi	r30, 0x44	; 68
    40c6:	f0 e0       	ldi	r31, 0x00	; 0
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	80 83       	st	Z, r24
}
    40cc:	0f 90       	pop	r0
    40ce:	cf 91       	pop	r28
    40d0:	df 91       	pop	r29
    40d2:	08 95       	ret

000040d4 <MTIMER2_voidSetDutyCycle>:
void MTIMER2_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	0f 92       	push	r0
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8DutyCycle ;
    40e0:	e3 e4       	ldi	r30, 0x43	; 67
    40e2:	f0 e0       	ldi	r31, 0x00	; 0
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	80 83       	st	Z, r24
}
    40e8:	0f 90       	pop	r0
    40ea:	cf 91       	pop	r28
    40ec:	df 91       	pop	r29
    40ee:	08 95       	ret

000040f0 <MTIMER2_voidCompMatchValue>:
void MTIMER2_voidCompMatchValue(u8 Copy_u8ComMatchValue)
{
    40f0:	df 93       	push	r29
    40f2:	cf 93       	push	r28
    40f4:	0f 92       	push	r0
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8ComMatchValue ;
    40fc:	e3 e4       	ldi	r30, 0x43	; 67
    40fe:	f0 e0       	ldi	r31, 0x00	; 0
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	80 83       	st	Z, r24
}
    4104:	0f 90       	pop	r0
    4106:	cf 91       	pop	r28
    4108:	df 91       	pop	r29
    410a:	08 95       	ret

0000410c <MTIMER2_voidSetCallBack_OVF>:
void MTIMER2_voidSetCallBack_OVF(void (*Copy_pf)(void) )
{
    410c:	df 93       	push	r29
    410e:	cf 93       	push	r28
    4110:	00 d0       	rcall	.+0      	; 0x4112 <MTIMER2_voidSetCallBack_OVF+0x6>
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
    4116:	9a 83       	std	Y+2, r25	; 0x02
    4118:	89 83       	std	Y+1, r24	; 0x01
	Timer2_PF_OVF=Copy_pf ;
    411a:	89 81       	ldd	r24, Y+1	; 0x01
    411c:	9a 81       	ldd	r25, Y+2	; 0x02
    411e:	90 93 23 01 	sts	0x0123, r25
    4122:	80 93 22 01 	sts	0x0122, r24
}
    4126:	0f 90       	pop	r0
    4128:	0f 90       	pop	r0
    412a:	cf 91       	pop	r28
    412c:	df 91       	pop	r29
    412e:	08 95       	ret

00004130 <MTIMER2_voidSetCallBack_CMP>:
void MTIMER2_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    4130:	df 93       	push	r29
    4132:	cf 93       	push	r28
    4134:	00 d0       	rcall	.+0      	; 0x4136 <MTIMER2_voidSetCallBack_CMP+0x6>
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
    413a:	9a 83       	std	Y+2, r25	; 0x02
    413c:	89 83       	std	Y+1, r24	; 0x01
	Timer2_PF_CMP=Copy_pf ;
    413e:	89 81       	ldd	r24, Y+1	; 0x01
    4140:	9a 81       	ldd	r25, Y+2	; 0x02
    4142:	90 93 25 01 	sts	0x0125, r25
    4146:	80 93 24 01 	sts	0x0124, r24
}
    414a:	0f 90       	pop	r0
    414c:	0f 90       	pop	r0
    414e:	cf 91       	pop	r28
    4150:	df 91       	pop	r29
    4152:	08 95       	ret

00004154 <__vector_5>:
/*OVF*/
void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
    4154:	1f 92       	push	r1
    4156:	0f 92       	push	r0
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	0f 92       	push	r0
    415c:	11 24       	eor	r1, r1
    415e:	2f 93       	push	r18
    4160:	3f 93       	push	r19
    4162:	4f 93       	push	r20
    4164:	5f 93       	push	r21
    4166:	6f 93       	push	r22
    4168:	7f 93       	push	r23
    416a:	8f 93       	push	r24
    416c:	9f 93       	push	r25
    416e:	af 93       	push	r26
    4170:	bf 93       	push	r27
    4172:	ef 93       	push	r30
    4174:	ff 93       	push	r31
    4176:	df 93       	push	r29
    4178:	cf 93       	push	r28
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_PF_OVF!=NULL)
    417e:	80 91 22 01 	lds	r24, 0x0122
    4182:	90 91 23 01 	lds	r25, 0x0123
    4186:	00 97       	sbiw	r24, 0x00	; 0
    4188:	29 f0       	breq	.+10     	; 0x4194 <__vector_5+0x40>
	{
		Timer2_PF_OVF();
    418a:	e0 91 22 01 	lds	r30, 0x0122
    418e:	f0 91 23 01 	lds	r31, 0x0123
    4192:	09 95       	icall
	}
}
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	ff 91       	pop	r31
    419a:	ef 91       	pop	r30
    419c:	bf 91       	pop	r27
    419e:	af 91       	pop	r26
    41a0:	9f 91       	pop	r25
    41a2:	8f 91       	pop	r24
    41a4:	7f 91       	pop	r23
    41a6:	6f 91       	pop	r22
    41a8:	5f 91       	pop	r21
    41aa:	4f 91       	pop	r20
    41ac:	3f 91       	pop	r19
    41ae:	2f 91       	pop	r18
    41b0:	0f 90       	pop	r0
    41b2:	0f be       	out	0x3f, r0	; 63
    41b4:	0f 90       	pop	r0
    41b6:	1f 90       	pop	r1
    41b8:	18 95       	reti

000041ba <__vector_4>:
/*CMP*/
void __vector_4(void)  __attribute__((signal));
void __vector_4(void)
{
    41ba:	1f 92       	push	r1
    41bc:	0f 92       	push	r0
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	0f 92       	push	r0
    41c2:	11 24       	eor	r1, r1
    41c4:	2f 93       	push	r18
    41c6:	3f 93       	push	r19
    41c8:	4f 93       	push	r20
    41ca:	5f 93       	push	r21
    41cc:	6f 93       	push	r22
    41ce:	7f 93       	push	r23
    41d0:	8f 93       	push	r24
    41d2:	9f 93       	push	r25
    41d4:	af 93       	push	r26
    41d6:	bf 93       	push	r27
    41d8:	ef 93       	push	r30
    41da:	ff 93       	push	r31
    41dc:	df 93       	push	r29
    41de:	cf 93       	push	r28
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_PF_CMP!=NULL)
    41e4:	80 91 24 01 	lds	r24, 0x0124
    41e8:	90 91 25 01 	lds	r25, 0x0125
    41ec:	00 97       	sbiw	r24, 0x00	; 0
    41ee:	29 f0       	breq	.+10     	; 0x41fa <__vector_4+0x40>
	{

		Timer2_PF_CMP();
    41f0:	e0 91 24 01 	lds	r30, 0x0124
    41f4:	f0 91 25 01 	lds	r31, 0x0125
    41f8:	09 95       	icall
	}
}
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	ff 91       	pop	r31
    4200:	ef 91       	pop	r30
    4202:	bf 91       	pop	r27
    4204:	af 91       	pop	r26
    4206:	9f 91       	pop	r25
    4208:	8f 91       	pop	r24
    420a:	7f 91       	pop	r23
    420c:	6f 91       	pop	r22
    420e:	5f 91       	pop	r21
    4210:	4f 91       	pop	r20
    4212:	3f 91       	pop	r19
    4214:	2f 91       	pop	r18
    4216:	0f 90       	pop	r0
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	0f 90       	pop	r0
    421c:	1f 90       	pop	r1
    421e:	18 95       	reti

00004220 <MTWI_voidInit>:
#include "MTWI_config.h"



void MTWI_voidInit(void)
{
    4220:	df 93       	push	r29
    4222:	cf 93       	push	r28
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62
	/* Set Master | Slave Address */
	TWAR = MY_ADDRESS << 1;
    4228:	e2 e2       	ldi	r30, 0x22	; 34
    422a:	f0 e0       	ldi	r31, 0x00	; 0
    422c:	82 e0       	ldi	r24, 0x02	; 2
    422e:	80 83       	st	Z, r24
	/*Set PRESCALER Value */
#if TWI_PRESCALER == TWI_DIV_1
	TWSR = 0b00000000;
    4230:	e1 e2       	ldi	r30, 0x21	; 33
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	10 82       	st	Z, r1
#elif TWI_PRESCALER == TWI_DIV_64
	TWSR = 0b00000011;

#endif
	/*Set PRESCALER TWBR Value */
	TWBR = TWBR_VALUE;
    4236:	e0 e2       	ldi	r30, 0x20	; 32
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	80 83       	st	Z, r24


	/*Set TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    423e:	a6 e5       	ldi	r26, 0x56	; 86
    4240:	b0 e0       	ldi	r27, 0x00	; 0
    4242:	e6 e5       	ldi	r30, 0x56	; 86
    4244:	f0 e0       	ldi	r31, 0x00	; 0
    4246:	80 81       	ld	r24, Z
    4248:	84 60       	ori	r24, 0x04	; 4
    424a:	8c 93       	st	X, r24
}
    424c:	cf 91       	pop	r28
    424e:	df 91       	pop	r29
    4250:	08 95       	ret

00004252 <MTWI_voidStart>:

void MTWI_voidStart(void)
{
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
//	/* CLR TWI flag */
//	SET_BIT(TWCR , TWCR_TWINT);
//	/* SET TWEN to enable TWI */
//	SET_BIT(TWCR , TWCR_TWEN);

	TWCR=(1<<TWCR_TWINT) | (1<<TWCR_TWSTA) | (1<<TWCR_TWEN);
    425a:	e6 e5       	ldi	r30, 0x56	; 86
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	84 ea       	ldi	r24, 0xA4	; 164
    4260:	80 83       	st	Z, r24



	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    4262:	e6 e5       	ldi	r30, 0x56	; 86
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	80 81       	ld	r24, Z
    4268:	88 23       	and	r24, r24
    426a:	dc f7       	brge	.-10     	; 0x4262 <MTWI_voidStart+0x10>


}
    426c:	cf 91       	pop	r28
    426e:	df 91       	pop	r29
    4270:	08 95       	ret

00004272 <MTWI_voidWrite>:

void MTWI_voidWrite(u8 Copy_u8Data)
{
    4272:	df 93       	push	r29
    4274:	cf 93       	push	r28
    4276:	0f 92       	push	r0
    4278:	cd b7       	in	r28, 0x3d	; 61
    427a:	de b7       	in	r29, 0x3e	; 62
    427c:	89 83       	std	Y+1, r24	; 0x01
	/* Set Data | Address to TWDR */
	TWDR = Copy_u8Data;
    427e:	e3 e2       	ldi	r30, 0x23	; 35
    4280:	f0 e0       	ldi	r31, 0x00	; 0
    4282:	89 81       	ldd	r24, Y+1	; 0x01
    4284:	80 83       	st	Z, r24

	/* CLR start condition */
	CLR_BIT(TWCR , TWCR_TWSTA);
    4286:	a6 e5       	ldi	r26, 0x56	; 86
    4288:	b0 e0       	ldi	r27, 0x00	; 0
    428a:	e6 e5       	ldi	r30, 0x56	; 86
    428c:	f0 e0       	ldi	r31, 0x00	; 0
    428e:	80 81       	ld	r24, Z
    4290:	8f 7d       	andi	r24, 0xDF	; 223
    4292:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    4294:	a6 e5       	ldi	r26, 0x56	; 86
    4296:	b0 e0       	ldi	r27, 0x00	; 0
    4298:	e6 e5       	ldi	r30, 0x56	; 86
    429a:	f0 e0       	ldi	r31, 0x00	; 0
    429c:	80 81       	ld	r24, Z
    429e:	80 68       	ori	r24, 0x80	; 128
    42a0:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    42a2:	a6 e5       	ldi	r26, 0x56	; 86
    42a4:	b0 e0       	ldi	r27, 0x00	; 0
    42a6:	e6 e5       	ldi	r30, 0x56	; 86
    42a8:	f0 e0       	ldi	r31, 0x00	; 0
    42aa:	80 81       	ld	r24, Z
    42ac:	84 60       	ori	r24, 0x04	; 4
    42ae:	8c 93       	st	X, r24

	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    42b0:	e6 e5       	ldi	r30, 0x56	; 86
    42b2:	f0 e0       	ldi	r31, 0x00	; 0
    42b4:	80 81       	ld	r24, Z
    42b6:	88 23       	and	r24, r24
    42b8:	dc f7       	brge	.-10     	; 0x42b0 <MTWI_voidWrite+0x3e>

}
    42ba:	0f 90       	pop	r0
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	08 95       	ret

000042c2 <MTWI_u8ReadWithACK>:

u8 MTWI_u8ReadWithACK(void)
{
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
	/* CLR start condition */
	CLR_BIT(TWCR , TWCR_TWSTA);
    42ca:	a6 e5       	ldi	r26, 0x56	; 86
    42cc:	b0 e0       	ldi	r27, 0x00	; 0
    42ce:	e6 e5       	ldi	r30, 0x56	; 86
    42d0:	f0 e0       	ldi	r31, 0x00	; 0
    42d2:	80 81       	ld	r24, Z
    42d4:	8f 7d       	andi	r24, 0xDF	; 223
    42d6:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    42d8:	a6 e5       	ldi	r26, 0x56	; 86
    42da:	b0 e0       	ldi	r27, 0x00	; 0
    42dc:	e6 e5       	ldi	r30, 0x56	; 86
    42de:	f0 e0       	ldi	r31, 0x00	; 0
    42e0:	80 81       	ld	r24, Z
    42e2:	80 68       	ori	r24, 0x80	; 128
    42e4:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    42e6:	a6 e5       	ldi	r26, 0x56	; 86
    42e8:	b0 e0       	ldi	r27, 0x00	; 0
    42ea:	e6 e5       	ldi	r30, 0x56	; 86
    42ec:	f0 e0       	ldi	r31, 0x00	; 0
    42ee:	80 81       	ld	r24, Z
    42f0:	84 60       	ori	r24, 0x04	; 4
    42f2:	8c 93       	st	X, r24



	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    42f4:	e6 e5       	ldi	r30, 0x56	; 86
    42f6:	f0 e0       	ldi	r31, 0x00	; 0
    42f8:	80 81       	ld	r24, Z
    42fa:	88 23       	and	r24, r24
    42fc:	dc f7       	brge	.-10     	; 0x42f4 <MTWI_u8ReadWithACK+0x32>

	return TWDR;
    42fe:	e3 e2       	ldi	r30, 0x23	; 35
    4300:	f0 e0       	ldi	r31, 0x00	; 0
    4302:	80 81       	ld	r24, Z
}
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret

0000430a <MTWI_voidStop>:

void MTWI_voidStop(void)
{
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
//	/* CLR TWI flag */
//	SET_BIT(TWCR , TWCR_TWINT);
//	/* SET TWEN to enable TWI */
//	SET_BIT(TWCR , TWCR_TWEN);

	TWCR=(1<<TWCR_TWINT) | (1<<TWCR_TWEN) | (1<<TWCR_TWSTO);
    4312:	e6 e5       	ldi	r30, 0x56	; 86
    4314:	f0 e0       	ldi	r31, 0x00	; 0
    4316:	84 e9       	ldi	r24, 0x94	; 148
    4318:	80 83       	st	Z, r24

}
    431a:	cf 91       	pop	r28
    431c:	df 91       	pop	r29
    431e:	08 95       	ret

00004320 <MTWI_u8GetStatus>:

u8 MTWI_u8GetStatus(void)
{
    4320:	df 93       	push	r29
    4322:	cf 93       	push	r28
    4324:	cd b7       	in	r28, 0x3d	; 61
    4326:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8);
    4328:	e1 e2       	ldi	r30, 0x21	; 33
    432a:	f0 e0       	ldi	r31, 0x00	; 0
    432c:	80 81       	ld	r24, Z
    432e:	88 7f       	andi	r24, 0xF8	; 248
}
    4330:	cf 91       	pop	r28
    4332:	df 91       	pop	r29
    4334:	08 95       	ret

00004336 <MUART_voidInit>:
#include "MUSART_config.h"

void (*UART_PF)(void)=NULL ;

void MUART_voidInit()
{
    4336:	df 93       	push	r29
    4338:	cf 93       	push	r28
    433a:	0f 92       	push	r0
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
	u8 Temp=0 ;
    4340:	19 82       	std	Y+1, r1	; 0x01
	/*Enable Transmitter & Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    4342:	aa e2       	ldi	r26, 0x2A	; 42
    4344:	b0 e0       	ldi	r27, 0x00	; 0
    4346:	ea e2       	ldi	r30, 0x2A	; 42
    4348:	f0 e0       	ldi	r31, 0x00	; 0
    434a:	80 81       	ld	r24, Z
    434c:	80 61       	ori	r24, 0x10	; 16
    434e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    4350:	aa e2       	ldi	r26, 0x2A	; 42
    4352:	b0 e0       	ldi	r27, 0x00	; 0
    4354:	ea e2       	ldi	r30, 0x2A	; 42
    4356:	f0 e0       	ldi	r31, 0x00	; 0
    4358:	80 81       	ld	r24, Z
    435a:	88 60       	ori	r24, 0x08	; 8
    435c:	8c 93       	st	X, r24
	/*8-bit*/
	SET_BIT(Temp,UCSRC_UCSZ0);
    435e:	89 81       	ldd	r24, Y+1	; 0x01
    4360:	82 60       	ori	r24, 0x02	; 2
    4362:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp,UCSRC_UCSZ1);
    4364:	89 81       	ldd	r24, Y+1	; 0x01
    4366:	84 60       	ori	r24, 0x04	; 4
    4368:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    436a:	aa e2       	ldi	r26, 0x2A	; 42
    436c:	b0 e0       	ldi	r27, 0x00	; 0
    436e:	ea e2       	ldi	r30, 0x2A	; 42
    4370:	f0 e0       	ldi	r31, 0x00	; 0
    4372:	80 81       	ld	r24, Z
    4374:	8b 7f       	andi	r24, 0xFB	; 251
    4376:	8c 93       	st	X, r24
	/*Select UCSRC Register*/
	SET_BIT(Temp,UCSRC_URSEL);
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	80 68       	ori	r24, 0x80	; 128
    437c:	89 83       	std	Y+1, r24	; 0x01
	/*ASynch*/
	CLR_BIT(Temp,UCSRC_UMSEL);
    437e:	89 81       	ldd	r24, Y+1	; 0x01
    4380:	8f 7b       	andi	r24, 0xBF	; 191
    4382:	89 83       	std	Y+1, r24	; 0x01
	/*Stop bit is 1 i-bit */
	CLR_BIT(Temp,UCSRC_USBS);
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	87 7f       	andi	r24, 0xF7	; 247
    4388:	89 83       	std	Y+1, r24	; 0x01
	/*Select BaudRate*/
	UCSRC=Temp ;
    438a:	e0 e4       	ldi	r30, 0x40	; 64
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	89 81       	ldd	r24, Y+1	; 0x01
    4390:	80 83       	st	Z, r24
	UBRRL = 51;
    4392:	e9 e2       	ldi	r30, 0x29	; 41
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	83 e3       	ldi	r24, 0x33	; 51
    4398:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_RXCIE);//Enable Interrupt
    439a:	aa e2       	ldi	r26, 0x2A	; 42
    439c:	b0 e0       	ldi	r27, 0x00	; 0
    439e:	ea e2       	ldi	r30, 0x2A	; 42
    43a0:	f0 e0       	ldi	r31, 0x00	; 0
    43a2:	80 81       	ld	r24, Z
    43a4:	80 68       	ori	r24, 0x80	; 128
    43a6:	8c 93       	st	X, r24

}
    43a8:	0f 90       	pop	r0
    43aa:	cf 91       	pop	r28
    43ac:	df 91       	pop	r29
    43ae:	08 95       	ret

000043b0 <MUART_voidTransmit>:
void MUART_voidTransmit(u8 Copy_u8Data)
{
    43b0:	df 93       	push	r29
    43b2:	cf 93       	push	r28
    43b4:	0f 92       	push	r0
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
    43ba:	89 83       	std	Y+1, r24	; 0x01
	while( !GET_BIT(UCSRA,UCSRA_UDRE) );
    43bc:	eb e2       	ldi	r30, 0x2B	; 43
    43be:	f0 e0       	ldi	r31, 0x00	; 0
    43c0:	80 81       	ld	r24, Z
    43c2:	82 95       	swap	r24
    43c4:	86 95       	lsr	r24
    43c6:	87 70       	andi	r24, 0x07	; 7
    43c8:	88 23       	and	r24, r24
    43ca:	c1 f3       	breq	.-16     	; 0x43bc <MUART_voidTransmit+0xc>
	UDR=Copy_u8Data ;
    43cc:	ec e2       	ldi	r30, 0x2C	; 44
    43ce:	f0 e0       	ldi	r31, 0x00	; 0
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	80 83       	st	Z, r24
}
    43d4:	0f 90       	pop	r0
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	08 95       	ret

000043dc <MUART_voidRecieve>:
u8 MUART_voidRecieve()
{
    43dc:	df 93       	push	r29
    43de:	cf 93       	push	r28
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
	while( !GET_BIT(UCSRA,UCSRA_RXC) );
    43e4:	eb e2       	ldi	r30, 0x2B	; 43
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	80 81       	ld	r24, Z
    43ea:	88 23       	and	r24, r24
    43ec:	dc f7       	brge	.-10     	; 0x43e4 <MUART_voidRecieve+0x8>
	return UDR ;
    43ee:	ec e2       	ldi	r30, 0x2C	; 44
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	80 81       	ld	r24, Z
}
    43f4:	cf 91       	pop	r28
    43f6:	df 91       	pop	r29
    43f8:	08 95       	ret

000043fa <MUART_SetCallBack>:
void MUART_SetCallBack(void (*Copy_pf)(void))
{
    43fa:	df 93       	push	r29
    43fc:	cf 93       	push	r28
    43fe:	00 d0       	rcall	.+0      	; 0x4400 <MUART_SetCallBack+0x6>
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	9a 83       	std	Y+2, r25	; 0x02
    4406:	89 83       	std	Y+1, r24	; 0x01
	UART_PF=Copy_pf ;
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	90 93 27 01 	sts	0x0127, r25
    4410:	80 93 26 01 	sts	0x0126, r24
}
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	cf 91       	pop	r28
    441a:	df 91       	pop	r29
    441c:	08 95       	ret

0000441e <__vector_13>:
void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
    441e:	1f 92       	push	r1
    4420:	0f 92       	push	r0
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	0f 92       	push	r0
    4426:	11 24       	eor	r1, r1
    4428:	2f 93       	push	r18
    442a:	3f 93       	push	r19
    442c:	4f 93       	push	r20
    442e:	5f 93       	push	r21
    4430:	6f 93       	push	r22
    4432:	7f 93       	push	r23
    4434:	8f 93       	push	r24
    4436:	9f 93       	push	r25
    4438:	af 93       	push	r26
    443a:	bf 93       	push	r27
    443c:	ef 93       	push	r30
    443e:	ff 93       	push	r31
    4440:	df 93       	push	r29
    4442:	cf 93       	push	r28
    4444:	cd b7       	in	r28, 0x3d	; 61
    4446:	de b7       	in	r29, 0x3e	; 62
	if (UART_PF != NULL)
    4448:	80 91 26 01 	lds	r24, 0x0126
    444c:	90 91 27 01 	lds	r25, 0x0127
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	29 f0       	breq	.+10     	; 0x445e <__vector_13+0x40>
	{
		UART_PF() ;
    4454:	e0 91 26 01 	lds	r30, 0x0126
    4458:	f0 91 27 01 	lds	r31, 0x0127
    445c:	09 95       	icall
	}
}
    445e:	cf 91       	pop	r28
    4460:	df 91       	pop	r29
    4462:	ff 91       	pop	r31
    4464:	ef 91       	pop	r30
    4466:	bf 91       	pop	r27
    4468:	af 91       	pop	r26
    446a:	9f 91       	pop	r25
    446c:	8f 91       	pop	r24
    446e:	7f 91       	pop	r23
    4470:	6f 91       	pop	r22
    4472:	5f 91       	pop	r21
    4474:	4f 91       	pop	r20
    4476:	3f 91       	pop	r19
    4478:	2f 91       	pop	r18
    447a:	0f 90       	pop	r0
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	0f 90       	pop	r0
    4480:	1f 90       	pop	r1
    4482:	18 95       	reti

00004484 <main>:
void Check_Pass(u16 User_Pass);



int main()
{
    4484:	0f 93       	push	r16
    4486:	1f 93       	push	r17
    4488:	df 93       	push	r29
    448a:	cf 93       	push	r28
    448c:	cd b7       	in	r28, 0x3d	; 61
    448e:	de b7       	in	r29, 0x3e	; 62
    4490:	c7 58       	subi	r28, 0x87	; 135
    4492:	d0 40       	sbci	r29, 0x00	; 0
    4494:	0f b6       	in	r0, 0x3f	; 63
    4496:	f8 94       	cli
    4498:	de bf       	out	0x3e, r29	; 62
    449a:	0f be       	out	0x3f, r0	; 63
    449c:	cd bf       	out	0x3d, r28	; 61
	u8 f=0,Key,Pass_Counter=0;
    449e:	fe 01       	movw	r30, r28
    44a0:	e9 57       	subi	r30, 0x79	; 121
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	10 82       	st	Z, r1
    44a6:	fe 01       	movw	r30, r28
    44a8:	eb 57       	subi	r30, 0x7B	; 123
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	10 82       	st	Z, r1
	u16 i=10000;
    44ae:	fe 01       	movw	r30, r28
    44b0:	ed 57       	subi	r30, 0x7D	; 125
    44b2:	ff 4f       	sbci	r31, 0xFF	; 255
    44b4:	80 e1       	ldi	r24, 0x10	; 16
    44b6:	97 e2       	ldi	r25, 0x27	; 39
    44b8:	91 83       	std	Z+1, r25	; 0x01
    44ba:	80 83       	st	Z, r24
	u16 ID=0 ;
    44bc:	fe 01       	movw	r30, r28
    44be:	ef 57       	subi	r30, 0x7F	; 127
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	11 82       	std	Z+1, r1	; 0x01
    44c4:	10 82       	st	Z, r1
	u16 Pass=0 ;
    44c6:	fe 01       	movw	r30, r28
    44c8:	e1 58       	subi	r30, 0x81	; 129
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	11 82       	std	Z+1, r1	; 0x01
    44ce:	10 82       	st	Z, r1

	Port_voidInit();
    44d0:	0e 94 39 1a 	call	0x3472	; 0x3472 <Port_voidInit>
	HLCD_voidInit();
    44d4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <HLCD_voidInit>
	MTWI_voidInit();
    44d8:	0e 94 10 21 	call	0x4220	; 0x4220 <MTWI_voidInit>

	MUART_voidInit();
    44dc:	0e 94 9b 21 	call	0x4336	; 0x4336 <MUART_voidInit>
	MUART_SetCallBack(ISR_UART);
    44e0:	86 e9       	ldi	r24, 0x96	; 150
    44e2:	90 e3       	ldi	r25, 0x30	; 48
    44e4:	0e 94 fd 21 	call	0x43fa	; 0x43fa <MUART_SetCallBack>
	MGIE_voidEnable();
    44e8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <MGIE_voidEnable>

	ADC_Init();
    44ec:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_Init>
	ADC_voidSetCallBack(ADC_ISR);
    44f0:	8f e3       	ldi	r24, 0x3F	; 63
    44f2:	90 e3       	ldi	r25, 0x30	; 48
    44f4:	0e 94 99 06 	call	0xd32	; 0xd32 <ADC_voidSetCallBack>




	MTIMER1_voidSetCallBack_CMP(ISR_TIMER1);
    44f8:	87 ea       	ldi	r24, 0xA7	; 167
    44fa:	90 e3       	ldi	r25, 0x30	; 48
    44fc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <MTIMER1_voidSetCallBack_CMP>
	MTIMER1_voidSetTopValue(391,TOP_CTC_ICR1);
    4500:	87 e8       	ldi	r24, 0x87	; 135
    4502:	91 e0       	ldi	r25, 0x01	; 1
    4504:	61 e0       	ldi	r22, 0x01	; 1
    4506:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <MTIMER1_voidSetTopValue>


	while(1)
	{
		HLCD_voidSetCursorPosition(1,0);
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <HLCD_voidSetCursorPosition>
		HLCD_voidSendString("1.Open Smart Sys");
    4512:	80 e6       	ldi	r24, 0x60	; 96
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
		HLCD_voidSetCursorPosition(2,0);
    451a:	82 e0       	ldi	r24, 0x02	; 2
    451c:	60 e0       	ldi	r22, 0x00	; 0
    451e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <HLCD_voidSetCursorPosition>
		HLCD_voidSendString("# For More");
    4522:	81 e7       	ldi	r24, 0x71	; 113
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
		Key=HKPD_u8GetPressedKey();
    452a:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    452e:	fe 01       	movw	r30, r28
    4530:	ea 57       	subi	r30, 0x7A	; 122
    4532:	ff 4f       	sbci	r31, 0xFF	; 255
    4534:	80 83       	st	Z, r24

		if(Key != NOT_PRESSED )
    4536:	fe 01       	movw	r30, r28
    4538:	ea 57       	subi	r30, 0x7A	; 122
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	80 81       	ld	r24, Z
    453e:	8f 3f       	cpi	r24, 0xFF	; 255
    4540:	21 f3       	breq	.-56     	; 0x450a <main+0x86>
		{
			if (Key=='#')
    4542:	fe 01       	movw	r30, r28
    4544:	ea 57       	subi	r30, 0x7A	; 122
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	80 81       	ld	r24, Z
    454a:	83 32       	cpi	r24, 0x23	; 35
    454c:	f9 f4       	brne	.+62     	; 0x458c <main+0x108>
			{
				HLCD_voidClearDisplay();
    454e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("2.Edit Pass");
    455a:	8c e7       	ldi	r24, 0x7C	; 124
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
				HLCD_voidSetCursorPosition(2,0);
    4562:	82 e0       	ldi	r24, 0x02	; 2
    4564:	60 e0       	ldi	r22, 0x00	; 0
    4566:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("3.Add User");
    456a:	88 e8       	ldi	r24, 0x88	; 136
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
				do
				{
					Key=HKPD_u8GetPressedKey();
    4572:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    4576:	fe 01       	movw	r30, r28
    4578:	ea 57       	subi	r30, 0x7A	; 122
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	80 83       	st	Z, r24
				}while(Key == NOT_PRESSED);
    457e:	fe 01       	movw	r30, r28
    4580:	ea 57       	subi	r30, 0x7A	; 122
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	80 81       	ld	r24, Z
    4586:	8f 3f       	cpi	r24, 0xFF	; 255
    4588:	a1 f3       	breq	.-24     	; 0x4572 <main+0xee>
    458a:	bf cf       	rjmp	.-130    	; 0x450a <main+0x86>
			}
			else if(Key==1)
    458c:	fe 01       	movw	r30, r28
    458e:	ea 57       	subi	r30, 0x7A	; 122
    4590:	ff 4f       	sbci	r31, 0xFF	; 255
    4592:	80 81       	ld	r24, Z
    4594:	81 30       	cpi	r24, 0x01	; 1
    4596:	09 f0       	breq	.+2      	; 0x459a <main+0x116>
    4598:	0b c5       	rjmp	.+2582   	; 0x4fb0 <main+0xb2c>
			{
				HLCD_voidClearDisplay();
    459a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("Enter ID :");
    45a6:	83 e9       	ldi	r24, 0x93	; 147
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
				i=10000;
    45ae:	fe 01       	movw	r30, r28
    45b0:	ed 57       	subi	r30, 0x7D	; 125
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	80 e1       	ldi	r24, 0x10	; 16
    45b6:	97 e2       	ldi	r25, 0x27	; 39
    45b8:	91 83       	std	Z+1, r25	; 0x01
    45ba:	80 83       	st	Z, r24
				ID=0;
    45bc:	fe 01       	movw	r30, r28
    45be:	ef 57       	subi	r30, 0x7F	; 127
    45c0:	ff 4f       	sbci	r31, 0xFF	; 255
    45c2:	11 82       	std	Z+1, r1	; 0x01
    45c4:	10 82       	st	Z, r1
				for(f=0 ; f<4 ; f++)
    45c6:	fe 01       	movw	r30, r28
    45c8:	e9 57       	subi	r30, 0x79	; 121
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	10 82       	st	Z, r1
    45ce:	51 c0       	rjmp	.+162    	; 0x4672 <main+0x1ee>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    45d0:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    45d4:	fe 01       	movw	r30, r28
    45d6:	ea 57       	subi	r30, 0x7A	; 122
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    45dc:	fe 01       	movw	r30, r28
    45de:	ea 57       	subi	r30, 0x7A	; 122
    45e0:	ff 4f       	sbci	r31, 0xFF	; 255
    45e2:	80 81       	ld	r24, Z
    45e4:	8f 3f       	cpi	r24, 0xFF	; 255
    45e6:	a1 f3       	breq	.-24     	; 0x45d0 <main+0x14c>
					HLCD_voidSendInt(Key);
    45e8:	fe 01       	movw	r30, r28
    45ea:	ea 57       	subi	r30, 0x7A	; 122
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	80 81       	ld	r24, Z
    45f0:	88 2f       	mov	r24, r24
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	a0 e0       	ldi	r26, 0x00	; 0
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
					i/=10;
    4600:	8e 01       	movw	r16, r28
    4602:	0d 57       	subi	r16, 0x7D	; 125
    4604:	1f 4f       	sbci	r17, 0xFF	; 255
    4606:	fe 01       	movw	r30, r28
    4608:	ed 57       	subi	r30, 0x7D	; 125
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	2a e0       	ldi	r18, 0x0A	; 10
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	b9 01       	movw	r22, r18
    4616:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    461a:	cb 01       	movw	r24, r22
    461c:	f8 01       	movw	r30, r16
    461e:	91 83       	std	Z+1, r25	; 0x01
    4620:	80 83       	st	Z, r24
					ID += ( Key*i );
    4622:	fe 01       	movw	r30, r28
    4624:	ea 57       	subi	r30, 0x7A	; 122
    4626:	ff 4f       	sbci	r31, 0xFF	; 255
    4628:	80 81       	ld	r24, Z
    462a:	28 2f       	mov	r18, r24
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	fe 01       	movw	r30, r28
    4630:	ed 57       	subi	r30, 0x7D	; 125
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	80 81       	ld	r24, Z
    4636:	91 81       	ldd	r25, Z+1	; 0x01
    4638:	a9 01       	movw	r20, r18
    463a:	48 9f       	mul	r20, r24
    463c:	90 01       	movw	r18, r0
    463e:	49 9f       	mul	r20, r25
    4640:	30 0d       	add	r19, r0
    4642:	58 9f       	mul	r21, r24
    4644:	30 0d       	add	r19, r0
    4646:	11 24       	eor	r1, r1
    4648:	de 01       	movw	r26, r28
    464a:	af 57       	subi	r26, 0x7F	; 127
    464c:	bf 4f       	sbci	r27, 0xFF	; 255
    464e:	fe 01       	movw	r30, r28
    4650:	ef 57       	subi	r30, 0x7F	; 127
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	82 0f       	add	r24, r18
    465a:	93 1f       	adc	r25, r19
    465c:	8d 93       	st	X+, r24
    465e:	9c 93       	st	X, r25
				HLCD_voidClearDisplay();
				HLCD_voidSetCursorPosition(1,0);
				HLCD_voidSendString("Enter ID :");
				i=10000;
				ID=0;
				for(f=0 ; f<4 ; f++)
    4660:	de 01       	movw	r26, r28
    4662:	a9 57       	subi	r26, 0x79	; 121
    4664:	bf 4f       	sbci	r27, 0xFF	; 255
    4666:	fe 01       	movw	r30, r28
    4668:	e9 57       	subi	r30, 0x79	; 121
    466a:	ff 4f       	sbci	r31, 0xFF	; 255
    466c:	80 81       	ld	r24, Z
    466e:	8f 5f       	subi	r24, 0xFF	; 255
    4670:	8c 93       	st	X, r24
    4672:	fe 01       	movw	r30, r28
    4674:	e9 57       	subi	r30, 0x79	; 121
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	80 81       	ld	r24, Z
    467a:	84 30       	cpi	r24, 0x04	; 4
    467c:	08 f4       	brcc	.+2      	; 0x4680 <main+0x1fc>
    467e:	a8 cf       	rjmp	.-176    	; 0x45d0 <main+0x14c>
					HLCD_voidSendInt(Key);
					i/=10;
					ID += ( Key*i );

				}
				Check_ID(ID);
    4680:	fe 01       	movw	r30, r28
    4682:	ef 57       	subi	r30, 0x7F	; 127
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	80 81       	ld	r24, Z
    4688:	91 81       	ldd	r25, Z+1	; 0x01
    468a:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <Check_ID>
    468e:	fe 01       	movw	r30, r28
    4690:	e5 58       	subi	r30, 0x85	; 133
    4692:	ff 4f       	sbci	r31, 0xFF	; 255
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	a0 e7       	ldi	r26, 0x70	; 112
    469a:	b1 e4       	ldi	r27, 0x41	; 65
    469c:	80 83       	st	Z, r24
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	a2 83       	std	Z+2, r26	; 0x02
    46a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a4:	8e 01       	movw	r16, r28
    46a6:	09 58       	subi	r16, 0x89	; 137
    46a8:	1f 4f       	sbci	r17, 0xFF	; 255
    46aa:	fe 01       	movw	r30, r28
    46ac:	e5 58       	subi	r30, 0x85	; 133
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	60 81       	ld	r22, Z
    46b2:	71 81       	ldd	r23, Z+1	; 0x01
    46b4:	82 81       	ldd	r24, Z+2	; 0x02
    46b6:	93 81       	ldd	r25, Z+3	; 0x03
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	4a ef       	ldi	r20, 0xFA	; 250
    46be:	54 e4       	ldi	r21, 0x44	; 68
    46c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	f8 01       	movw	r30, r16
    46ca:	80 83       	st	Z, r24
    46cc:	91 83       	std	Z+1, r25	; 0x01
    46ce:	a2 83       	std	Z+2, r26	; 0x02
    46d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46d2:	fe 01       	movw	r30, r28
    46d4:	e9 58       	subi	r30, 0x89	; 137
    46d6:	ff 4f       	sbci	r31, 0xFF	; 255
    46d8:	60 81       	ld	r22, Z
    46da:	71 81       	ldd	r23, Z+1	; 0x01
    46dc:	82 81       	ldd	r24, Z+2	; 0x02
    46de:	93 81       	ldd	r25, Z+3	; 0x03
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	40 e8       	ldi	r20, 0x80	; 128
    46e6:	5f e3       	ldi	r21, 0x3F	; 63
    46e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46ec:	88 23       	and	r24, r24
    46ee:	44 f4       	brge	.+16     	; 0x4700 <main+0x27c>
		__ticks = 1;
    46f0:	fe 01       	movw	r30, r28
    46f2:	eb 58       	subi	r30, 0x8B	; 139
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	91 83       	std	Z+1, r25	; 0x01
    46fc:	80 83       	st	Z, r24
    46fe:	64 c0       	rjmp	.+200    	; 0x47c8 <main+0x344>
	else if (__tmp > 65535)
    4700:	fe 01       	movw	r30, r28
    4702:	e9 58       	subi	r30, 0x89	; 137
    4704:	ff 4f       	sbci	r31, 0xFF	; 255
    4706:	60 81       	ld	r22, Z
    4708:	71 81       	ldd	r23, Z+1	; 0x01
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	93 81       	ldd	r25, Z+3	; 0x03
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	3f ef       	ldi	r19, 0xFF	; 255
    4712:	4f e7       	ldi	r20, 0x7F	; 127
    4714:	57 e4       	ldi	r21, 0x47	; 71
    4716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    471a:	18 16       	cp	r1, r24
    471c:	0c f0       	brlt	.+2      	; 0x4720 <main+0x29c>
    471e:	43 c0       	rjmp	.+134    	; 0x47a6 <main+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4720:	fe 01       	movw	r30, r28
    4722:	e5 58       	subi	r30, 0x85	; 133
    4724:	ff 4f       	sbci	r31, 0xFF	; 255
    4726:	60 81       	ld	r22, Z
    4728:	71 81       	ldd	r23, Z+1	; 0x01
    472a:	82 81       	ldd	r24, Z+2	; 0x02
    472c:	93 81       	ldd	r25, Z+3	; 0x03
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	40 e2       	ldi	r20, 0x20	; 32
    4734:	51 e4       	ldi	r21, 0x41	; 65
    4736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    473a:	dc 01       	movw	r26, r24
    473c:	cb 01       	movw	r24, r22
    473e:	8e 01       	movw	r16, r28
    4740:	0b 58       	subi	r16, 0x8B	; 139
    4742:	1f 4f       	sbci	r17, 0xFF	; 255
    4744:	bc 01       	movw	r22, r24
    4746:	cd 01       	movw	r24, r26
    4748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    474c:	dc 01       	movw	r26, r24
    474e:	cb 01       	movw	r24, r22
    4750:	f8 01       	movw	r30, r16
    4752:	91 83       	std	Z+1, r25	; 0x01
    4754:	80 83       	st	Z, r24
    4756:	1f c0       	rjmp	.+62     	; 0x4796 <main+0x312>
    4758:	fe 01       	movw	r30, r28
    475a:	ed 58       	subi	r30, 0x8D	; 141
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	88 ec       	ldi	r24, 0xC8	; 200
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	91 83       	std	Z+1, r25	; 0x01
    4764:	80 83       	st	Z, r24
    4766:	fe 01       	movw	r30, r28
    4768:	ed 58       	subi	r30, 0x8D	; 141
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	80 81       	ld	r24, Z
    476e:	91 81       	ldd	r25, Z+1	; 0x01
    4770:	01 97       	sbiw	r24, 0x01	; 1
    4772:	f1 f7       	brne	.-4      	; 0x4770 <main+0x2ec>
    4774:	fe 01       	movw	r30, r28
    4776:	ed 58       	subi	r30, 0x8D	; 141
    4778:	ff 4f       	sbci	r31, 0xFF	; 255
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    477e:	de 01       	movw	r26, r28
    4780:	ab 58       	subi	r26, 0x8B	; 139
    4782:	bf 4f       	sbci	r27, 0xFF	; 255
    4784:	fe 01       	movw	r30, r28
    4786:	eb 58       	subi	r30, 0x8B	; 139
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	80 81       	ld	r24, Z
    478c:	91 81       	ldd	r25, Z+1	; 0x01
    478e:	01 97       	sbiw	r24, 0x01	; 1
    4790:	11 96       	adiw	r26, 0x01	; 1
    4792:	9c 93       	st	X, r25
    4794:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4796:	fe 01       	movw	r30, r28
    4798:	eb 58       	subi	r30, 0x8B	; 139
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	80 81       	ld	r24, Z
    479e:	91 81       	ldd	r25, Z+1	; 0x01
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	d1 f6       	brne	.-76     	; 0x4758 <main+0x2d4>
    47a4:	28 c0       	rjmp	.+80     	; 0x47f6 <main+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a6:	8e 01       	movw	r16, r28
    47a8:	0b 58       	subi	r16, 0x8B	; 139
    47aa:	1f 4f       	sbci	r17, 0xFF	; 255
    47ac:	fe 01       	movw	r30, r28
    47ae:	e9 58       	subi	r30, 0x89	; 137
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	60 81       	ld	r22, Z
    47b4:	71 81       	ldd	r23, Z+1	; 0x01
    47b6:	82 81       	ldd	r24, Z+2	; 0x02
    47b8:	93 81       	ldd	r25, Z+3	; 0x03
    47ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47be:	dc 01       	movw	r26, r24
    47c0:	cb 01       	movw	r24, r22
    47c2:	f8 01       	movw	r30, r16
    47c4:	91 83       	std	Z+1, r25	; 0x01
    47c6:	80 83       	st	Z, r24
    47c8:	de 01       	movw	r26, r28
    47ca:	af 58       	subi	r26, 0x8F	; 143
    47cc:	bf 4f       	sbci	r27, 0xFF	; 255
    47ce:	fe 01       	movw	r30, r28
    47d0:	eb 58       	subi	r30, 0x8B	; 139
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	80 81       	ld	r24, Z
    47d6:	91 81       	ldd	r25, Z+1	; 0x01
    47d8:	11 96       	adiw	r26, 0x01	; 1
    47da:	9c 93       	st	X, r25
    47dc:	8e 93       	st	-X, r24
    47de:	fe 01       	movw	r30, r28
    47e0:	ef 58       	subi	r30, 0x8F	; 143
    47e2:	ff 4f       	sbci	r31, 0xFF	; 255
    47e4:	80 81       	ld	r24, Z
    47e6:	91 81       	ldd	r25, Z+1	; 0x01
    47e8:	01 97       	sbiw	r24, 0x01	; 1
    47ea:	f1 f7       	brne	.-4      	; 0x47e8 <main+0x364>
    47ec:	fe 01       	movw	r30, r28
    47ee:	ef 58       	subi	r30, 0x8F	; 143
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	91 83       	std	Z+1, r25	; 0x01
    47f4:	80 83       	st	Z, r24
				_delay_ms(15);
				if(flag_User != 0)
    47f6:	80 91 29 01 	lds	r24, 0x0129
    47fa:	88 23       	and	r24, r24
    47fc:	09 f4       	brne	.+2      	; 0x4800 <main+0x37c>
    47fe:	4c c3       	rjmp	.+1688   	; 0x4e98 <main+0xa14>
				{
					HLCD_voidClearDisplay();
    4800:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
					HLCD_voidSendString("Pass :");
    4804:	8e e9       	ldi	r24, 0x9E	; 158
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
					i=10000;
    480c:	fe 01       	movw	r30, r28
    480e:	ed 57       	subi	r30, 0x7D	; 125
    4810:	ff 4f       	sbci	r31, 0xFF	; 255
    4812:	80 e1       	ldi	r24, 0x10	; 16
    4814:	97 e2       	ldi	r25, 0x27	; 39
    4816:	91 83       	std	Z+1, r25	; 0x01
    4818:	80 83       	st	Z, r24
					Pass=0 ;
    481a:	fe 01       	movw	r30, r28
    481c:	e1 58       	subi	r30, 0x81	; 129
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	11 82       	std	Z+1, r1	; 0x01
    4822:	10 82       	st	Z, r1
					for(f=0 ; f<4 ; f++)
    4824:	fe 01       	movw	r30, r28
    4826:	e9 57       	subi	r30, 0x79	; 121
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	10 82       	st	Z, r1
    482c:	51 c0       	rjmp	.+162    	; 0x48d0 <main+0x44c>
					{
						do
						{
							Key=HKPD_u8GetPressedKey();
    482e:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    4832:	fe 01       	movw	r30, r28
    4834:	ea 57       	subi	r30, 0x7A	; 122
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	80 83       	st	Z, r24
						}while(Key == NOT_PRESSED);
    483a:	fe 01       	movw	r30, r28
    483c:	ea 57       	subi	r30, 0x7A	; 122
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	80 81       	ld	r24, Z
    4842:	8f 3f       	cpi	r24, 0xFF	; 255
    4844:	a1 f3       	breq	.-24     	; 0x482e <main+0x3aa>
						HLCD_voidSendInt(Key);
    4846:	fe 01       	movw	r30, r28
    4848:	ea 57       	subi	r30, 0x7A	; 122
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	80 81       	ld	r24, Z
    484e:	88 2f       	mov	r24, r24
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	a0 e0       	ldi	r26, 0x00	; 0
    4854:	b0 e0       	ldi	r27, 0x00	; 0
    4856:	bc 01       	movw	r22, r24
    4858:	cd 01       	movw	r24, r26
    485a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
						i/=10;
    485e:	8e 01       	movw	r16, r28
    4860:	0d 57       	subi	r16, 0x7D	; 125
    4862:	1f 4f       	sbci	r17, 0xFF	; 255
    4864:	fe 01       	movw	r30, r28
    4866:	ed 57       	subi	r30, 0x7D	; 125
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	80 81       	ld	r24, Z
    486c:	91 81       	ldd	r25, Z+1	; 0x01
    486e:	2a e0       	ldi	r18, 0x0A	; 10
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	b9 01       	movw	r22, r18
    4874:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    4878:	cb 01       	movw	r24, r22
    487a:	f8 01       	movw	r30, r16
    487c:	91 83       	std	Z+1, r25	; 0x01
    487e:	80 83       	st	Z, r24
						Pass += ( Key*i );
    4880:	fe 01       	movw	r30, r28
    4882:	ea 57       	subi	r30, 0x7A	; 122
    4884:	ff 4f       	sbci	r31, 0xFF	; 255
    4886:	80 81       	ld	r24, Z
    4888:	28 2f       	mov	r18, r24
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	fe 01       	movw	r30, r28
    488e:	ed 57       	subi	r30, 0x7D	; 125
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	a9 01       	movw	r20, r18
    4898:	48 9f       	mul	r20, r24
    489a:	90 01       	movw	r18, r0
    489c:	49 9f       	mul	r20, r25
    489e:	30 0d       	add	r19, r0
    48a0:	58 9f       	mul	r21, r24
    48a2:	30 0d       	add	r19, r0
    48a4:	11 24       	eor	r1, r1
    48a6:	de 01       	movw	r26, r28
    48a8:	a1 58       	subi	r26, 0x81	; 129
    48aa:	bf 4f       	sbci	r27, 0xFF	; 255
    48ac:	fe 01       	movw	r30, r28
    48ae:	e1 58       	subi	r30, 0x81	; 129
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	80 81       	ld	r24, Z
    48b4:	91 81       	ldd	r25, Z+1	; 0x01
    48b6:	82 0f       	add	r24, r18
    48b8:	93 1f       	adc	r25, r19
    48ba:	8d 93       	st	X+, r24
    48bc:	9c 93       	st	X, r25
				{
					HLCD_voidClearDisplay();
					HLCD_voidSendString("Pass :");
					i=10000;
					Pass=0 ;
					for(f=0 ; f<4 ; f++)
    48be:	de 01       	movw	r26, r28
    48c0:	a9 57       	subi	r26, 0x79	; 121
    48c2:	bf 4f       	sbci	r27, 0xFF	; 255
    48c4:	fe 01       	movw	r30, r28
    48c6:	e9 57       	subi	r30, 0x79	; 121
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	8f 5f       	subi	r24, 0xFF	; 255
    48ce:	8c 93       	st	X, r24
    48d0:	fe 01       	movw	r30, r28
    48d2:	e9 57       	subi	r30, 0x79	; 121
    48d4:	ff 4f       	sbci	r31, 0xFF	; 255
    48d6:	80 81       	ld	r24, Z
    48d8:	84 30       	cpi	r24, 0x04	; 4
    48da:	08 f4       	brcc	.+2      	; 0x48de <main+0x45a>
    48dc:	a8 cf       	rjmp	.-176    	; 0x482e <main+0x3aa>
						}while(Key == NOT_PRESSED);
						HLCD_voidSendInt(Key);
						i/=10;
						Pass += ( Key*i );
					}
					Check_Pass(Pass);
    48de:	fe 01       	movw	r30, r28
    48e0:	e1 58       	subi	r30, 0x81	; 129
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	80 81       	ld	r24, Z
    48e6:	91 81       	ldd	r25, Z+1	; 0x01
    48e8:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <Check_Pass>
    48ec:	fe 01       	movw	r30, r28
    48ee:	e3 59       	subi	r30, 0x93	; 147
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	a0 e7       	ldi	r26, 0x70	; 112
    48f8:	b1 e4       	ldi	r27, 0x41	; 65
    48fa:	80 83       	st	Z, r24
    48fc:	91 83       	std	Z+1, r25	; 0x01
    48fe:	a2 83       	std	Z+2, r26	; 0x02
    4900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4902:	8e 01       	movw	r16, r28
    4904:	07 59       	subi	r16, 0x97	; 151
    4906:	1f 4f       	sbci	r17, 0xFF	; 255
    4908:	fe 01       	movw	r30, r28
    490a:	e3 59       	subi	r30, 0x93	; 147
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	60 81       	ld	r22, Z
    4910:	71 81       	ldd	r23, Z+1	; 0x01
    4912:	82 81       	ldd	r24, Z+2	; 0x02
    4914:	93 81       	ldd	r25, Z+3	; 0x03
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	4a ef       	ldi	r20, 0xFA	; 250
    491c:	54 e4       	ldi	r21, 0x44	; 68
    491e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	f8 01       	movw	r30, r16
    4928:	80 83       	st	Z, r24
    492a:	91 83       	std	Z+1, r25	; 0x01
    492c:	a2 83       	std	Z+2, r26	; 0x02
    492e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4930:	fe 01       	movw	r30, r28
    4932:	e7 59       	subi	r30, 0x97	; 151
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	60 81       	ld	r22, Z
    4938:	71 81       	ldd	r23, Z+1	; 0x01
    493a:	82 81       	ldd	r24, Z+2	; 0x02
    493c:	93 81       	ldd	r25, Z+3	; 0x03
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	40 e8       	ldi	r20, 0x80	; 128
    4944:	5f e3       	ldi	r21, 0x3F	; 63
    4946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    494a:	88 23       	and	r24, r24
    494c:	44 f4       	brge	.+16     	; 0x495e <main+0x4da>
		__ticks = 1;
    494e:	fe 01       	movw	r30, r28
    4950:	e9 59       	subi	r30, 0x99	; 153
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	91 83       	std	Z+1, r25	; 0x01
    495a:	80 83       	st	Z, r24
    495c:	64 c0       	rjmp	.+200    	; 0x4a26 <main+0x5a2>
	else if (__tmp > 65535)
    495e:	fe 01       	movw	r30, r28
    4960:	e7 59       	subi	r30, 0x97	; 151
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	60 81       	ld	r22, Z
    4966:	71 81       	ldd	r23, Z+1	; 0x01
    4968:	82 81       	ldd	r24, Z+2	; 0x02
    496a:	93 81       	ldd	r25, Z+3	; 0x03
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	3f ef       	ldi	r19, 0xFF	; 255
    4970:	4f e7       	ldi	r20, 0x7F	; 127
    4972:	57 e4       	ldi	r21, 0x47	; 71
    4974:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4978:	18 16       	cp	r1, r24
    497a:	0c f0       	brlt	.+2      	; 0x497e <main+0x4fa>
    497c:	43 c0       	rjmp	.+134    	; 0x4a04 <main+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    497e:	fe 01       	movw	r30, r28
    4980:	e3 59       	subi	r30, 0x93	; 147
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	60 81       	ld	r22, Z
    4986:	71 81       	ldd	r23, Z+1	; 0x01
    4988:	82 81       	ldd	r24, Z+2	; 0x02
    498a:	93 81       	ldd	r25, Z+3	; 0x03
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	40 e2       	ldi	r20, 0x20	; 32
    4992:	51 e4       	ldi	r21, 0x41	; 65
    4994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	8e 01       	movw	r16, r28
    499e:	09 59       	subi	r16, 0x99	; 153
    49a0:	1f 4f       	sbci	r17, 0xFF	; 255
    49a2:	bc 01       	movw	r22, r24
    49a4:	cd 01       	movw	r24, r26
    49a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	f8 01       	movw	r30, r16
    49b0:	91 83       	std	Z+1, r25	; 0x01
    49b2:	80 83       	st	Z, r24
    49b4:	1f c0       	rjmp	.+62     	; 0x49f4 <main+0x570>
    49b6:	fe 01       	movw	r30, r28
    49b8:	eb 59       	subi	r30, 0x9B	; 155
    49ba:	ff 4f       	sbci	r31, 0xFF	; 255
    49bc:	88 ec       	ldi	r24, 0xC8	; 200
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	91 83       	std	Z+1, r25	; 0x01
    49c2:	80 83       	st	Z, r24
    49c4:	fe 01       	movw	r30, r28
    49c6:	eb 59       	subi	r30, 0x9B	; 155
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	80 81       	ld	r24, Z
    49cc:	91 81       	ldd	r25, Z+1	; 0x01
    49ce:	01 97       	sbiw	r24, 0x01	; 1
    49d0:	f1 f7       	brne	.-4      	; 0x49ce <main+0x54a>
    49d2:	fe 01       	movw	r30, r28
    49d4:	eb 59       	subi	r30, 0x9B	; 155
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	91 83       	std	Z+1, r25	; 0x01
    49da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49dc:	de 01       	movw	r26, r28
    49de:	a9 59       	subi	r26, 0x99	; 153
    49e0:	bf 4f       	sbci	r27, 0xFF	; 255
    49e2:	fe 01       	movw	r30, r28
    49e4:	e9 59       	subi	r30, 0x99	; 153
    49e6:	ff 4f       	sbci	r31, 0xFF	; 255
    49e8:	80 81       	ld	r24, Z
    49ea:	91 81       	ldd	r25, Z+1	; 0x01
    49ec:	01 97       	sbiw	r24, 0x01	; 1
    49ee:	11 96       	adiw	r26, 0x01	; 1
    49f0:	9c 93       	st	X, r25
    49f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f4:	fe 01       	movw	r30, r28
    49f6:	e9 59       	subi	r30, 0x99	; 153
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	80 81       	ld	r24, Z
    49fc:	91 81       	ldd	r25, Z+1	; 0x01
    49fe:	00 97       	sbiw	r24, 0x00	; 0
    4a00:	d1 f6       	brne	.-76     	; 0x49b6 <main+0x532>
    4a02:	28 c0       	rjmp	.+80     	; 0x4a54 <main+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a04:	8e 01       	movw	r16, r28
    4a06:	09 59       	subi	r16, 0x99	; 153
    4a08:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e7 59       	subi	r30, 0x97	; 151
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	60 81       	ld	r22, Z
    4a12:	71 81       	ldd	r23, Z+1	; 0x01
    4a14:	82 81       	ldd	r24, Z+2	; 0x02
    4a16:	93 81       	ldd	r25, Z+3	; 0x03
    4a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	f8 01       	movw	r30, r16
    4a22:	91 83       	std	Z+1, r25	; 0x01
    4a24:	80 83       	st	Z, r24
    4a26:	de 01       	movw	r26, r28
    4a28:	ad 59       	subi	r26, 0x9D	; 157
    4a2a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e9 59       	subi	r30, 0x99	; 153
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 81       	ld	r24, Z
    4a34:	91 81       	ldd	r25, Z+1	; 0x01
    4a36:	11 96       	adiw	r26, 0x01	; 1
    4a38:	9c 93       	st	X, r25
    4a3a:	8e 93       	st	-X, r24
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ed 59       	subi	r30, 0x9D	; 157
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	80 81       	ld	r24, Z
    4a44:	91 81       	ldd	r25, Z+1	; 0x01
    4a46:	01 97       	sbiw	r24, 0x01	; 1
    4a48:	f1 f7       	brne	.-4      	; 0x4a46 <main+0x5c2>
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	ed 59       	subi	r30, 0x9D	; 157
    4a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a50:	91 83       	std	Z+1, r25	; 0x01
    4a52:	80 83       	st	Z, r24
					_delay_ms(15);
					if(flag_CorrectPass==1)
    4a54:	80 91 2a 01 	lds	r24, 0x012A
    4a58:	81 30       	cpi	r24, 0x01	; 1
    4a5a:	81 f4       	brne	.+32     	; 0x4a7c <main+0x5f8>
					{
						flag_CorrectPass=0 ;
    4a5c:	10 92 2a 01 	sts	0x012A, r1
						HLCD_voidClearDisplay();
    4a60:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
						HLCD_voidSendString("Welcome Home :) ");
    4a64:	85 ea       	ldi	r24, 0xA5	; 165
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
						MSPI_voidInit();
    4a6c:	0e 94 05 1b 	call	0x360a	; 0x360a <MSPI_voidInit>
						MTIMER1_voidInit(TIMER1_CTC_MODE,TOP_CTC_ICR1,TIMER1_1024_PRESCALER);
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	61 e0       	ldi	r22, 0x01	; 1
    4a74:	44 e0       	ldi	r20, 0x04	; 4
    4a76:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <MTIMER1_voidInit>
    4a7a:	ff cf       	rjmp	.-2      	; 0x4a7a <main+0x5f6>

						}
					}
					else
					{
						HLCD_voidClearDisplay();
    4a7c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
						for(Pass_Counter=0 ; Pass_Counter<3 ; Pass_Counter++)
    4a80:	fe 01       	movw	r30, r28
    4a82:	eb 57       	subi	r30, 0x7B	; 123
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	10 82       	st	Z, r1
    4a88:	ff c1       	rjmp	.+1022   	; 0x4e88 <main+0xa04>
						{
							i=10000;
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	ed 57       	subi	r30, 0x7D	; 125
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	80 e1       	ldi	r24, 0x10	; 16
    4a92:	97 e2       	ldi	r25, 0x27	; 39
    4a94:	91 83       	std	Z+1, r25	; 0x01
    4a96:	80 83       	st	Z, r24
							Pass=0;
    4a98:	fe 01       	movw	r30, r28
    4a9a:	e1 58       	subi	r30, 0x81	; 129
    4a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9e:	11 82       	std	Z+1, r1	; 0x01
    4aa0:	10 82       	st	Z, r1
							HLCD_voidSendString("Wrong Pass");
    4aa2:	86 eb       	ldi	r24, 0xB6	; 182
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
    4aaa:	fe 01       	movw	r30, r28
    4aac:	e1 5a       	subi	r30, 0xA1	; 161
    4aae:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	aa ef       	ldi	r26, 0xFA	; 250
    4ab6:	b3 e4       	ldi	r27, 0x43	; 67
    4ab8:	80 83       	st	Z, r24
    4aba:	91 83       	std	Z+1, r25	; 0x01
    4abc:	a2 83       	std	Z+2, r26	; 0x02
    4abe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac0:	8e 01       	movw	r16, r28
    4ac2:	05 5a       	subi	r16, 0xA5	; 165
    4ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac6:	fe 01       	movw	r30, r28
    4ac8:	e1 5a       	subi	r30, 0xA1	; 161
    4aca:	ff 4f       	sbci	r31, 0xFF	; 255
    4acc:	60 81       	ld	r22, Z
    4ace:	71 81       	ldd	r23, Z+1	; 0x01
    4ad0:	82 81       	ldd	r24, Z+2	; 0x02
    4ad2:	93 81       	ldd	r25, Z+3	; 0x03
    4ad4:	20 e0       	ldi	r18, 0x00	; 0
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	4a ef       	ldi	r20, 0xFA	; 250
    4ada:	54 e4       	ldi	r21, 0x44	; 68
    4adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	f8 01       	movw	r30, r16
    4ae6:	80 83       	st	Z, r24
    4ae8:	91 83       	std	Z+1, r25	; 0x01
    4aea:	a2 83       	std	Z+2, r26	; 0x02
    4aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4aee:	fe 01       	movw	r30, r28
    4af0:	e5 5a       	subi	r30, 0xA5	; 165
    4af2:	ff 4f       	sbci	r31, 0xFF	; 255
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	40 e8       	ldi	r20, 0x80	; 128
    4b02:	5f e3       	ldi	r21, 0x3F	; 63
    4b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b08:	88 23       	and	r24, r24
    4b0a:	44 f4       	brge	.+16     	; 0x4b1c <main+0x698>
		__ticks = 1;
    4b0c:	fe 01       	movw	r30, r28
    4b0e:	e7 5a       	subi	r30, 0xA7	; 167
    4b10:	ff 4f       	sbci	r31, 0xFF	; 255
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	91 83       	std	Z+1, r25	; 0x01
    4b18:	80 83       	st	Z, r24
    4b1a:	64 c0       	rjmp	.+200    	; 0x4be4 <main+0x760>
	else if (__tmp > 65535)
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	e5 5a       	subi	r30, 0xA5	; 165
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	60 81       	ld	r22, Z
    4b24:	71 81       	ldd	r23, Z+1	; 0x01
    4b26:	82 81       	ldd	r24, Z+2	; 0x02
    4b28:	93 81       	ldd	r25, Z+3	; 0x03
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	3f ef       	ldi	r19, 0xFF	; 255
    4b2e:	4f e7       	ldi	r20, 0x7F	; 127
    4b30:	57 e4       	ldi	r21, 0x47	; 71
    4b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b36:	18 16       	cp	r1, r24
    4b38:	0c f0       	brlt	.+2      	; 0x4b3c <main+0x6b8>
    4b3a:	43 c0       	rjmp	.+134    	; 0x4bc2 <main+0x73e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e1 5a       	subi	r30, 0xA1	; 161
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	60 81       	ld	r22, Z
    4b44:	71 81       	ldd	r23, Z+1	; 0x01
    4b46:	82 81       	ldd	r24, Z+2	; 0x02
    4b48:	93 81       	ldd	r25, Z+3	; 0x03
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	40 e2       	ldi	r20, 0x20	; 32
    4b50:	51 e4       	ldi	r21, 0x41	; 65
    4b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b56:	dc 01       	movw	r26, r24
    4b58:	cb 01       	movw	r24, r22
    4b5a:	8e 01       	movw	r16, r28
    4b5c:	07 5a       	subi	r16, 0xA7	; 167
    4b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b60:	bc 01       	movw	r22, r24
    4b62:	cd 01       	movw	r24, r26
    4b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	f8 01       	movw	r30, r16
    4b6e:	91 83       	std	Z+1, r25	; 0x01
    4b70:	80 83       	st	Z, r24
    4b72:	1f c0       	rjmp	.+62     	; 0x4bb2 <main+0x72e>
    4b74:	fe 01       	movw	r30, r28
    4b76:	e9 5a       	subi	r30, 0xA9	; 169
    4b78:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7a:	88 ec       	ldi	r24, 0xC8	; 200
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	91 83       	std	Z+1, r25	; 0x01
    4b80:	80 83       	st	Z, r24
    4b82:	fe 01       	movw	r30, r28
    4b84:	e9 5a       	subi	r30, 0xA9	; 169
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	80 81       	ld	r24, Z
    4b8a:	91 81       	ldd	r25, Z+1	; 0x01
    4b8c:	01 97       	sbiw	r24, 0x01	; 1
    4b8e:	f1 f7       	brne	.-4      	; 0x4b8c <main+0x708>
    4b90:	fe 01       	movw	r30, r28
    4b92:	e9 5a       	subi	r30, 0xA9	; 169
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b9a:	de 01       	movw	r26, r28
    4b9c:	a7 5a       	subi	r26, 0xA7	; 167
    4b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e7 5a       	subi	r30, 0xA7	; 167
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	80 81       	ld	r24, Z
    4ba8:	91 81       	ldd	r25, Z+1	; 0x01
    4baa:	01 97       	sbiw	r24, 0x01	; 1
    4bac:	11 96       	adiw	r26, 0x01	; 1
    4bae:	9c 93       	st	X, r25
    4bb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	e7 5a       	subi	r30, 0xA7	; 167
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	80 81       	ld	r24, Z
    4bba:	91 81       	ldd	r25, Z+1	; 0x01
    4bbc:	00 97       	sbiw	r24, 0x00	; 0
    4bbe:	d1 f6       	brne	.-76     	; 0x4b74 <main+0x6f0>
    4bc0:	27 c0       	rjmp	.+78     	; 0x4c10 <main+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bc2:	8e 01       	movw	r16, r28
    4bc4:	07 5a       	subi	r16, 0xA7	; 167
    4bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc8:	fe 01       	movw	r30, r28
    4bca:	e5 5a       	subi	r30, 0xA5	; 165
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	60 81       	ld	r22, Z
    4bd0:	71 81       	ldd	r23, Z+1	; 0x01
    4bd2:	82 81       	ldd	r24, Z+2	; 0x02
    4bd4:	93 81       	ldd	r25, Z+3	; 0x03
    4bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bda:	dc 01       	movw	r26, r24
    4bdc:	cb 01       	movw	r24, r22
    4bde:	f8 01       	movw	r30, r16
    4be0:	91 83       	std	Z+1, r25	; 0x01
    4be2:	80 83       	st	Z, r24
    4be4:	de 01       	movw	r26, r28
    4be6:	ab 5a       	subi	r26, 0xAB	; 171
    4be8:	bf 4f       	sbci	r27, 0xFF	; 255
    4bea:	fe 01       	movw	r30, r28
    4bec:	e7 5a       	subi	r30, 0xA7	; 167
    4bee:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf0:	80 81       	ld	r24, Z
    4bf2:	91 81       	ldd	r25, Z+1	; 0x01
    4bf4:	8d 93       	st	X+, r24
    4bf6:	9c 93       	st	X, r25
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	eb 5a       	subi	r30, 0xAB	; 171
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	80 81       	ld	r24, Z
    4c00:	91 81       	ldd	r25, Z+1	; 0x01
    4c02:	01 97       	sbiw	r24, 0x01	; 1
    4c04:	f1 f7       	brne	.-4      	; 0x4c02 <main+0x77e>
    4c06:	fe 01       	movw	r30, r28
    4c08:	eb 5a       	subi	r30, 0xAB	; 171
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	91 83       	std	Z+1, r25	; 0x01
    4c0e:	80 83       	st	Z, r24
							_delay_ms(500);
							HLCD_voidClearDisplay();
    4c10:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
							HLCD_voidSendString("Pass : ");
    4c14:	81 ec       	ldi	r24, 0xC1	; 193
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
							for(f=0 ; f<4 ; f++)
    4c1c:	fe 01       	movw	r30, r28
    4c1e:	e9 57       	subi	r30, 0x79	; 121
    4c20:	ff 4f       	sbci	r31, 0xFF	; 255
    4c22:	10 82       	st	Z, r1
    4c24:	51 c0       	rjmp	.+162    	; 0x4cc8 <main+0x844>
							{
								do
								{
									Key=HKPD_u8GetPressedKey();
    4c26:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	ea 57       	subi	r30, 0x7A	; 122
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	80 83       	st	Z, r24
								}while(Key == NOT_PRESSED);
    4c32:	fe 01       	movw	r30, r28
    4c34:	ea 57       	subi	r30, 0x7A	; 122
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	80 81       	ld	r24, Z
    4c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c3c:	a1 f3       	breq	.-24     	; 0x4c26 <main+0x7a2>
								HLCD_voidSendInt(Key);
    4c3e:	fe 01       	movw	r30, r28
    4c40:	ea 57       	subi	r30, 0x7A	; 122
    4c42:	ff 4f       	sbci	r31, 0xFF	; 255
    4c44:	80 81       	ld	r24, Z
    4c46:	88 2f       	mov	r24, r24
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	a0 e0       	ldi	r26, 0x00	; 0
    4c4c:	b0 e0       	ldi	r27, 0x00	; 0
    4c4e:	bc 01       	movw	r22, r24
    4c50:	cd 01       	movw	r24, r26
    4c52:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
								i/=10;
    4c56:	8e 01       	movw	r16, r28
    4c58:	0d 57       	subi	r16, 0x7D	; 125
    4c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	ed 57       	subi	r30, 0x7D	; 125
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	80 81       	ld	r24, Z
    4c64:	91 81       	ldd	r25, Z+1	; 0x01
    4c66:	2a e0       	ldi	r18, 0x0A	; 10
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	b9 01       	movw	r22, r18
    4c6c:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    4c70:	cb 01       	movw	r24, r22
    4c72:	f8 01       	movw	r30, r16
    4c74:	91 83       	std	Z+1, r25	; 0x01
    4c76:	80 83       	st	Z, r24
								Pass += ( Key*i );
    4c78:	fe 01       	movw	r30, r28
    4c7a:	ea 57       	subi	r30, 0x7A	; 122
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	80 81       	ld	r24, Z
    4c80:	28 2f       	mov	r18, r24
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	fe 01       	movw	r30, r28
    4c86:	ed 57       	subi	r30, 0x7D	; 125
    4c88:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8a:	80 81       	ld	r24, Z
    4c8c:	91 81       	ldd	r25, Z+1	; 0x01
    4c8e:	a9 01       	movw	r20, r18
    4c90:	48 9f       	mul	r20, r24
    4c92:	90 01       	movw	r18, r0
    4c94:	49 9f       	mul	r20, r25
    4c96:	30 0d       	add	r19, r0
    4c98:	58 9f       	mul	r21, r24
    4c9a:	30 0d       	add	r19, r0
    4c9c:	11 24       	eor	r1, r1
    4c9e:	de 01       	movw	r26, r28
    4ca0:	a1 58       	subi	r26, 0x81	; 129
    4ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ca4:	fe 01       	movw	r30, r28
    4ca6:	e1 58       	subi	r30, 0x81	; 129
    4ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    4caa:	80 81       	ld	r24, Z
    4cac:	91 81       	ldd	r25, Z+1	; 0x01
    4cae:	82 0f       	add	r24, r18
    4cb0:	93 1f       	adc	r25, r19
    4cb2:	8d 93       	st	X+, r24
    4cb4:	9c 93       	st	X, r25
							Pass=0;
							HLCD_voidSendString("Wrong Pass");
							_delay_ms(500);
							HLCD_voidClearDisplay();
							HLCD_voidSendString("Pass : ");
							for(f=0 ; f<4 ; f++)
    4cb6:	de 01       	movw	r26, r28
    4cb8:	a9 57       	subi	r26, 0x79	; 121
    4cba:	bf 4f       	sbci	r27, 0xFF	; 255
    4cbc:	fe 01       	movw	r30, r28
    4cbe:	e9 57       	subi	r30, 0x79	; 121
    4cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc2:	80 81       	ld	r24, Z
    4cc4:	8f 5f       	subi	r24, 0xFF	; 255
    4cc6:	8c 93       	st	X, r24
    4cc8:	fe 01       	movw	r30, r28
    4cca:	e9 57       	subi	r30, 0x79	; 121
    4ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cce:	80 81       	ld	r24, Z
    4cd0:	84 30       	cpi	r24, 0x04	; 4
    4cd2:	08 f4       	brcc	.+2      	; 0x4cd6 <main+0x852>
    4cd4:	a8 cf       	rjmp	.-176    	; 0x4c26 <main+0x7a2>
								}while(Key == NOT_PRESSED);
								HLCD_voidSendInt(Key);
								i/=10;
								Pass += ( Key*i );
							}
							Check_Pass(Pass);
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e1 58       	subi	r30, 0x81	; 129
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	80 81       	ld	r24, Z
    4cde:	91 81       	ldd	r25, Z+1	; 0x01
    4ce0:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <Check_Pass>
							if(flag_CorrectPass==1)
    4ce4:	80 91 2a 01 	lds	r24, 0x012A
    4ce8:	81 30       	cpi	r24, 0x01	; 1
    4cea:	81 f4       	brne	.+32     	; 0x4d0c <main+0x888>
							{
								flag_CorrectPass=0 ;
    4cec:	10 92 2a 01 	sts	0x012A, r1
								HLCD_voidClearDisplay();
    4cf0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
								HLCD_voidSendString("Welcome Home :) ");
    4cf4:	85 ea       	ldi	r24, 0xA5	; 165
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
								MSPI_voidInit();
    4cfc:	0e 94 05 1b 	call	0x360a	; 0x360a <MSPI_voidInit>
								MTIMER1_voidInit(TIMER1_CTC_MODE,TOP_CTC_ICR1,TIMER1_1024_PRESCALER);
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	61 e0       	ldi	r22, 0x01	; 1
    4d04:	44 e0       	ldi	r20, 0x04	; 4
    4d06:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <MTIMER1_voidInit>
    4d0a:	ff cf       	rjmp	.-2      	; 0x4d0a <main+0x886>
								while(1)
								{

								}
    4d0c:	fe 01       	movw	r30, r28
    4d0e:	ef 5a       	subi	r30, 0xAF	; 175
    4d10:	ff 4f       	sbci	r31, 0xFF	; 255
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	aa ef       	ldi	r26, 0xFA	; 250
    4d18:	b3 e4       	ldi	r27, 0x43	; 67
    4d1a:	80 83       	st	Z, r24
    4d1c:	91 83       	std	Z+1, r25	; 0x01
    4d1e:	a2 83       	std	Z+2, r26	; 0x02
    4d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d22:	8e 01       	movw	r16, r28
    4d24:	03 5b       	subi	r16, 0xB3	; 179
    4d26:	1f 4f       	sbci	r17, 0xFF	; 255
    4d28:	fe 01       	movw	r30, r28
    4d2a:	ef 5a       	subi	r30, 0xAF	; 175
    4d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2e:	60 81       	ld	r22, Z
    4d30:	71 81       	ldd	r23, Z+1	; 0x01
    4d32:	82 81       	ldd	r24, Z+2	; 0x02
    4d34:	93 81       	ldd	r25, Z+3	; 0x03
    4d36:	20 e0       	ldi	r18, 0x00	; 0
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	4a ef       	ldi	r20, 0xFA	; 250
    4d3c:	54 e4       	ldi	r21, 0x44	; 68
    4d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d42:	dc 01       	movw	r26, r24
    4d44:	cb 01       	movw	r24, r22
    4d46:	f8 01       	movw	r30, r16
    4d48:	80 83       	st	Z, r24
    4d4a:	91 83       	std	Z+1, r25	; 0x01
    4d4c:	a2 83       	std	Z+2, r26	; 0x02
    4d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d50:	fe 01       	movw	r30, r28
    4d52:	e3 5b       	subi	r30, 0xB3	; 179
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	60 81       	ld	r22, Z
    4d58:	71 81       	ldd	r23, Z+1	; 0x01
    4d5a:	82 81       	ldd	r24, Z+2	; 0x02
    4d5c:	93 81       	ldd	r25, Z+3	; 0x03
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	40 e8       	ldi	r20, 0x80	; 128
    4d64:	5f e3       	ldi	r21, 0x3F	; 63
    4d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d6a:	88 23       	and	r24, r24
    4d6c:	44 f4       	brge	.+16     	; 0x4d7e <main+0x8fa>
		__ticks = 1;
    4d6e:	fe 01       	movw	r30, r28
    4d70:	e5 5b       	subi	r30, 0xB5	; 181
    4d72:	ff 4f       	sbci	r31, 0xFF	; 255
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	91 83       	std	Z+1, r25	; 0x01
    4d7a:	80 83       	st	Z, r24
    4d7c:	64 c0       	rjmp	.+200    	; 0x4e46 <main+0x9c2>
	else if (__tmp > 65535)
    4d7e:	fe 01       	movw	r30, r28
    4d80:	e3 5b       	subi	r30, 0xB3	; 179
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	60 81       	ld	r22, Z
    4d86:	71 81       	ldd	r23, Z+1	; 0x01
    4d88:	82 81       	ldd	r24, Z+2	; 0x02
    4d8a:	93 81       	ldd	r25, Z+3	; 0x03
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	3f ef       	ldi	r19, 0xFF	; 255
    4d90:	4f e7       	ldi	r20, 0x7F	; 127
    4d92:	57 e4       	ldi	r21, 0x47	; 71
    4d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d98:	18 16       	cp	r1, r24
    4d9a:	0c f0       	brlt	.+2      	; 0x4d9e <main+0x91a>
    4d9c:	43 c0       	rjmp	.+134    	; 0x4e24 <main+0x9a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d9e:	fe 01       	movw	r30, r28
    4da0:	ef 5a       	subi	r30, 0xAF	; 175
    4da2:	ff 4f       	sbci	r31, 0xFF	; 255
    4da4:	60 81       	ld	r22, Z
    4da6:	71 81       	ldd	r23, Z+1	; 0x01
    4da8:	82 81       	ldd	r24, Z+2	; 0x02
    4daa:	93 81       	ldd	r25, Z+3	; 0x03
    4dac:	20 e0       	ldi	r18, 0x00	; 0
    4dae:	30 e0       	ldi	r19, 0x00	; 0
    4db0:	40 e2       	ldi	r20, 0x20	; 32
    4db2:	51 e4       	ldi	r21, 0x41	; 65
    4db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	8e 01       	movw	r16, r28
    4dbe:	05 5b       	subi	r16, 0xB5	; 181
    4dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4dc2:	bc 01       	movw	r22, r24
    4dc4:	cd 01       	movw	r24, r26
    4dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dca:	dc 01       	movw	r26, r24
    4dcc:	cb 01       	movw	r24, r22
    4dce:	f8 01       	movw	r30, r16
    4dd0:	91 83       	std	Z+1, r25	; 0x01
    4dd2:	80 83       	st	Z, r24
    4dd4:	1f c0       	rjmp	.+62     	; 0x4e14 <main+0x990>
    4dd6:	fe 01       	movw	r30, r28
    4dd8:	e7 5b       	subi	r30, 0xB7	; 183
    4dda:	ff 4f       	sbci	r31, 0xFF	; 255
    4ddc:	88 ec       	ldi	r24, 0xC8	; 200
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	91 83       	std	Z+1, r25	; 0x01
    4de2:	80 83       	st	Z, r24
    4de4:	fe 01       	movw	r30, r28
    4de6:	e7 5b       	subi	r30, 0xB7	; 183
    4de8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dea:	80 81       	ld	r24, Z
    4dec:	91 81       	ldd	r25, Z+1	; 0x01
    4dee:	01 97       	sbiw	r24, 0x01	; 1
    4df0:	f1 f7       	brne	.-4      	; 0x4dee <main+0x96a>
    4df2:	fe 01       	movw	r30, r28
    4df4:	e7 5b       	subi	r30, 0xB7	; 183
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	91 83       	std	Z+1, r25	; 0x01
    4dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dfc:	de 01       	movw	r26, r28
    4dfe:	a5 5b       	subi	r26, 0xB5	; 181
    4e00:	bf 4f       	sbci	r27, 0xFF	; 255
    4e02:	fe 01       	movw	r30, r28
    4e04:	e5 5b       	subi	r30, 0xB5	; 181
    4e06:	ff 4f       	sbci	r31, 0xFF	; 255
    4e08:	80 81       	ld	r24, Z
    4e0a:	91 81       	ldd	r25, Z+1	; 0x01
    4e0c:	01 97       	sbiw	r24, 0x01	; 1
    4e0e:	11 96       	adiw	r26, 0x01	; 1
    4e10:	9c 93       	st	X, r25
    4e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e14:	fe 01       	movw	r30, r28
    4e16:	e5 5b       	subi	r30, 0xB5	; 181
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	80 81       	ld	r24, Z
    4e1c:	91 81       	ldd	r25, Z+1	; 0x01
    4e1e:	00 97       	sbiw	r24, 0x00	; 0
    4e20:	d1 f6       	brne	.-76     	; 0x4dd6 <main+0x952>
    4e22:	27 c0       	rjmp	.+78     	; 0x4e72 <main+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e24:	8e 01       	movw	r16, r28
    4e26:	05 5b       	subi	r16, 0xB5	; 181
    4e28:	1f 4f       	sbci	r17, 0xFF	; 255
    4e2a:	fe 01       	movw	r30, r28
    4e2c:	e3 5b       	subi	r30, 0xB3	; 179
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	60 81       	ld	r22, Z
    4e32:	71 81       	ldd	r23, Z+1	; 0x01
    4e34:	82 81       	ldd	r24, Z+2	; 0x02
    4e36:	93 81       	ldd	r25, Z+3	; 0x03
    4e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	f8 01       	movw	r30, r16
    4e42:	91 83       	std	Z+1, r25	; 0x01
    4e44:	80 83       	st	Z, r24
    4e46:	de 01       	movw	r26, r28
    4e48:	a9 5b       	subi	r26, 0xB9	; 185
    4e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	e5 5b       	subi	r30, 0xB5	; 181
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	80 81       	ld	r24, Z
    4e54:	91 81       	ldd	r25, Z+1	; 0x01
    4e56:	8d 93       	st	X+, r24
    4e58:	9c 93       	st	X, r25
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	e9 5b       	subi	r30, 0xB9	; 185
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	80 81       	ld	r24, Z
    4e62:	91 81       	ldd	r25, Z+1	; 0x01
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	f1 f7       	brne	.-4      	; 0x4e64 <main+0x9e0>
    4e68:	fe 01       	movw	r30, r28
    4e6a:	e9 5b       	subi	r30, 0xB9	; 185
    4e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6e:	91 83       	std	Z+1, r25	; 0x01
    4e70:	80 83       	st	Z, r24
								break;

							}
							_delay_ms(500);
							HLCD_voidClearDisplay();
    4e72:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
						}
					}
					else
					{
						HLCD_voidClearDisplay();
						for(Pass_Counter=0 ; Pass_Counter<3 ; Pass_Counter++)
    4e76:	de 01       	movw	r26, r28
    4e78:	ab 57       	subi	r26, 0x7B	; 123
    4e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	eb 57       	subi	r30, 0x7B	; 123
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	80 81       	ld	r24, Z
    4e84:	8f 5f       	subi	r24, 0xFF	; 255
    4e86:	8c 93       	st	X, r24
    4e88:	fe 01       	movw	r30, r28
    4e8a:	eb 57       	subi	r30, 0x7B	; 123
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	80 81       	ld	r24, Z
    4e90:	83 30       	cpi	r24, 0x03	; 3
    4e92:	08 f4       	brcc	.+2      	; 0x4e96 <main+0xa12>
    4e94:	fa cd       	rjmp	.-1036   	; 0x4a8a <main+0x606>
    4e96:	39 cb       	rjmp	.-2446   	; 0x450a <main+0x86>
						}
					}
				}
				else
				{
					HLCD_voidClearDisplay();
    4e98:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
					HLCD_voidSendString("Wrong Id");
    4e9c:	89 ec       	ldi	r24, 0xC9	; 201
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
    4ea4:	fe 01       	movw	r30, r28
    4ea6:	ed 5b       	subi	r30, 0xBD	; 189
    4ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	aa ef       	ldi	r26, 0xFA	; 250
    4eb0:	b3 e4       	ldi	r27, 0x43	; 67
    4eb2:	80 83       	st	Z, r24
    4eb4:	91 83       	std	Z+1, r25	; 0x01
    4eb6:	a2 83       	std	Z+2, r26	; 0x02
    4eb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eba:	8e 01       	movw	r16, r28
    4ebc:	01 5c       	subi	r16, 0xC1	; 193
    4ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec0:	fe 01       	movw	r30, r28
    4ec2:	ed 5b       	subi	r30, 0xBD	; 189
    4ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec6:	60 81       	ld	r22, Z
    4ec8:	71 81       	ldd	r23, Z+1	; 0x01
    4eca:	82 81       	ldd	r24, Z+2	; 0x02
    4ecc:	93 81       	ldd	r25, Z+3	; 0x03
    4ece:	20 e0       	ldi	r18, 0x00	; 0
    4ed0:	30 e0       	ldi	r19, 0x00	; 0
    4ed2:	4a ef       	ldi	r20, 0xFA	; 250
    4ed4:	54 e4       	ldi	r21, 0x44	; 68
    4ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eda:	dc 01       	movw	r26, r24
    4edc:	cb 01       	movw	r24, r22
    4ede:	f8 01       	movw	r30, r16
    4ee0:	80 83       	st	Z, r24
    4ee2:	91 83       	std	Z+1, r25	; 0x01
    4ee4:	a2 83       	std	Z+2, r26	; 0x02
    4ee6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ee8:	fe 01       	movw	r30, r28
    4eea:	ff 96       	adiw	r30, 0x3f	; 63
    4eec:	60 81       	ld	r22, Z
    4eee:	71 81       	ldd	r23, Z+1	; 0x01
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e8       	ldi	r20, 0x80	; 128
    4efa:	5f e3       	ldi	r21, 0x3F	; 63
    4efc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f00:	88 23       	and	r24, r24
    4f02:	2c f4       	brge	.+10     	; 0x4f0e <main+0xa8a>
		__ticks = 1;
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	9e af       	std	Y+62, r25	; 0x3e
    4f0a:	8d af       	std	Y+61, r24	; 0x3d
    4f0c:	46 c0       	rjmp	.+140    	; 0x4f9a <main+0xb16>
	else if (__tmp > 65535)
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ff 96       	adiw	r30, 0x3f	; 63
    4f12:	60 81       	ld	r22, Z
    4f14:	71 81       	ldd	r23, Z+1	; 0x01
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	93 81       	ldd	r25, Z+3	; 0x03
    4f1a:	20 e0       	ldi	r18, 0x00	; 0
    4f1c:	3f ef       	ldi	r19, 0xFF	; 255
    4f1e:	4f e7       	ldi	r20, 0x7F	; 127
    4f20:	57 e4       	ldi	r21, 0x47	; 71
    4f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f26:	18 16       	cp	r1, r24
    4f28:	64 f5       	brge	.+88     	; 0x4f82 <main+0xafe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	ed 5b       	subi	r30, 0xBD	; 189
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	60 81       	ld	r22, Z
    4f32:	71 81       	ldd	r23, Z+1	; 0x01
    4f34:	82 81       	ldd	r24, Z+2	; 0x02
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	40 e2       	ldi	r20, 0x20	; 32
    4f3e:	51 e4       	ldi	r21, 0x41	; 65
    4f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f44:	dc 01       	movw	r26, r24
    4f46:	cb 01       	movw	r24, r22
    4f48:	bc 01       	movw	r22, r24
    4f4a:	cd 01       	movw	r24, r26
    4f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f50:	dc 01       	movw	r26, r24
    4f52:	cb 01       	movw	r24, r22
    4f54:	9e af       	std	Y+62, r25	; 0x3e
    4f56:	8d af       	std	Y+61, r24	; 0x3d
    4f58:	0f c0       	rjmp	.+30     	; 0x4f78 <main+0xaf4>
    4f5a:	88 ec       	ldi	r24, 0xC8	; 200
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	9c af       	std	Y+60, r25	; 0x3c
    4f60:	8b af       	std	Y+59, r24	; 0x3b
    4f62:	8b ad       	ldd	r24, Y+59	; 0x3b
    4f64:	9c ad       	ldd	r25, Y+60	; 0x3c
    4f66:	01 97       	sbiw	r24, 0x01	; 1
    4f68:	f1 f7       	brne	.-4      	; 0x4f66 <main+0xae2>
    4f6a:	9c af       	std	Y+60, r25	; 0x3c
    4f6c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f70:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f72:	01 97       	sbiw	r24, 0x01	; 1
    4f74:	9e af       	std	Y+62, r25	; 0x3e
    4f76:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f78:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f7c:	00 97       	sbiw	r24, 0x00	; 0
    4f7e:	69 f7       	brne	.-38     	; 0x4f5a <main+0xad6>
    4f80:	c4 ca       	rjmp	.-2680   	; 0x450a <main+0x86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f82:	fe 01       	movw	r30, r28
    4f84:	ff 96       	adiw	r30, 0x3f	; 63
    4f86:	60 81       	ld	r22, Z
    4f88:	71 81       	ldd	r23, Z+1	; 0x01
    4f8a:	82 81       	ldd	r24, Z+2	; 0x02
    4f8c:	93 81       	ldd	r25, Z+3	; 0x03
    4f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	9e af       	std	Y+62, r25	; 0x3e
    4f98:	8d af       	std	Y+61, r24	; 0x3d
    4f9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f9e:	9a af       	std	Y+58, r25	; 0x3a
    4fa0:	89 af       	std	Y+57, r24	; 0x39
    4fa2:	89 ad       	ldd	r24, Y+57	; 0x39
    4fa4:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fa6:	01 97       	sbiw	r24, 0x01	; 1
    4fa8:	f1 f7       	brne	.-4      	; 0x4fa6 <main+0xb22>
    4faa:	9a af       	std	Y+58, r25	; 0x3a
    4fac:	89 af       	std	Y+57, r24	; 0x39
    4fae:	ad ca       	rjmp	.-2726   	; 0x450a <main+0x86>
					_delay_ms(500);
				}
			}
			else if(Key==2)
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	ea 57       	subi	r30, 0x7A	; 122
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	80 81       	ld	r24, Z
    4fb8:	82 30       	cpi	r24, 0x02	; 2
    4fba:	09 f0       	breq	.+2      	; 0x4fbe <main+0xb3a>
    4fbc:	dd c3       	rjmp	.+1978   	; 0x5778 <main+0x12f4>
			{
				HLCD_voidClearDisplay();
    4fbe:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("Enter ID :");
    4fca:	83 e9       	ldi	r24, 0x93	; 147
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
				i=10000;
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	ed 57       	subi	r30, 0x7D	; 125
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	80 e1       	ldi	r24, 0x10	; 16
    4fda:	97 e2       	ldi	r25, 0x27	; 39
    4fdc:	91 83       	std	Z+1, r25	; 0x01
    4fde:	80 83       	st	Z, r24
				ID=0;
    4fe0:	fe 01       	movw	r30, r28
    4fe2:	ef 57       	subi	r30, 0x7F	; 127
    4fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe6:	11 82       	std	Z+1, r1	; 0x01
    4fe8:	10 82       	st	Z, r1
				for(f=0 ; f<4 ; f++)
    4fea:	fe 01       	movw	r30, r28
    4fec:	e9 57       	subi	r30, 0x79	; 121
    4fee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff0:	10 82       	st	Z, r1
    4ff2:	51 c0       	rjmp	.+162    	; 0x5096 <main+0xc12>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    4ff4:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    4ff8:	fe 01       	movw	r30, r28
    4ffa:	ea 57       	subi	r30, 0x7A	; 122
    4ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffe:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    5000:	fe 01       	movw	r30, r28
    5002:	ea 57       	subi	r30, 0x7A	; 122
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	80 81       	ld	r24, Z
    5008:	8f 3f       	cpi	r24, 0xFF	; 255
    500a:	a1 f3       	breq	.-24     	; 0x4ff4 <main+0xb70>
					HLCD_voidSendInt(Key);
    500c:	fe 01       	movw	r30, r28
    500e:	ea 57       	subi	r30, 0x7A	; 122
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	80 81       	ld	r24, Z
    5014:	88 2f       	mov	r24, r24
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	a0 e0       	ldi	r26, 0x00	; 0
    501a:	b0 e0       	ldi	r27, 0x00	; 0
    501c:	bc 01       	movw	r22, r24
    501e:	cd 01       	movw	r24, r26
    5020:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
					i/=10;
    5024:	8e 01       	movw	r16, r28
    5026:	0d 57       	subi	r16, 0x7D	; 125
    5028:	1f 4f       	sbci	r17, 0xFF	; 255
    502a:	fe 01       	movw	r30, r28
    502c:	ed 57       	subi	r30, 0x7D	; 125
    502e:	ff 4f       	sbci	r31, 0xFF	; 255
    5030:	80 81       	ld	r24, Z
    5032:	91 81       	ldd	r25, Z+1	; 0x01
    5034:	2a e0       	ldi	r18, 0x0A	; 10
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	b9 01       	movw	r22, r18
    503a:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    503e:	cb 01       	movw	r24, r22
    5040:	f8 01       	movw	r30, r16
    5042:	91 83       	std	Z+1, r25	; 0x01
    5044:	80 83       	st	Z, r24
					ID += ( Key*i );
    5046:	fe 01       	movw	r30, r28
    5048:	ea 57       	subi	r30, 0x7A	; 122
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	80 81       	ld	r24, Z
    504e:	28 2f       	mov	r18, r24
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	fe 01       	movw	r30, r28
    5054:	ed 57       	subi	r30, 0x7D	; 125
    5056:	ff 4f       	sbci	r31, 0xFF	; 255
    5058:	80 81       	ld	r24, Z
    505a:	91 81       	ldd	r25, Z+1	; 0x01
    505c:	a9 01       	movw	r20, r18
    505e:	48 9f       	mul	r20, r24
    5060:	90 01       	movw	r18, r0
    5062:	49 9f       	mul	r20, r25
    5064:	30 0d       	add	r19, r0
    5066:	58 9f       	mul	r21, r24
    5068:	30 0d       	add	r19, r0
    506a:	11 24       	eor	r1, r1
    506c:	de 01       	movw	r26, r28
    506e:	af 57       	subi	r26, 0x7F	; 127
    5070:	bf 4f       	sbci	r27, 0xFF	; 255
    5072:	fe 01       	movw	r30, r28
    5074:	ef 57       	subi	r30, 0x7F	; 127
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	80 81       	ld	r24, Z
    507a:	91 81       	ldd	r25, Z+1	; 0x01
    507c:	82 0f       	add	r24, r18
    507e:	93 1f       	adc	r25, r19
    5080:	8d 93       	st	X+, r24
    5082:	9c 93       	st	X, r25
				HLCD_voidClearDisplay();
				HLCD_voidSetCursorPosition(1,0);
				HLCD_voidSendString("Enter ID :");
				i=10000;
				ID=0;
				for(f=0 ; f<4 ; f++)
    5084:	de 01       	movw	r26, r28
    5086:	a9 57       	subi	r26, 0x79	; 121
    5088:	bf 4f       	sbci	r27, 0xFF	; 255
    508a:	fe 01       	movw	r30, r28
    508c:	e9 57       	subi	r30, 0x79	; 121
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	80 81       	ld	r24, Z
    5092:	8f 5f       	subi	r24, 0xFF	; 255
    5094:	8c 93       	st	X, r24
    5096:	fe 01       	movw	r30, r28
    5098:	e9 57       	subi	r30, 0x79	; 121
    509a:	ff 4f       	sbci	r31, 0xFF	; 255
    509c:	80 81       	ld	r24, Z
    509e:	84 30       	cpi	r24, 0x04	; 4
    50a0:	08 f4       	brcc	.+2      	; 0x50a4 <main+0xc20>
    50a2:	a8 cf       	rjmp	.-176    	; 0x4ff4 <main+0xb70>
					HLCD_voidSendInt(Key);
					i/=10;
					ID += ( Key*i );

				}
				Check_ID(ID);
    50a4:	fe 01       	movw	r30, r28
    50a6:	ef 57       	subi	r30, 0x7F	; 127
    50a8:	ff 4f       	sbci	r31, 0xFF	; 255
    50aa:	80 81       	ld	r24, Z
    50ac:	91 81       	ldd	r25, Z+1	; 0x01
    50ae:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <Check_ID>
				if(flag_User != 0)
    50b2:	80 91 29 01 	lds	r24, 0x0129
    50b6:	88 23       	and	r24, r24
    50b8:	09 f4       	brne	.+2      	; 0x50bc <main+0xc38>
    50ba:	27 ca       	rjmp	.-2994   	; 0x450a <main+0x86>
				{
					HLCD_voidClearDisplay();
    50bc:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
					HLCD_voidSendString("Old Pass : ");
    50c0:	82 ed       	ldi	r24, 0xD2	; 210
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
					i=10000;
    50c8:	fe 01       	movw	r30, r28
    50ca:	ed 57       	subi	r30, 0x7D	; 125
    50cc:	ff 4f       	sbci	r31, 0xFF	; 255
    50ce:	80 e1       	ldi	r24, 0x10	; 16
    50d0:	97 e2       	ldi	r25, 0x27	; 39
    50d2:	91 83       	std	Z+1, r25	; 0x01
    50d4:	80 83       	st	Z, r24
					Pass=0;
    50d6:	fe 01       	movw	r30, r28
    50d8:	e1 58       	subi	r30, 0x81	; 129
    50da:	ff 4f       	sbci	r31, 0xFF	; 255
    50dc:	11 82       	std	Z+1, r1	; 0x01
    50de:	10 82       	st	Z, r1
					for(f=0 ; f<4 ; f++)
    50e0:	fe 01       	movw	r30, r28
    50e2:	e9 57       	subi	r30, 0x79	; 121
    50e4:	ff 4f       	sbci	r31, 0xFF	; 255
    50e6:	10 82       	st	Z, r1
    50e8:	51 c0       	rjmp	.+162    	; 0x518c <main+0xd08>
					{
						do
						{
							Key=HKPD_u8GetPressedKey();
    50ea:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    50ee:	fe 01       	movw	r30, r28
    50f0:	ea 57       	subi	r30, 0x7A	; 122
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	80 83       	st	Z, r24
						}while(Key == NOT_PRESSED);
    50f6:	fe 01       	movw	r30, r28
    50f8:	ea 57       	subi	r30, 0x7A	; 122
    50fa:	ff 4f       	sbci	r31, 0xFF	; 255
    50fc:	80 81       	ld	r24, Z
    50fe:	8f 3f       	cpi	r24, 0xFF	; 255
    5100:	a1 f3       	breq	.-24     	; 0x50ea <main+0xc66>
						HLCD_voidSendInt(Key);
    5102:	fe 01       	movw	r30, r28
    5104:	ea 57       	subi	r30, 0x7A	; 122
    5106:	ff 4f       	sbci	r31, 0xFF	; 255
    5108:	80 81       	ld	r24, Z
    510a:	88 2f       	mov	r24, r24
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	a0 e0       	ldi	r26, 0x00	; 0
    5110:	b0 e0       	ldi	r27, 0x00	; 0
    5112:	bc 01       	movw	r22, r24
    5114:	cd 01       	movw	r24, r26
    5116:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
						i/=10;
    511a:	8e 01       	movw	r16, r28
    511c:	0d 57       	subi	r16, 0x7D	; 125
    511e:	1f 4f       	sbci	r17, 0xFF	; 255
    5120:	fe 01       	movw	r30, r28
    5122:	ed 57       	subi	r30, 0x7D	; 125
    5124:	ff 4f       	sbci	r31, 0xFF	; 255
    5126:	80 81       	ld	r24, Z
    5128:	91 81       	ldd	r25, Z+1	; 0x01
    512a:	2a e0       	ldi	r18, 0x0A	; 10
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	b9 01       	movw	r22, r18
    5130:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    5134:	cb 01       	movw	r24, r22
    5136:	f8 01       	movw	r30, r16
    5138:	91 83       	std	Z+1, r25	; 0x01
    513a:	80 83       	st	Z, r24
						Pass += ( Key*i );
    513c:	fe 01       	movw	r30, r28
    513e:	ea 57       	subi	r30, 0x7A	; 122
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	80 81       	ld	r24, Z
    5144:	28 2f       	mov	r18, r24
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	fe 01       	movw	r30, r28
    514a:	ed 57       	subi	r30, 0x7D	; 125
    514c:	ff 4f       	sbci	r31, 0xFF	; 255
    514e:	80 81       	ld	r24, Z
    5150:	91 81       	ldd	r25, Z+1	; 0x01
    5152:	a9 01       	movw	r20, r18
    5154:	48 9f       	mul	r20, r24
    5156:	90 01       	movw	r18, r0
    5158:	49 9f       	mul	r20, r25
    515a:	30 0d       	add	r19, r0
    515c:	58 9f       	mul	r21, r24
    515e:	30 0d       	add	r19, r0
    5160:	11 24       	eor	r1, r1
    5162:	de 01       	movw	r26, r28
    5164:	a1 58       	subi	r26, 0x81	; 129
    5166:	bf 4f       	sbci	r27, 0xFF	; 255
    5168:	fe 01       	movw	r30, r28
    516a:	e1 58       	subi	r30, 0x81	; 129
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	80 81       	ld	r24, Z
    5170:	91 81       	ldd	r25, Z+1	; 0x01
    5172:	82 0f       	add	r24, r18
    5174:	93 1f       	adc	r25, r19
    5176:	8d 93       	st	X+, r24
    5178:	9c 93       	st	X, r25
				{
					HLCD_voidClearDisplay();
					HLCD_voidSendString("Old Pass : ");
					i=10000;
					Pass=0;
					for(f=0 ; f<4 ; f++)
    517a:	de 01       	movw	r26, r28
    517c:	a9 57       	subi	r26, 0x79	; 121
    517e:	bf 4f       	sbci	r27, 0xFF	; 255
    5180:	fe 01       	movw	r30, r28
    5182:	e9 57       	subi	r30, 0x79	; 121
    5184:	ff 4f       	sbci	r31, 0xFF	; 255
    5186:	80 81       	ld	r24, Z
    5188:	8f 5f       	subi	r24, 0xFF	; 255
    518a:	8c 93       	st	X, r24
    518c:	fe 01       	movw	r30, r28
    518e:	e9 57       	subi	r30, 0x79	; 121
    5190:	ff 4f       	sbci	r31, 0xFF	; 255
    5192:	80 81       	ld	r24, Z
    5194:	84 30       	cpi	r24, 0x04	; 4
    5196:	08 f4       	brcc	.+2      	; 0x519a <main+0xd16>
    5198:	a8 cf       	rjmp	.-176    	; 0x50ea <main+0xc66>
						}while(Key == NOT_PRESSED);
						HLCD_voidSendInt(Key);
						i/=10;
						Pass += ( Key*i );
					}
					Check_Pass(Pass);
    519a:	fe 01       	movw	r30, r28
    519c:	e1 58       	subi	r30, 0x81	; 129
    519e:	ff 4f       	sbci	r31, 0xFF	; 255
    51a0:	80 81       	ld	r24, Z
    51a2:	91 81       	ldd	r25, Z+1	; 0x01
    51a4:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <Check_Pass>
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	a0 e7       	ldi	r26, 0x70	; 112
    51ae:	b1 e4       	ldi	r27, 0x41	; 65
    51b0:	8d ab       	std	Y+53, r24	; 0x35
    51b2:	9e ab       	std	Y+54, r25	; 0x36
    51b4:	af ab       	std	Y+55, r26	; 0x37
    51b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b8:	6d a9       	ldd	r22, Y+53	; 0x35
    51ba:	7e a9       	ldd	r23, Y+54	; 0x36
    51bc:	8f a9       	ldd	r24, Y+55	; 0x37
    51be:	98 ad       	ldd	r25, Y+56	; 0x38
    51c0:	20 e0       	ldi	r18, 0x00	; 0
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	4a ef       	ldi	r20, 0xFA	; 250
    51c6:	54 e4       	ldi	r21, 0x44	; 68
    51c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	89 ab       	std	Y+49, r24	; 0x31
    51d2:	9a ab       	std	Y+50, r25	; 0x32
    51d4:	ab ab       	std	Y+51, r26	; 0x33
    51d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    51d8:	69 a9       	ldd	r22, Y+49	; 0x31
    51da:	7a a9       	ldd	r23, Y+50	; 0x32
    51dc:	8b a9       	ldd	r24, Y+51	; 0x33
    51de:	9c a9       	ldd	r25, Y+52	; 0x34
    51e0:	20 e0       	ldi	r18, 0x00	; 0
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	40 e8       	ldi	r20, 0x80	; 128
    51e6:	5f e3       	ldi	r21, 0x3F	; 63
    51e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51ec:	88 23       	and	r24, r24
    51ee:	2c f4       	brge	.+10     	; 0x51fa <main+0xd76>
		__ticks = 1;
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	98 ab       	std	Y+48, r25	; 0x30
    51f6:	8f a7       	std	Y+47, r24	; 0x2f
    51f8:	3f c0       	rjmp	.+126    	; 0x5278 <main+0xdf4>
	else if (__tmp > 65535)
    51fa:	69 a9       	ldd	r22, Y+49	; 0x31
    51fc:	7a a9       	ldd	r23, Y+50	; 0x32
    51fe:	8b a9       	ldd	r24, Y+51	; 0x33
    5200:	9c a9       	ldd	r25, Y+52	; 0x34
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	3f ef       	ldi	r19, 0xFF	; 255
    5206:	4f e7       	ldi	r20, 0x7F	; 127
    5208:	57 e4       	ldi	r21, 0x47	; 71
    520a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    520e:	18 16       	cp	r1, r24
    5210:	4c f5       	brge	.+82     	; 0x5264 <main+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5212:	6d a9       	ldd	r22, Y+53	; 0x35
    5214:	7e a9       	ldd	r23, Y+54	; 0x36
    5216:	8f a9       	ldd	r24, Y+55	; 0x37
    5218:	98 ad       	ldd	r25, Y+56	; 0x38
    521a:	20 e0       	ldi	r18, 0x00	; 0
    521c:	30 e0       	ldi	r19, 0x00	; 0
    521e:	40 e2       	ldi	r20, 0x20	; 32
    5220:	51 e4       	ldi	r21, 0x41	; 65
    5222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5226:	dc 01       	movw	r26, r24
    5228:	cb 01       	movw	r24, r22
    522a:	bc 01       	movw	r22, r24
    522c:	cd 01       	movw	r24, r26
    522e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	98 ab       	std	Y+48, r25	; 0x30
    5238:	8f a7       	std	Y+47, r24	; 0x2f
    523a:	0f c0       	rjmp	.+30     	; 0x525a <main+0xdd6>
    523c:	88 ec       	ldi	r24, 0xC8	; 200
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	9e a7       	std	Y+46, r25	; 0x2e
    5242:	8d a7       	std	Y+45, r24	; 0x2d
    5244:	8d a5       	ldd	r24, Y+45	; 0x2d
    5246:	9e a5       	ldd	r25, Y+46	; 0x2e
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	f1 f7       	brne	.-4      	; 0x5248 <main+0xdc4>
    524c:	9e a7       	std	Y+46, r25	; 0x2e
    524e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5250:	8f a5       	ldd	r24, Y+47	; 0x2f
    5252:	98 a9       	ldd	r25, Y+48	; 0x30
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	98 ab       	std	Y+48, r25	; 0x30
    5258:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    525a:	8f a5       	ldd	r24, Y+47	; 0x2f
    525c:	98 a9       	ldd	r25, Y+48	; 0x30
    525e:	00 97       	sbiw	r24, 0x00	; 0
    5260:	69 f7       	brne	.-38     	; 0x523c <main+0xdb8>
    5262:	14 c0       	rjmp	.+40     	; 0x528c <main+0xe08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5264:	69 a9       	ldd	r22, Y+49	; 0x31
    5266:	7a a9       	ldd	r23, Y+50	; 0x32
    5268:	8b a9       	ldd	r24, Y+51	; 0x33
    526a:	9c a9       	ldd	r25, Y+52	; 0x34
    526c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5270:	dc 01       	movw	r26, r24
    5272:	cb 01       	movw	r24, r22
    5274:	98 ab       	std	Y+48, r25	; 0x30
    5276:	8f a7       	std	Y+47, r24	; 0x2f
    5278:	8f a5       	ldd	r24, Y+47	; 0x2f
    527a:	98 a9       	ldd	r25, Y+48	; 0x30
    527c:	9c a7       	std	Y+44, r25	; 0x2c
    527e:	8b a7       	std	Y+43, r24	; 0x2b
    5280:	8b a5       	ldd	r24, Y+43	; 0x2b
    5282:	9c a5       	ldd	r25, Y+44	; 0x2c
    5284:	01 97       	sbiw	r24, 0x01	; 1
    5286:	f1 f7       	brne	.-4      	; 0x5284 <main+0xe00>
    5288:	9c a7       	std	Y+44, r25	; 0x2c
    528a:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(15);
					if(flag_CorrectPass == 1)
    528c:	80 91 2a 01 	lds	r24, 0x012A
    5290:	81 30       	cpi	r24, 0x01	; 1
    5292:	09 f0       	breq	.+2      	; 0x5296 <main+0xe12>
    5294:	79 c0       	rjmp	.+242    	; 0x5388 <main+0xf04>
					{
						flag_CorrectPass=0 ;
    5296:	10 92 2a 01 	sts	0x012A, r1
						HLCD_voidClearDisplay();
    529a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
						HLCD_voidSendString("New Pass : ");
    529e:	8e ed       	ldi	r24, 0xDE	; 222
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
						i=10000;
    52a6:	fe 01       	movw	r30, r28
    52a8:	ed 57       	subi	r30, 0x7D	; 125
    52aa:	ff 4f       	sbci	r31, 0xFF	; 255
    52ac:	80 e1       	ldi	r24, 0x10	; 16
    52ae:	97 e2       	ldi	r25, 0x27	; 39
    52b0:	91 83       	std	Z+1, r25	; 0x01
    52b2:	80 83       	st	Z, r24
						Pass=0 ;
    52b4:	fe 01       	movw	r30, r28
    52b6:	e1 58       	subi	r30, 0x81	; 129
    52b8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ba:	11 82       	std	Z+1, r1	; 0x01
    52bc:	10 82       	st	Z, r1
						for(f=0 ; f<4 ; f++)
    52be:	fe 01       	movw	r30, r28
    52c0:	e9 57       	subi	r30, 0x79	; 121
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	10 82       	st	Z, r1
    52c6:	51 c0       	rjmp	.+162    	; 0x536a <main+0xee6>
						{
							do
							{
								Key=HKPD_u8GetPressedKey();
    52c8:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    52cc:	fe 01       	movw	r30, r28
    52ce:	ea 57       	subi	r30, 0x7A	; 122
    52d0:	ff 4f       	sbci	r31, 0xFF	; 255
    52d2:	80 83       	st	Z, r24
							}while(Key == NOT_PRESSED);
    52d4:	fe 01       	movw	r30, r28
    52d6:	ea 57       	subi	r30, 0x7A	; 122
    52d8:	ff 4f       	sbci	r31, 0xFF	; 255
    52da:	80 81       	ld	r24, Z
    52dc:	8f 3f       	cpi	r24, 0xFF	; 255
    52de:	a1 f3       	breq	.-24     	; 0x52c8 <main+0xe44>
							HLCD_voidSendInt(Key);
    52e0:	fe 01       	movw	r30, r28
    52e2:	ea 57       	subi	r30, 0x7A	; 122
    52e4:	ff 4f       	sbci	r31, 0xFF	; 255
    52e6:	80 81       	ld	r24, Z
    52e8:	88 2f       	mov	r24, r24
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	a0 e0       	ldi	r26, 0x00	; 0
    52ee:	b0 e0       	ldi	r27, 0x00	; 0
    52f0:	bc 01       	movw	r22, r24
    52f2:	cd 01       	movw	r24, r26
    52f4:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
							i/=10;
    52f8:	8e 01       	movw	r16, r28
    52fa:	0d 57       	subi	r16, 0x7D	; 125
    52fc:	1f 4f       	sbci	r17, 0xFF	; 255
    52fe:	fe 01       	movw	r30, r28
    5300:	ed 57       	subi	r30, 0x7D	; 125
    5302:	ff 4f       	sbci	r31, 0xFF	; 255
    5304:	80 81       	ld	r24, Z
    5306:	91 81       	ldd	r25, Z+1	; 0x01
    5308:	2a e0       	ldi	r18, 0x0A	; 10
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	b9 01       	movw	r22, r18
    530e:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    5312:	cb 01       	movw	r24, r22
    5314:	f8 01       	movw	r30, r16
    5316:	91 83       	std	Z+1, r25	; 0x01
    5318:	80 83       	st	Z, r24
							Pass += ( Key*i );
    531a:	fe 01       	movw	r30, r28
    531c:	ea 57       	subi	r30, 0x7A	; 122
    531e:	ff 4f       	sbci	r31, 0xFF	; 255
    5320:	80 81       	ld	r24, Z
    5322:	28 2f       	mov	r18, r24
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	fe 01       	movw	r30, r28
    5328:	ed 57       	subi	r30, 0x7D	; 125
    532a:	ff 4f       	sbci	r31, 0xFF	; 255
    532c:	80 81       	ld	r24, Z
    532e:	91 81       	ldd	r25, Z+1	; 0x01
    5330:	a9 01       	movw	r20, r18
    5332:	48 9f       	mul	r20, r24
    5334:	90 01       	movw	r18, r0
    5336:	49 9f       	mul	r20, r25
    5338:	30 0d       	add	r19, r0
    533a:	58 9f       	mul	r21, r24
    533c:	30 0d       	add	r19, r0
    533e:	11 24       	eor	r1, r1
    5340:	de 01       	movw	r26, r28
    5342:	a1 58       	subi	r26, 0x81	; 129
    5344:	bf 4f       	sbci	r27, 0xFF	; 255
    5346:	fe 01       	movw	r30, r28
    5348:	e1 58       	subi	r30, 0x81	; 129
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	80 81       	ld	r24, Z
    534e:	91 81       	ldd	r25, Z+1	; 0x01
    5350:	82 0f       	add	r24, r18
    5352:	93 1f       	adc	r25, r19
    5354:	8d 93       	st	X+, r24
    5356:	9c 93       	st	X, r25
						flag_CorrectPass=0 ;
						HLCD_voidClearDisplay();
						HLCD_voidSendString("New Pass : ");
						i=10000;
						Pass=0 ;
						for(f=0 ; f<4 ; f++)
    5358:	de 01       	movw	r26, r28
    535a:	a9 57       	subi	r26, 0x79	; 121
    535c:	bf 4f       	sbci	r27, 0xFF	; 255
    535e:	fe 01       	movw	r30, r28
    5360:	e9 57       	subi	r30, 0x79	; 121
    5362:	ff 4f       	sbci	r31, 0xFF	; 255
    5364:	80 81       	ld	r24, Z
    5366:	8f 5f       	subi	r24, 0xFF	; 255
    5368:	8c 93       	st	X, r24
    536a:	fe 01       	movw	r30, r28
    536c:	e9 57       	subi	r30, 0x79	; 121
    536e:	ff 4f       	sbci	r31, 0xFF	; 255
    5370:	80 81       	ld	r24, Z
    5372:	84 30       	cpi	r24, 0x04	; 4
    5374:	08 f4       	brcc	.+2      	; 0x5378 <main+0xef4>
    5376:	a8 cf       	rjmp	.-176    	; 0x52c8 <main+0xe44>
							}while(Key == NOT_PRESSED);
							HLCD_voidSendInt(Key);
							i/=10;
							Pass += ( Key*i );
						}
						Add_Pass_EEPROM(Pass);
    5378:	fe 01       	movw	r30, r28
    537a:	e1 58       	subi	r30, 0x81	; 129
    537c:	ff 4f       	sbci	r31, 0xFF	; 255
    537e:	80 81       	ld	r24, Z
    5380:	91 81       	ldd	r25, Z+1	; 0x01
    5382:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <Add_Pass_EEPROM>
    5386:	c1 c8       	rjmp	.-3710   	; 0x450a <main+0x86>
					}
					else
					{
						HLCD_voidClearDisplay();
    5388:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
						for(Pass_Counter=0 ; Pass_Counter<2 ; Pass_Counter++)
    538c:	fe 01       	movw	r30, r28
    538e:	eb 57       	subi	r30, 0x7B	; 123
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	10 82       	st	Z, r1
    5394:	e8 c1       	rjmp	.+976    	; 0x5766 <main+0x12e2>
						{
							i=10000;
    5396:	fe 01       	movw	r30, r28
    5398:	ed 57       	subi	r30, 0x7D	; 125
    539a:	ff 4f       	sbci	r31, 0xFF	; 255
    539c:	80 e1       	ldi	r24, 0x10	; 16
    539e:	97 e2       	ldi	r25, 0x27	; 39
    53a0:	91 83       	std	Z+1, r25	; 0x01
    53a2:	80 83       	st	Z, r24
							Pass=0;
    53a4:	fe 01       	movw	r30, r28
    53a6:	e1 58       	subi	r30, 0x81	; 129
    53a8:	ff 4f       	sbci	r31, 0xFF	; 255
    53aa:	11 82       	std	Z+1, r1	; 0x01
    53ac:	10 82       	st	Z, r1
							HLCD_voidSendString("Wrong Pass");
    53ae:	86 eb       	ldi	r24, 0xB6	; 182
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	aa ef       	ldi	r26, 0xFA	; 250
    53bc:	b3 e4       	ldi	r27, 0x43	; 67
    53be:	8f a3       	std	Y+39, r24	; 0x27
    53c0:	98 a7       	std	Y+40, r25	; 0x28
    53c2:	a9 a7       	std	Y+41, r26	; 0x29
    53c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53c6:	6f a1       	ldd	r22, Y+39	; 0x27
    53c8:	78 a5       	ldd	r23, Y+40	; 0x28
    53ca:	89 a5       	ldd	r24, Y+41	; 0x29
    53cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    53ce:	20 e0       	ldi	r18, 0x00	; 0
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	4a ef       	ldi	r20, 0xFA	; 250
    53d4:	54 e4       	ldi	r21, 0x44	; 68
    53d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53da:	dc 01       	movw	r26, r24
    53dc:	cb 01       	movw	r24, r22
    53de:	8b a3       	std	Y+35, r24	; 0x23
    53e0:	9c a3       	std	Y+36, r25	; 0x24
    53e2:	ad a3       	std	Y+37, r26	; 0x25
    53e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    53e6:	6b a1       	ldd	r22, Y+35	; 0x23
    53e8:	7c a1       	ldd	r23, Y+36	; 0x24
    53ea:	8d a1       	ldd	r24, Y+37	; 0x25
    53ec:	9e a1       	ldd	r25, Y+38	; 0x26
    53ee:	20 e0       	ldi	r18, 0x00	; 0
    53f0:	30 e0       	ldi	r19, 0x00	; 0
    53f2:	40 e8       	ldi	r20, 0x80	; 128
    53f4:	5f e3       	ldi	r21, 0x3F	; 63
    53f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53fa:	88 23       	and	r24, r24
    53fc:	2c f4       	brge	.+10     	; 0x5408 <main+0xf84>
		__ticks = 1;
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	9a a3       	std	Y+34, r25	; 0x22
    5404:	89 a3       	std	Y+33, r24	; 0x21
    5406:	3f c0       	rjmp	.+126    	; 0x5486 <main+0x1002>
	else if (__tmp > 65535)
    5408:	6b a1       	ldd	r22, Y+35	; 0x23
    540a:	7c a1       	ldd	r23, Y+36	; 0x24
    540c:	8d a1       	ldd	r24, Y+37	; 0x25
    540e:	9e a1       	ldd	r25, Y+38	; 0x26
    5410:	20 e0       	ldi	r18, 0x00	; 0
    5412:	3f ef       	ldi	r19, 0xFF	; 255
    5414:	4f e7       	ldi	r20, 0x7F	; 127
    5416:	57 e4       	ldi	r21, 0x47	; 71
    5418:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    541c:	18 16       	cp	r1, r24
    541e:	4c f5       	brge	.+82     	; 0x5472 <main+0xfee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5420:	6f a1       	ldd	r22, Y+39	; 0x27
    5422:	78 a5       	ldd	r23, Y+40	; 0x28
    5424:	89 a5       	ldd	r24, Y+41	; 0x29
    5426:	9a a5       	ldd	r25, Y+42	; 0x2a
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	30 e0       	ldi	r19, 0x00	; 0
    542c:	40 e2       	ldi	r20, 0x20	; 32
    542e:	51 e4       	ldi	r21, 0x41	; 65
    5430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5434:	dc 01       	movw	r26, r24
    5436:	cb 01       	movw	r24, r22
    5438:	bc 01       	movw	r22, r24
    543a:	cd 01       	movw	r24, r26
    543c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5440:	dc 01       	movw	r26, r24
    5442:	cb 01       	movw	r24, r22
    5444:	9a a3       	std	Y+34, r25	; 0x22
    5446:	89 a3       	std	Y+33, r24	; 0x21
    5448:	0f c0       	rjmp	.+30     	; 0x5468 <main+0xfe4>
    544a:	88 ec       	ldi	r24, 0xC8	; 200
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	98 a3       	std	Y+32, r25	; 0x20
    5450:	8f 8f       	std	Y+31, r24	; 0x1f
    5452:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5454:	98 a1       	ldd	r25, Y+32	; 0x20
    5456:	01 97       	sbiw	r24, 0x01	; 1
    5458:	f1 f7       	brne	.-4      	; 0x5456 <main+0xfd2>
    545a:	98 a3       	std	Y+32, r25	; 0x20
    545c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    545e:	89 a1       	ldd	r24, Y+33	; 0x21
    5460:	9a a1       	ldd	r25, Y+34	; 0x22
    5462:	01 97       	sbiw	r24, 0x01	; 1
    5464:	9a a3       	std	Y+34, r25	; 0x22
    5466:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5468:	89 a1       	ldd	r24, Y+33	; 0x21
    546a:	9a a1       	ldd	r25, Y+34	; 0x22
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	69 f7       	brne	.-38     	; 0x544a <main+0xfc6>
    5470:	14 c0       	rjmp	.+40     	; 0x549a <main+0x1016>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5472:	6b a1       	ldd	r22, Y+35	; 0x23
    5474:	7c a1       	ldd	r23, Y+36	; 0x24
    5476:	8d a1       	ldd	r24, Y+37	; 0x25
    5478:	9e a1       	ldd	r25, Y+38	; 0x26
    547a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    547e:	dc 01       	movw	r26, r24
    5480:	cb 01       	movw	r24, r22
    5482:	9a a3       	std	Y+34, r25	; 0x22
    5484:	89 a3       	std	Y+33, r24	; 0x21
    5486:	89 a1       	ldd	r24, Y+33	; 0x21
    5488:	9a a1       	ldd	r25, Y+34	; 0x22
    548a:	9e 8f       	std	Y+30, r25	; 0x1e
    548c:	8d 8f       	std	Y+29, r24	; 0x1d
    548e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5490:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5492:	01 97       	sbiw	r24, 0x01	; 1
    5494:	f1 f7       	brne	.-4      	; 0x5492 <main+0x100e>
    5496:	9e 8f       	std	Y+30, r25	; 0x1e
    5498:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(500);
							HLCD_voidClearDisplay();
    549a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
							HLCD_voidSendString("Old Pass : ");
    549e:	82 ed       	ldi	r24, 0xD2	; 210
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
							for(f=0 ; f<4 ; f++)
    54a6:	fe 01       	movw	r30, r28
    54a8:	e9 57       	subi	r30, 0x79	; 121
    54aa:	ff 4f       	sbci	r31, 0xFF	; 255
    54ac:	10 82       	st	Z, r1
    54ae:	51 c0       	rjmp	.+162    	; 0x5552 <main+0x10ce>
							{
								do
								{
									Key=HKPD_u8GetPressedKey();
    54b0:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    54b4:	fe 01       	movw	r30, r28
    54b6:	ea 57       	subi	r30, 0x7A	; 122
    54b8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ba:	80 83       	st	Z, r24
								}while(Key == NOT_PRESSED);
    54bc:	fe 01       	movw	r30, r28
    54be:	ea 57       	subi	r30, 0x7A	; 122
    54c0:	ff 4f       	sbci	r31, 0xFF	; 255
    54c2:	80 81       	ld	r24, Z
    54c4:	8f 3f       	cpi	r24, 0xFF	; 255
    54c6:	a1 f3       	breq	.-24     	; 0x54b0 <main+0x102c>
								HLCD_voidSendInt(Key);
    54c8:	fe 01       	movw	r30, r28
    54ca:	ea 57       	subi	r30, 0x7A	; 122
    54cc:	ff 4f       	sbci	r31, 0xFF	; 255
    54ce:	80 81       	ld	r24, Z
    54d0:	88 2f       	mov	r24, r24
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	a0 e0       	ldi	r26, 0x00	; 0
    54d6:	b0 e0       	ldi	r27, 0x00	; 0
    54d8:	bc 01       	movw	r22, r24
    54da:	cd 01       	movw	r24, r26
    54dc:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
								i/=10;
    54e0:	8e 01       	movw	r16, r28
    54e2:	0d 57       	subi	r16, 0x7D	; 125
    54e4:	1f 4f       	sbci	r17, 0xFF	; 255
    54e6:	fe 01       	movw	r30, r28
    54e8:	ed 57       	subi	r30, 0x7D	; 125
    54ea:	ff 4f       	sbci	r31, 0xFF	; 255
    54ec:	80 81       	ld	r24, Z
    54ee:	91 81       	ldd	r25, Z+1	; 0x01
    54f0:	2a e0       	ldi	r18, 0x0A	; 10
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	b9 01       	movw	r22, r18
    54f6:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    54fa:	cb 01       	movw	r24, r22
    54fc:	f8 01       	movw	r30, r16
    54fe:	91 83       	std	Z+1, r25	; 0x01
    5500:	80 83       	st	Z, r24
								Pass += ( Key*i );
    5502:	fe 01       	movw	r30, r28
    5504:	ea 57       	subi	r30, 0x7A	; 122
    5506:	ff 4f       	sbci	r31, 0xFF	; 255
    5508:	80 81       	ld	r24, Z
    550a:	28 2f       	mov	r18, r24
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	fe 01       	movw	r30, r28
    5510:	ed 57       	subi	r30, 0x7D	; 125
    5512:	ff 4f       	sbci	r31, 0xFF	; 255
    5514:	80 81       	ld	r24, Z
    5516:	91 81       	ldd	r25, Z+1	; 0x01
    5518:	a9 01       	movw	r20, r18
    551a:	48 9f       	mul	r20, r24
    551c:	90 01       	movw	r18, r0
    551e:	49 9f       	mul	r20, r25
    5520:	30 0d       	add	r19, r0
    5522:	58 9f       	mul	r21, r24
    5524:	30 0d       	add	r19, r0
    5526:	11 24       	eor	r1, r1
    5528:	de 01       	movw	r26, r28
    552a:	a1 58       	subi	r26, 0x81	; 129
    552c:	bf 4f       	sbci	r27, 0xFF	; 255
    552e:	fe 01       	movw	r30, r28
    5530:	e1 58       	subi	r30, 0x81	; 129
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	80 81       	ld	r24, Z
    5536:	91 81       	ldd	r25, Z+1	; 0x01
    5538:	82 0f       	add	r24, r18
    553a:	93 1f       	adc	r25, r19
    553c:	8d 93       	st	X+, r24
    553e:	9c 93       	st	X, r25
							Pass=0;
							HLCD_voidSendString("Wrong Pass");
							_delay_ms(500);
							HLCD_voidClearDisplay();
							HLCD_voidSendString("Old Pass : ");
							for(f=0 ; f<4 ; f++)
    5540:	de 01       	movw	r26, r28
    5542:	a9 57       	subi	r26, 0x79	; 121
    5544:	bf 4f       	sbci	r27, 0xFF	; 255
    5546:	fe 01       	movw	r30, r28
    5548:	e9 57       	subi	r30, 0x79	; 121
    554a:	ff 4f       	sbci	r31, 0xFF	; 255
    554c:	80 81       	ld	r24, Z
    554e:	8f 5f       	subi	r24, 0xFF	; 255
    5550:	8c 93       	st	X, r24
    5552:	fe 01       	movw	r30, r28
    5554:	e9 57       	subi	r30, 0x79	; 121
    5556:	ff 4f       	sbci	r31, 0xFF	; 255
    5558:	80 81       	ld	r24, Z
    555a:	84 30       	cpi	r24, 0x04	; 4
    555c:	08 f4       	brcc	.+2      	; 0x5560 <main+0x10dc>
    555e:	a8 cf       	rjmp	.-176    	; 0x54b0 <main+0x102c>
								}while(Key == NOT_PRESSED);
								HLCD_voidSendInt(Key);
								i/=10;
								Pass += ( Key*i );
							}
							Check_Pass(Pass);
    5560:	fe 01       	movw	r30, r28
    5562:	e1 58       	subi	r30, 0x81	; 129
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	80 81       	ld	r24, Z
    5568:	91 81       	ldd	r25, Z+1	; 0x01
    556a:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <Check_Pass>
							if(flag_CorrectPass==1)
    556e:	80 91 2a 01 	lds	r24, 0x012A
    5572:	81 30       	cpi	r24, 0x01	; 1
    5574:	09 f0       	breq	.+2      	; 0x5578 <main+0x10f4>
    5576:	7a c0       	rjmp	.+244    	; 0x566c <main+0x11e8>
							{
								flag_CorrectPass=0 ;
    5578:	10 92 2a 01 	sts	0x012A, r1
								HLCD_voidClearDisplay();
    557c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
								HLCD_voidSendString("New Pass : ");
    5580:	8e ed       	ldi	r24, 0xDE	; 222
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
								i=10000;
    5588:	fe 01       	movw	r30, r28
    558a:	ed 57       	subi	r30, 0x7D	; 125
    558c:	ff 4f       	sbci	r31, 0xFF	; 255
    558e:	80 e1       	ldi	r24, 0x10	; 16
    5590:	97 e2       	ldi	r25, 0x27	; 39
    5592:	91 83       	std	Z+1, r25	; 0x01
    5594:	80 83       	st	Z, r24
								Pass=0 ;
    5596:	fe 01       	movw	r30, r28
    5598:	e1 58       	subi	r30, 0x81	; 129
    559a:	ff 4f       	sbci	r31, 0xFF	; 255
    559c:	11 82       	std	Z+1, r1	; 0x01
    559e:	10 82       	st	Z, r1
								for(f=0 ; f<4 ; f++)
    55a0:	fe 01       	movw	r30, r28
    55a2:	e9 57       	subi	r30, 0x79	; 121
    55a4:	ff 4f       	sbci	r31, 0xFF	; 255
    55a6:	10 82       	st	Z, r1
    55a8:	51 c0       	rjmp	.+162    	; 0x564c <main+0x11c8>
								{
									do
									{
										Key=HKPD_u8GetPressedKey();
    55aa:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    55ae:	fe 01       	movw	r30, r28
    55b0:	ea 57       	subi	r30, 0x7A	; 122
    55b2:	ff 4f       	sbci	r31, 0xFF	; 255
    55b4:	80 83       	st	Z, r24
									}while(Key == NOT_PRESSED);
    55b6:	fe 01       	movw	r30, r28
    55b8:	ea 57       	subi	r30, 0x7A	; 122
    55ba:	ff 4f       	sbci	r31, 0xFF	; 255
    55bc:	80 81       	ld	r24, Z
    55be:	8f 3f       	cpi	r24, 0xFF	; 255
    55c0:	a1 f3       	breq	.-24     	; 0x55aa <main+0x1126>
									HLCD_voidSendInt(Key);
    55c2:	fe 01       	movw	r30, r28
    55c4:	ea 57       	subi	r30, 0x7A	; 122
    55c6:	ff 4f       	sbci	r31, 0xFF	; 255
    55c8:	80 81       	ld	r24, Z
    55ca:	88 2f       	mov	r24, r24
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	a0 e0       	ldi	r26, 0x00	; 0
    55d0:	b0 e0       	ldi	r27, 0x00	; 0
    55d2:	bc 01       	movw	r22, r24
    55d4:	cd 01       	movw	r24, r26
    55d6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
									i/=10;
    55da:	8e 01       	movw	r16, r28
    55dc:	0d 57       	subi	r16, 0x7D	; 125
    55de:	1f 4f       	sbci	r17, 0xFF	; 255
    55e0:	fe 01       	movw	r30, r28
    55e2:	ed 57       	subi	r30, 0x7D	; 125
    55e4:	ff 4f       	sbci	r31, 0xFF	; 255
    55e6:	80 81       	ld	r24, Z
    55e8:	91 81       	ldd	r25, Z+1	; 0x01
    55ea:	2a e0       	ldi	r18, 0x0A	; 10
    55ec:	30 e0       	ldi	r19, 0x00	; 0
    55ee:	b9 01       	movw	r22, r18
    55f0:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    55f4:	cb 01       	movw	r24, r22
    55f6:	f8 01       	movw	r30, r16
    55f8:	91 83       	std	Z+1, r25	; 0x01
    55fa:	80 83       	st	Z, r24
									Pass += ( Key*i );
    55fc:	fe 01       	movw	r30, r28
    55fe:	ea 57       	subi	r30, 0x7A	; 122
    5600:	ff 4f       	sbci	r31, 0xFF	; 255
    5602:	80 81       	ld	r24, Z
    5604:	28 2f       	mov	r18, r24
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	fe 01       	movw	r30, r28
    560a:	ed 57       	subi	r30, 0x7D	; 125
    560c:	ff 4f       	sbci	r31, 0xFF	; 255
    560e:	80 81       	ld	r24, Z
    5610:	91 81       	ldd	r25, Z+1	; 0x01
    5612:	a9 01       	movw	r20, r18
    5614:	48 9f       	mul	r20, r24
    5616:	90 01       	movw	r18, r0
    5618:	49 9f       	mul	r20, r25
    561a:	30 0d       	add	r19, r0
    561c:	58 9f       	mul	r21, r24
    561e:	30 0d       	add	r19, r0
    5620:	11 24       	eor	r1, r1
    5622:	de 01       	movw	r26, r28
    5624:	a1 58       	subi	r26, 0x81	; 129
    5626:	bf 4f       	sbci	r27, 0xFF	; 255
    5628:	fe 01       	movw	r30, r28
    562a:	e1 58       	subi	r30, 0x81	; 129
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	80 81       	ld	r24, Z
    5630:	91 81       	ldd	r25, Z+1	; 0x01
    5632:	82 0f       	add	r24, r18
    5634:	93 1f       	adc	r25, r19
    5636:	8d 93       	st	X+, r24
    5638:	9c 93       	st	X, r25
								flag_CorrectPass=0 ;
								HLCD_voidClearDisplay();
								HLCD_voidSendString("New Pass : ");
								i=10000;
								Pass=0 ;
								for(f=0 ; f<4 ; f++)
    563a:	de 01       	movw	r26, r28
    563c:	a9 57       	subi	r26, 0x79	; 121
    563e:	bf 4f       	sbci	r27, 0xFF	; 255
    5640:	fe 01       	movw	r30, r28
    5642:	e9 57       	subi	r30, 0x79	; 121
    5644:	ff 4f       	sbci	r31, 0xFF	; 255
    5646:	80 81       	ld	r24, Z
    5648:	8f 5f       	subi	r24, 0xFF	; 255
    564a:	8c 93       	st	X, r24
    564c:	fe 01       	movw	r30, r28
    564e:	e9 57       	subi	r30, 0x79	; 121
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	80 81       	ld	r24, Z
    5654:	84 30       	cpi	r24, 0x04	; 4
    5656:	08 f4       	brcc	.+2      	; 0x565a <main+0x11d6>
    5658:	a8 cf       	rjmp	.-176    	; 0x55aa <main+0x1126>
									}while(Key == NOT_PRESSED);
									HLCD_voidSendInt(Key);
									i/=10;
									Pass += ( Key*i );
								}
								Add_Pass_EEPROM(Pass);
    565a:	fe 01       	movw	r30, r28
    565c:	e1 58       	subi	r30, 0x81	; 129
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	80 81       	ld	r24, Z
    5662:	91 81       	ldd	r25, Z+1	; 0x01
    5664:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <Add_Pass_EEPROM>
    5668:	0c 94 85 22 	jmp	0x450a	; 0x450a <main+0x86>
								break;
    566c:	80 e0       	ldi	r24, 0x00	; 0
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	aa ef       	ldi	r26, 0xFA	; 250
    5672:	b3 e4       	ldi	r27, 0x43	; 67
    5674:	89 8f       	std	Y+25, r24	; 0x19
    5676:	9a 8f       	std	Y+26, r25	; 0x1a
    5678:	ab 8f       	std	Y+27, r26	; 0x1b
    567a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    567c:	69 8d       	ldd	r22, Y+25	; 0x19
    567e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5684:	20 e0       	ldi	r18, 0x00	; 0
    5686:	30 e0       	ldi	r19, 0x00	; 0
    5688:	4a ef       	ldi	r20, 0xFA	; 250
    568a:	54 e4       	ldi	r21, 0x44	; 68
    568c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5690:	dc 01       	movw	r26, r24
    5692:	cb 01       	movw	r24, r22
    5694:	8d 8b       	std	Y+21, r24	; 0x15
    5696:	9e 8b       	std	Y+22, r25	; 0x16
    5698:	af 8b       	std	Y+23, r26	; 0x17
    569a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    569c:	6d 89       	ldd	r22, Y+21	; 0x15
    569e:	7e 89       	ldd	r23, Y+22	; 0x16
    56a0:	8f 89       	ldd	r24, Y+23	; 0x17
    56a2:	98 8d       	ldd	r25, Y+24	; 0x18
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	40 e8       	ldi	r20, 0x80	; 128
    56aa:	5f e3       	ldi	r21, 0x3F	; 63
    56ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56b0:	88 23       	and	r24, r24
    56b2:	2c f4       	brge	.+10     	; 0x56be <main+0x123a>
		__ticks = 1;
    56b4:	81 e0       	ldi	r24, 0x01	; 1
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	9c 8b       	std	Y+20, r25	; 0x14
    56ba:	8b 8b       	std	Y+19, r24	; 0x13
    56bc:	3f c0       	rjmp	.+126    	; 0x573c <main+0x12b8>
	else if (__tmp > 65535)
    56be:	6d 89       	ldd	r22, Y+21	; 0x15
    56c0:	7e 89       	ldd	r23, Y+22	; 0x16
    56c2:	8f 89       	ldd	r24, Y+23	; 0x17
    56c4:	98 8d       	ldd	r25, Y+24	; 0x18
    56c6:	20 e0       	ldi	r18, 0x00	; 0
    56c8:	3f ef       	ldi	r19, 0xFF	; 255
    56ca:	4f e7       	ldi	r20, 0x7F	; 127
    56cc:	57 e4       	ldi	r21, 0x47	; 71
    56ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56d2:	18 16       	cp	r1, r24
    56d4:	4c f5       	brge	.+82     	; 0x5728 <main+0x12a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56d6:	69 8d       	ldd	r22, Y+25	; 0x19
    56d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56de:	20 e0       	ldi	r18, 0x00	; 0
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	40 e2       	ldi	r20, 0x20	; 32
    56e4:	51 e4       	ldi	r21, 0x41	; 65
    56e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ea:	dc 01       	movw	r26, r24
    56ec:	cb 01       	movw	r24, r22
    56ee:	bc 01       	movw	r22, r24
    56f0:	cd 01       	movw	r24, r26
    56f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f6:	dc 01       	movw	r26, r24
    56f8:	cb 01       	movw	r24, r22
    56fa:	9c 8b       	std	Y+20, r25	; 0x14
    56fc:	8b 8b       	std	Y+19, r24	; 0x13
    56fe:	0f c0       	rjmp	.+30     	; 0x571e <main+0x129a>
    5700:	88 ec       	ldi	r24, 0xC8	; 200
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	9a 8b       	std	Y+18, r25	; 0x12
    5706:	89 8b       	std	Y+17, r24	; 0x11
    5708:	89 89       	ldd	r24, Y+17	; 0x11
    570a:	9a 89       	ldd	r25, Y+18	; 0x12
    570c:	01 97       	sbiw	r24, 0x01	; 1
    570e:	f1 f7       	brne	.-4      	; 0x570c <main+0x1288>
    5710:	9a 8b       	std	Y+18, r25	; 0x12
    5712:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5714:	8b 89       	ldd	r24, Y+19	; 0x13
    5716:	9c 89       	ldd	r25, Y+20	; 0x14
    5718:	01 97       	sbiw	r24, 0x01	; 1
    571a:	9c 8b       	std	Y+20, r25	; 0x14
    571c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    571e:	8b 89       	ldd	r24, Y+19	; 0x13
    5720:	9c 89       	ldd	r25, Y+20	; 0x14
    5722:	00 97       	sbiw	r24, 0x00	; 0
    5724:	69 f7       	brne	.-38     	; 0x5700 <main+0x127c>
    5726:	14 c0       	rjmp	.+40     	; 0x5750 <main+0x12cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5728:	6d 89       	ldd	r22, Y+21	; 0x15
    572a:	7e 89       	ldd	r23, Y+22	; 0x16
    572c:	8f 89       	ldd	r24, Y+23	; 0x17
    572e:	98 8d       	ldd	r25, Y+24	; 0x18
    5730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5734:	dc 01       	movw	r26, r24
    5736:	cb 01       	movw	r24, r22
    5738:	9c 8b       	std	Y+20, r25	; 0x14
    573a:	8b 8b       	std	Y+19, r24	; 0x13
    573c:	8b 89       	ldd	r24, Y+19	; 0x13
    573e:	9c 89       	ldd	r25, Y+20	; 0x14
    5740:	98 8b       	std	Y+16, r25	; 0x10
    5742:	8f 87       	std	Y+15, r24	; 0x0f
    5744:	8f 85       	ldd	r24, Y+15	; 0x0f
    5746:	98 89       	ldd	r25, Y+16	; 0x10
    5748:	01 97       	sbiw	r24, 0x01	; 1
    574a:	f1 f7       	brne	.-4      	; 0x5748 <main+0x12c4>
    574c:	98 8b       	std	Y+16, r25	; 0x10
    574e:	8f 87       	std	Y+15, r24	; 0x0f
							}
							_delay_ms(500);
							HLCD_voidClearDisplay();
    5750:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
						Add_Pass_EEPROM(Pass);
					}
					else
					{
						HLCD_voidClearDisplay();
						for(Pass_Counter=0 ; Pass_Counter<2 ; Pass_Counter++)
    5754:	de 01       	movw	r26, r28
    5756:	ab 57       	subi	r26, 0x7B	; 123
    5758:	bf 4f       	sbci	r27, 0xFF	; 255
    575a:	fe 01       	movw	r30, r28
    575c:	eb 57       	subi	r30, 0x7B	; 123
    575e:	ff 4f       	sbci	r31, 0xFF	; 255
    5760:	80 81       	ld	r24, Z
    5762:	8f 5f       	subi	r24, 0xFF	; 255
    5764:	8c 93       	st	X, r24
    5766:	fe 01       	movw	r30, r28
    5768:	eb 57       	subi	r30, 0x7B	; 123
    576a:	ff 4f       	sbci	r31, 0xFF	; 255
    576c:	80 81       	ld	r24, Z
    576e:	82 30       	cpi	r24, 0x02	; 2
    5770:	08 f4       	brcc	.+2      	; 0x5774 <main+0x12f0>
    5772:	11 ce       	rjmp	.-990    	; 0x5396 <main+0xf12>
    5774:	0c 94 85 22 	jmp	0x450a	; 0x450a <main+0x86>
						}
					}
				}

			}
			else if(Key==3)
    5778:	fe 01       	movw	r30, r28
    577a:	ea 57       	subi	r30, 0x7A	; 122
    577c:	ff 4f       	sbci	r31, 0xFF	; 255
    577e:	80 81       	ld	r24, Z
    5780:	83 30       	cpi	r24, 0x03	; 3
    5782:	11 f0       	breq	.+4      	; 0x5788 <main+0x1304>
    5784:	0c 94 85 22 	jmp	0x450a	; 0x450a <main+0x86>
			{
				HLCD_voidClearDisplay();
    5788:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
				HLCD_voidSetCursorPosition(1,0);
    578c:	81 e0       	ldi	r24, 0x01	; 1
    578e:	60 e0       	ldi	r22, 0x00	; 0
    5790:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <HLCD_voidSetCursorPosition>
				HLCD_voidSendString("Add ID :");
    5794:	8a ee       	ldi	r24, 0xEA	; 234
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
				i=10000;
    579c:	fe 01       	movw	r30, r28
    579e:	ed 57       	subi	r30, 0x7D	; 125
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	80 e1       	ldi	r24, 0x10	; 16
    57a4:	97 e2       	ldi	r25, 0x27	; 39
    57a6:	91 83       	std	Z+1, r25	; 0x01
    57a8:	80 83       	st	Z, r24
				ID=0;
    57aa:	fe 01       	movw	r30, r28
    57ac:	ef 57       	subi	r30, 0x7F	; 127
    57ae:	ff 4f       	sbci	r31, 0xFF	; 255
    57b0:	11 82       	std	Z+1, r1	; 0x01
    57b2:	10 82       	st	Z, r1
				for(f=0 ; f<4 ; f++)
    57b4:	fe 01       	movw	r30, r28
    57b6:	e9 57       	subi	r30, 0x79	; 121
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	10 82       	st	Z, r1
    57bc:	51 c0       	rjmp	.+162    	; 0x5860 <main+0x13dc>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    57be:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    57c2:	fe 01       	movw	r30, r28
    57c4:	ea 57       	subi	r30, 0x7A	; 122
    57c6:	ff 4f       	sbci	r31, 0xFF	; 255
    57c8:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    57ca:	fe 01       	movw	r30, r28
    57cc:	ea 57       	subi	r30, 0x7A	; 122
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	80 81       	ld	r24, Z
    57d2:	8f 3f       	cpi	r24, 0xFF	; 255
    57d4:	a1 f3       	breq	.-24     	; 0x57be <main+0x133a>
					HLCD_voidSendInt(Key);
    57d6:	fe 01       	movw	r30, r28
    57d8:	ea 57       	subi	r30, 0x7A	; 122
    57da:	ff 4f       	sbci	r31, 0xFF	; 255
    57dc:	80 81       	ld	r24, Z
    57de:	88 2f       	mov	r24, r24
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	a0 e0       	ldi	r26, 0x00	; 0
    57e4:	b0 e0       	ldi	r27, 0x00	; 0
    57e6:	bc 01       	movw	r22, r24
    57e8:	cd 01       	movw	r24, r26
    57ea:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
					i/=10;
    57ee:	8e 01       	movw	r16, r28
    57f0:	0d 57       	subi	r16, 0x7D	; 125
    57f2:	1f 4f       	sbci	r17, 0xFF	; 255
    57f4:	fe 01       	movw	r30, r28
    57f6:	ed 57       	subi	r30, 0x7D	; 125
    57f8:	ff 4f       	sbci	r31, 0xFF	; 255
    57fa:	80 81       	ld	r24, Z
    57fc:	91 81       	ldd	r25, Z+1	; 0x01
    57fe:	2a e0       	ldi	r18, 0x0A	; 10
    5800:	30 e0       	ldi	r19, 0x00	; 0
    5802:	b9 01       	movw	r22, r18
    5804:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    5808:	cb 01       	movw	r24, r22
    580a:	f8 01       	movw	r30, r16
    580c:	91 83       	std	Z+1, r25	; 0x01
    580e:	80 83       	st	Z, r24
					ID += ( Key*i );
    5810:	fe 01       	movw	r30, r28
    5812:	ea 57       	subi	r30, 0x7A	; 122
    5814:	ff 4f       	sbci	r31, 0xFF	; 255
    5816:	80 81       	ld	r24, Z
    5818:	28 2f       	mov	r18, r24
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	fe 01       	movw	r30, r28
    581e:	ed 57       	subi	r30, 0x7D	; 125
    5820:	ff 4f       	sbci	r31, 0xFF	; 255
    5822:	80 81       	ld	r24, Z
    5824:	91 81       	ldd	r25, Z+1	; 0x01
    5826:	a9 01       	movw	r20, r18
    5828:	48 9f       	mul	r20, r24
    582a:	90 01       	movw	r18, r0
    582c:	49 9f       	mul	r20, r25
    582e:	30 0d       	add	r19, r0
    5830:	58 9f       	mul	r21, r24
    5832:	30 0d       	add	r19, r0
    5834:	11 24       	eor	r1, r1
    5836:	de 01       	movw	r26, r28
    5838:	af 57       	subi	r26, 0x7F	; 127
    583a:	bf 4f       	sbci	r27, 0xFF	; 255
    583c:	fe 01       	movw	r30, r28
    583e:	ef 57       	subi	r30, 0x7F	; 127
    5840:	ff 4f       	sbci	r31, 0xFF	; 255
    5842:	80 81       	ld	r24, Z
    5844:	91 81       	ldd	r25, Z+1	; 0x01
    5846:	82 0f       	add	r24, r18
    5848:	93 1f       	adc	r25, r19
    584a:	8d 93       	st	X+, r24
    584c:	9c 93       	st	X, r25
				HLCD_voidClearDisplay();
				HLCD_voidSetCursorPosition(1,0);
				HLCD_voidSendString("Add ID :");
				i=10000;
				ID=0;
				for(f=0 ; f<4 ; f++)
    584e:	de 01       	movw	r26, r28
    5850:	a9 57       	subi	r26, 0x79	; 121
    5852:	bf 4f       	sbci	r27, 0xFF	; 255
    5854:	fe 01       	movw	r30, r28
    5856:	e9 57       	subi	r30, 0x79	; 121
    5858:	ff 4f       	sbci	r31, 0xFF	; 255
    585a:	80 81       	ld	r24, Z
    585c:	8f 5f       	subi	r24, 0xFF	; 255
    585e:	8c 93       	st	X, r24
    5860:	fe 01       	movw	r30, r28
    5862:	e9 57       	subi	r30, 0x79	; 121
    5864:	ff 4f       	sbci	r31, 0xFF	; 255
    5866:	80 81       	ld	r24, Z
    5868:	84 30       	cpi	r24, 0x04	; 4
    586a:	08 f4       	brcc	.+2      	; 0x586e <main+0x13ea>
    586c:	a8 cf       	rjmp	.-176    	; 0x57be <main+0x133a>
					}while(Key == NOT_PRESSED);
					HLCD_voidSendInt(Key);
					i/=10;
					ID += ( Key*i );
				}
				Add_ID_EEPROM(ID);
    586e:	fe 01       	movw	r30, r28
    5870:	ef 57       	subi	r30, 0x7F	; 127
    5872:	ff 4f       	sbci	r31, 0xFF	; 255
    5874:	80 81       	ld	r24, Z
    5876:	91 81       	ldd	r25, Z+1	; 0x01
    5878:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <Add_ID_EEPROM>
    587c:	80 e0       	ldi	r24, 0x00	; 0
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	a0 e7       	ldi	r26, 0x70	; 112
    5882:	b1 e4       	ldi	r27, 0x41	; 65
    5884:	8b 87       	std	Y+11, r24	; 0x0b
    5886:	9c 87       	std	Y+12, r25	; 0x0c
    5888:	ad 87       	std	Y+13, r26	; 0x0d
    588a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    588c:	6b 85       	ldd	r22, Y+11	; 0x0b
    588e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5890:	8d 85       	ldd	r24, Y+13	; 0x0d
    5892:	9e 85       	ldd	r25, Y+14	; 0x0e
    5894:	20 e0       	ldi	r18, 0x00	; 0
    5896:	30 e0       	ldi	r19, 0x00	; 0
    5898:	4a ef       	ldi	r20, 0xFA	; 250
    589a:	54 e4       	ldi	r21, 0x44	; 68
    589c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58a0:	dc 01       	movw	r26, r24
    58a2:	cb 01       	movw	r24, r22
    58a4:	8f 83       	std	Y+7, r24	; 0x07
    58a6:	98 87       	std	Y+8, r25	; 0x08
    58a8:	a9 87       	std	Y+9, r26	; 0x09
    58aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58ac:	6f 81       	ldd	r22, Y+7	; 0x07
    58ae:	78 85       	ldd	r23, Y+8	; 0x08
    58b0:	89 85       	ldd	r24, Y+9	; 0x09
    58b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b4:	20 e0       	ldi	r18, 0x00	; 0
    58b6:	30 e0       	ldi	r19, 0x00	; 0
    58b8:	40 e8       	ldi	r20, 0x80	; 128
    58ba:	5f e3       	ldi	r21, 0x3F	; 63
    58bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58c0:	88 23       	and	r24, r24
    58c2:	2c f4       	brge	.+10     	; 0x58ce <main+0x144a>
		__ticks = 1;
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	9e 83       	std	Y+6, r25	; 0x06
    58ca:	8d 83       	std	Y+5, r24	; 0x05
    58cc:	3f c0       	rjmp	.+126    	; 0x594c <main+0x14c8>
	else if (__tmp > 65535)
    58ce:	6f 81       	ldd	r22, Y+7	; 0x07
    58d0:	78 85       	ldd	r23, Y+8	; 0x08
    58d2:	89 85       	ldd	r24, Y+9	; 0x09
    58d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    58d6:	20 e0       	ldi	r18, 0x00	; 0
    58d8:	3f ef       	ldi	r19, 0xFF	; 255
    58da:	4f e7       	ldi	r20, 0x7F	; 127
    58dc:	57 e4       	ldi	r21, 0x47	; 71
    58de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58e2:	18 16       	cp	r1, r24
    58e4:	4c f5       	brge	.+82     	; 0x5938 <main+0x14b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    58e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    58ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    58ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    58ee:	20 e0       	ldi	r18, 0x00	; 0
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	40 e2       	ldi	r20, 0x20	; 32
    58f4:	51 e4       	ldi	r21, 0x41	; 65
    58f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58fa:	dc 01       	movw	r26, r24
    58fc:	cb 01       	movw	r24, r22
    58fe:	bc 01       	movw	r22, r24
    5900:	cd 01       	movw	r24, r26
    5902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5906:	dc 01       	movw	r26, r24
    5908:	cb 01       	movw	r24, r22
    590a:	9e 83       	std	Y+6, r25	; 0x06
    590c:	8d 83       	std	Y+5, r24	; 0x05
    590e:	0f c0       	rjmp	.+30     	; 0x592e <main+0x14aa>
    5910:	88 ec       	ldi	r24, 0xC8	; 200
    5912:	90 e0       	ldi	r25, 0x00	; 0
    5914:	9c 83       	std	Y+4, r25	; 0x04
    5916:	8b 83       	std	Y+3, r24	; 0x03
    5918:	8b 81       	ldd	r24, Y+3	; 0x03
    591a:	9c 81       	ldd	r25, Y+4	; 0x04
    591c:	01 97       	sbiw	r24, 0x01	; 1
    591e:	f1 f7       	brne	.-4      	; 0x591c <main+0x1498>
    5920:	9c 83       	std	Y+4, r25	; 0x04
    5922:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5924:	8d 81       	ldd	r24, Y+5	; 0x05
    5926:	9e 81       	ldd	r25, Y+6	; 0x06
    5928:	01 97       	sbiw	r24, 0x01	; 1
    592a:	9e 83       	std	Y+6, r25	; 0x06
    592c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    592e:	8d 81       	ldd	r24, Y+5	; 0x05
    5930:	9e 81       	ldd	r25, Y+6	; 0x06
    5932:	00 97       	sbiw	r24, 0x00	; 0
    5934:	69 f7       	brne	.-38     	; 0x5910 <main+0x148c>
    5936:	14 c0       	rjmp	.+40     	; 0x5960 <main+0x14dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5938:	6f 81       	ldd	r22, Y+7	; 0x07
    593a:	78 85       	ldd	r23, Y+8	; 0x08
    593c:	89 85       	ldd	r24, Y+9	; 0x09
    593e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5944:	dc 01       	movw	r26, r24
    5946:	cb 01       	movw	r24, r22
    5948:	9e 83       	std	Y+6, r25	; 0x06
    594a:	8d 83       	std	Y+5, r24	; 0x05
    594c:	8d 81       	ldd	r24, Y+5	; 0x05
    594e:	9e 81       	ldd	r25, Y+6	; 0x06
    5950:	9a 83       	std	Y+2, r25	; 0x02
    5952:	89 83       	std	Y+1, r24	; 0x01
    5954:	89 81       	ldd	r24, Y+1	; 0x01
    5956:	9a 81       	ldd	r25, Y+2	; 0x02
    5958:	01 97       	sbiw	r24, 0x01	; 1
    595a:	f1 f7       	brne	.-4      	; 0x5958 <main+0x14d4>
    595c:	9a 83       	std	Y+2, r25	; 0x02
    595e:	89 83       	std	Y+1, r24	; 0x01

				_delay_ms(15);
				HLCD_voidClearDisplay();
    5960:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HLCD_voidClearDisplay>
				HLCD_voidSendString("Add Pass :");
    5964:	83 ef       	ldi	r24, 0xF3	; 243
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HLCD_voidSendString>
				i=10000;
    596c:	fe 01       	movw	r30, r28
    596e:	ed 57       	subi	r30, 0x7D	; 125
    5970:	ff 4f       	sbci	r31, 0xFF	; 255
    5972:	80 e1       	ldi	r24, 0x10	; 16
    5974:	97 e2       	ldi	r25, 0x27	; 39
    5976:	91 83       	std	Z+1, r25	; 0x01
    5978:	80 83       	st	Z, r24
				Pass=0 ;
    597a:	fe 01       	movw	r30, r28
    597c:	e1 58       	subi	r30, 0x81	; 129
    597e:	ff 4f       	sbci	r31, 0xFF	; 255
    5980:	11 82       	std	Z+1, r1	; 0x01
    5982:	10 82       	st	Z, r1
				for(f=0 ; f<4 ; f++)
    5984:	fe 01       	movw	r30, r28
    5986:	e9 57       	subi	r30, 0x79	; 121
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	10 82       	st	Z, r1
    598c:	51 c0       	rjmp	.+162    	; 0x5a30 <main+0x15ac>
				{
					do
					{
						Key=HKPD_u8GetPressedKey();
    598e:	0e 94 1a 07 	call	0xe34	; 0xe34 <HKPD_u8GetPressedKey>
    5992:	fe 01       	movw	r30, r28
    5994:	ea 57       	subi	r30, 0x7A	; 122
    5996:	ff 4f       	sbci	r31, 0xFF	; 255
    5998:	80 83       	st	Z, r24
					}while(Key == NOT_PRESSED);
    599a:	fe 01       	movw	r30, r28
    599c:	ea 57       	subi	r30, 0x7A	; 122
    599e:	ff 4f       	sbci	r31, 0xFF	; 255
    59a0:	80 81       	ld	r24, Z
    59a2:	8f 3f       	cpi	r24, 0xFF	; 255
    59a4:	a1 f3       	breq	.-24     	; 0x598e <main+0x150a>
					HLCD_voidSendInt(Key);
    59a6:	fe 01       	movw	r30, r28
    59a8:	ea 57       	subi	r30, 0x7A	; 122
    59aa:	ff 4f       	sbci	r31, 0xFF	; 255
    59ac:	80 81       	ld	r24, Z
    59ae:	88 2f       	mov	r24, r24
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	a0 e0       	ldi	r26, 0x00	; 0
    59b4:	b0 e0       	ldi	r27, 0x00	; 0
    59b6:	bc 01       	movw	r22, r24
    59b8:	cd 01       	movw	r24, r26
    59ba:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <HLCD_voidSendInt>
					i/=10;
    59be:	8e 01       	movw	r16, r28
    59c0:	0d 57       	subi	r16, 0x7D	; 125
    59c2:	1f 4f       	sbci	r17, 0xFF	; 255
    59c4:	fe 01       	movw	r30, r28
    59c6:	ed 57       	subi	r30, 0x7D	; 125
    59c8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ca:	80 81       	ld	r24, Z
    59cc:	91 81       	ldd	r25, Z+1	; 0x01
    59ce:	2a e0       	ldi	r18, 0x0A	; 10
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	b9 01       	movw	r22, r18
    59d4:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    59d8:	cb 01       	movw	r24, r22
    59da:	f8 01       	movw	r30, r16
    59dc:	91 83       	std	Z+1, r25	; 0x01
    59de:	80 83       	st	Z, r24
					Pass += ( Key*i );
    59e0:	fe 01       	movw	r30, r28
    59e2:	ea 57       	subi	r30, 0x7A	; 122
    59e4:	ff 4f       	sbci	r31, 0xFF	; 255
    59e6:	80 81       	ld	r24, Z
    59e8:	28 2f       	mov	r18, r24
    59ea:	30 e0       	ldi	r19, 0x00	; 0
    59ec:	fe 01       	movw	r30, r28
    59ee:	ed 57       	subi	r30, 0x7D	; 125
    59f0:	ff 4f       	sbci	r31, 0xFF	; 255
    59f2:	80 81       	ld	r24, Z
    59f4:	91 81       	ldd	r25, Z+1	; 0x01
    59f6:	a9 01       	movw	r20, r18
    59f8:	48 9f       	mul	r20, r24
    59fa:	90 01       	movw	r18, r0
    59fc:	49 9f       	mul	r20, r25
    59fe:	30 0d       	add	r19, r0
    5a00:	58 9f       	mul	r21, r24
    5a02:	30 0d       	add	r19, r0
    5a04:	11 24       	eor	r1, r1
    5a06:	de 01       	movw	r26, r28
    5a08:	a1 58       	subi	r26, 0x81	; 129
    5a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    5a0c:	fe 01       	movw	r30, r28
    5a0e:	e1 58       	subi	r30, 0x81	; 129
    5a10:	ff 4f       	sbci	r31, 0xFF	; 255
    5a12:	80 81       	ld	r24, Z
    5a14:	91 81       	ldd	r25, Z+1	; 0x01
    5a16:	82 0f       	add	r24, r18
    5a18:	93 1f       	adc	r25, r19
    5a1a:	8d 93       	st	X+, r24
    5a1c:	9c 93       	st	X, r25
				_delay_ms(15);
				HLCD_voidClearDisplay();
				HLCD_voidSendString("Add Pass :");
				i=10000;
				Pass=0 ;
				for(f=0 ; f<4 ; f++)
    5a1e:	de 01       	movw	r26, r28
    5a20:	a9 57       	subi	r26, 0x79	; 121
    5a22:	bf 4f       	sbci	r27, 0xFF	; 255
    5a24:	fe 01       	movw	r30, r28
    5a26:	e9 57       	subi	r30, 0x79	; 121
    5a28:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2a:	80 81       	ld	r24, Z
    5a2c:	8f 5f       	subi	r24, 0xFF	; 255
    5a2e:	8c 93       	st	X, r24
    5a30:	fe 01       	movw	r30, r28
    5a32:	e9 57       	subi	r30, 0x79	; 121
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	80 81       	ld	r24, Z
    5a38:	84 30       	cpi	r24, 0x04	; 4
    5a3a:	08 f4       	brcc	.+2      	; 0x5a3e <main+0x15ba>
    5a3c:	a8 cf       	rjmp	.-176    	; 0x598e <main+0x150a>
					}while(Key == NOT_PRESSED);
					HLCD_voidSendInt(Key);
					i/=10;
					Pass += ( Key*i );
				}
				Add_Pass_EEPROM(Pass);
    5a3e:	fe 01       	movw	r30, r28
    5a40:	e1 58       	subi	r30, 0x81	; 129
    5a42:	ff 4f       	sbci	r31, 0xFF	; 255
    5a44:	80 81       	ld	r24, Z
    5a46:	91 81       	ldd	r25, Z+1	; 0x01
    5a48:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <Add_Pass_EEPROM>
    5a4c:	0c 94 85 22 	jmp	0x450a	; 0x450a <main+0x86>

00005a50 <ReadInt_EEPROM>:
		}
	}
}

u16 ReadInt_EEPROM(u8* address)
{
    5a50:	df 93       	push	r29
    5a52:	cf 93       	push	r28
    5a54:	cd b7       	in	r28, 0x3d	; 61
    5a56:	de b7       	in	r29, 0x3e	; 62
    5a58:	68 97       	sbiw	r28, 0x18	; 24
    5a5a:	0f b6       	in	r0, 0x3f	; 63
    5a5c:	f8 94       	cli
    5a5e:	de bf       	out	0x3e, r29	; 62
    5a60:	0f be       	out	0x3f, r0	; 63
    5a62:	cd bf       	out	0x3d, r28	; 61
    5a64:	98 8f       	std	Y+24, r25	; 0x18
    5a66:	8f 8b       	std	Y+23, r24	; 0x17
	u16 N,LocalVar=0,j=1000;
    5a68:	1b 8a       	std	Y+19, r1	; 0x13
    5a6a:	1a 8a       	std	Y+18, r1	; 0x12
    5a6c:	88 ee       	ldi	r24, 0xE8	; 232
    5a6e:	93 e0       	ldi	r25, 0x03	; 3
    5a70:	99 8b       	std	Y+17, r25	; 0x11
    5a72:	88 8b       	std	Y+16, r24	; 0x10
	u8 n;
	for(u8 i=0 ;i<4 ;i++)
    5a74:	1f 86       	std	Y+15, r1	; 0x0f
    5a76:	a6 c0       	rjmp	.+332    	; 0x5bc4 <ReadInt_EEPROM+0x174>
	{
		EEPROM_voidRead(address+3,&n);
    5a78:	8f 89       	ldd	r24, Y+23	; 0x17
    5a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    5a7c:	03 96       	adiw	r24, 0x03	; 3
    5a7e:	9e 01       	movw	r18, r28
    5a80:	2a 5e       	subi	r18, 0xEA	; 234
    5a82:	3f 4f       	sbci	r19, 0xFF	; 255
    5a84:	b9 01       	movw	r22, r18
    5a86:	0e 94 f7 06 	call	0xdee	; 0xdee <EEPROM_voidRead>
		N=(u16)n*j;
    5a8a:	8e 89       	ldd	r24, Y+22	; 0x16
    5a8c:	28 2f       	mov	r18, r24
    5a8e:	30 e0       	ldi	r19, 0x00	; 0
    5a90:	88 89       	ldd	r24, Y+16	; 0x10
    5a92:	99 89       	ldd	r25, Y+17	; 0x11
    5a94:	ac 01       	movw	r20, r24
    5a96:	24 9f       	mul	r18, r20
    5a98:	c0 01       	movw	r24, r0
    5a9a:	25 9f       	mul	r18, r21
    5a9c:	90 0d       	add	r25, r0
    5a9e:	34 9f       	mul	r19, r20
    5aa0:	90 0d       	add	r25, r0
    5aa2:	11 24       	eor	r1, r1
    5aa4:	9d 8b       	std	Y+21, r25	; 0x15
    5aa6:	8c 8b       	std	Y+20, r24	; 0x14
		LocalVar+=N;
    5aa8:	2a 89       	ldd	r18, Y+18	; 0x12
    5aaa:	3b 89       	ldd	r19, Y+19	; 0x13
    5aac:	8c 89       	ldd	r24, Y+20	; 0x14
    5aae:	9d 89       	ldd	r25, Y+21	; 0x15
    5ab0:	82 0f       	add	r24, r18
    5ab2:	93 1f       	adc	r25, r19
    5ab4:	9b 8b       	std	Y+19, r25	; 0x13
    5ab6:	8a 8b       	std	Y+18, r24	; 0x12
		j/=10 ;
    5ab8:	88 89       	ldd	r24, Y+16	; 0x10
    5aba:	99 89       	ldd	r25, Y+17	; 0x11
    5abc:	2a e0       	ldi	r18, 0x0A	; 10
    5abe:	30 e0       	ldi	r19, 0x00	; 0
    5ac0:	b9 01       	movw	r22, r18
    5ac2:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	99 8b       	std	Y+17, r25	; 0x11
    5aca:	88 8b       	std	Y+16, r24	; 0x10
		N=0;
    5acc:	1d 8a       	std	Y+21, r1	; 0x15
    5ace:	1c 8a       	std	Y+20, r1	; 0x14
    5ad0:	80 e0       	ldi	r24, 0x00	; 0
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	a0 e7       	ldi	r26, 0x70	; 112
    5ad6:	b1 e4       	ldi	r27, 0x41	; 65
    5ad8:	8b 87       	std	Y+11, r24	; 0x0b
    5ada:	9c 87       	std	Y+12, r25	; 0x0c
    5adc:	ad 87       	std	Y+13, r26	; 0x0d
    5ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ae8:	20 e0       	ldi	r18, 0x00	; 0
    5aea:	30 e0       	ldi	r19, 0x00	; 0
    5aec:	4a ef       	ldi	r20, 0xFA	; 250
    5aee:	54 e4       	ldi	r21, 0x44	; 68
    5af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5af4:	dc 01       	movw	r26, r24
    5af6:	cb 01       	movw	r24, r22
    5af8:	8f 83       	std	Y+7, r24	; 0x07
    5afa:	98 87       	std	Y+8, r25	; 0x08
    5afc:	a9 87       	std	Y+9, r26	; 0x09
    5afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b00:	6f 81       	ldd	r22, Y+7	; 0x07
    5b02:	78 85       	ldd	r23, Y+8	; 0x08
    5b04:	89 85       	ldd	r24, Y+9	; 0x09
    5b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b08:	20 e0       	ldi	r18, 0x00	; 0
    5b0a:	30 e0       	ldi	r19, 0x00	; 0
    5b0c:	40 e8       	ldi	r20, 0x80	; 128
    5b0e:	5f e3       	ldi	r21, 0x3F	; 63
    5b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b14:	88 23       	and	r24, r24
    5b16:	2c f4       	brge	.+10     	; 0x5b22 <ReadInt_EEPROM+0xd2>
		__ticks = 1;
    5b18:	81 e0       	ldi	r24, 0x01	; 1
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	9e 83       	std	Y+6, r25	; 0x06
    5b1e:	8d 83       	std	Y+5, r24	; 0x05
    5b20:	3f c0       	rjmp	.+126    	; 0x5ba0 <ReadInt_EEPROM+0x150>
	else if (__tmp > 65535)
    5b22:	6f 81       	ldd	r22, Y+7	; 0x07
    5b24:	78 85       	ldd	r23, Y+8	; 0x08
    5b26:	89 85       	ldd	r24, Y+9	; 0x09
    5b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	3f ef       	ldi	r19, 0xFF	; 255
    5b2e:	4f e7       	ldi	r20, 0x7F	; 127
    5b30:	57 e4       	ldi	r21, 0x47	; 71
    5b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b36:	18 16       	cp	r1, r24
    5b38:	4c f5       	brge	.+82     	; 0x5b8c <ReadInt_EEPROM+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b42:	20 e0       	ldi	r18, 0x00	; 0
    5b44:	30 e0       	ldi	r19, 0x00	; 0
    5b46:	40 e2       	ldi	r20, 0x20	; 32
    5b48:	51 e4       	ldi	r21, 0x41	; 65
    5b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b4e:	dc 01       	movw	r26, r24
    5b50:	cb 01       	movw	r24, r22
    5b52:	bc 01       	movw	r22, r24
    5b54:	cd 01       	movw	r24, r26
    5b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b5a:	dc 01       	movw	r26, r24
    5b5c:	cb 01       	movw	r24, r22
    5b5e:	9e 83       	std	Y+6, r25	; 0x06
    5b60:	8d 83       	std	Y+5, r24	; 0x05
    5b62:	0f c0       	rjmp	.+30     	; 0x5b82 <ReadInt_EEPROM+0x132>
    5b64:	88 ec       	ldi	r24, 0xC8	; 200
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	9c 83       	std	Y+4, r25	; 0x04
    5b6a:	8b 83       	std	Y+3, r24	; 0x03
    5b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    5b70:	01 97       	sbiw	r24, 0x01	; 1
    5b72:	f1 f7       	brne	.-4      	; 0x5b70 <ReadInt_EEPROM+0x120>
    5b74:	9c 83       	std	Y+4, r25	; 0x04
    5b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b78:	8d 81       	ldd	r24, Y+5	; 0x05
    5b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b7c:	01 97       	sbiw	r24, 0x01	; 1
    5b7e:	9e 83       	std	Y+6, r25	; 0x06
    5b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b82:	8d 81       	ldd	r24, Y+5	; 0x05
    5b84:	9e 81       	ldd	r25, Y+6	; 0x06
    5b86:	00 97       	sbiw	r24, 0x00	; 0
    5b88:	69 f7       	brne	.-38     	; 0x5b64 <ReadInt_EEPROM+0x114>
    5b8a:	14 c0       	rjmp	.+40     	; 0x5bb4 <ReadInt_EEPROM+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    5b8e:	78 85       	ldd	r23, Y+8	; 0x08
    5b90:	89 85       	ldd	r24, Y+9	; 0x09
    5b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b98:	dc 01       	movw	r26, r24
    5b9a:	cb 01       	movw	r24, r22
    5b9c:	9e 83       	std	Y+6, r25	; 0x06
    5b9e:	8d 83       	std	Y+5, r24	; 0x05
    5ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba4:	9a 83       	std	Y+2, r25	; 0x02
    5ba6:	89 83       	std	Y+1, r24	; 0x01
    5ba8:	89 81       	ldd	r24, Y+1	; 0x01
    5baa:	9a 81       	ldd	r25, Y+2	; 0x02
    5bac:	01 97       	sbiw	r24, 0x01	; 1
    5bae:	f1 f7       	brne	.-4      	; 0x5bac <ReadInt_EEPROM+0x15c>
    5bb0:	9a 83       	std	Y+2, r25	; 0x02
    5bb2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
		address-- ;
    5bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    5bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    5bb8:	01 97       	sbiw	r24, 0x01	; 1
    5bba:	98 8f       	std	Y+24, r25	; 0x18
    5bbc:	8f 8b       	std	Y+23, r24	; 0x17

u16 ReadInt_EEPROM(u8* address)
{
	u16 N,LocalVar=0,j=1000;
	u8 n;
	for(u8 i=0 ;i<4 ;i++)
    5bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bc0:	8f 5f       	subi	r24, 0xFF	; 255
    5bc2:	8f 87       	std	Y+15, r24	; 0x0f
    5bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bc6:	84 30       	cpi	r24, 0x04	; 4
    5bc8:	08 f4       	brcc	.+2      	; 0x5bcc <ReadInt_EEPROM+0x17c>
    5bca:	56 cf       	rjmp	.-340    	; 0x5a78 <ReadInt_EEPROM+0x28>
		j/=10 ;
		N=0;
		_delay_ms(15);
		address-- ;
	}
	return LocalVar ;
    5bcc:	8a 89       	ldd	r24, Y+18	; 0x12
    5bce:	9b 89       	ldd	r25, Y+19	; 0x13
}
    5bd0:	68 96       	adiw	r28, 0x18	; 24
    5bd2:	0f b6       	in	r0, 0x3f	; 63
    5bd4:	f8 94       	cli
    5bd6:	de bf       	out	0x3e, r29	; 62
    5bd8:	0f be       	out	0x3f, r0	; 63
    5bda:	cd bf       	out	0x3d, r28	; 61
    5bdc:	cf 91       	pop	r28
    5bde:	df 91       	pop	r29
    5be0:	08 95       	ret

00005be2 <WriteInt_EEPROM>:
void WriteInt_EEPROM(u16 number,u8* address)
{
    5be2:	df 93       	push	r29
    5be4:	cf 93       	push	r28
    5be6:	cd b7       	in	r28, 0x3d	; 61
    5be8:	de b7       	in	r29, 0x3e	; 62
    5bea:	64 97       	sbiw	r28, 0x14	; 20
    5bec:	0f b6       	in	r0, 0x3f	; 63
    5bee:	f8 94       	cli
    5bf0:	de bf       	out	0x3e, r29	; 62
    5bf2:	0f be       	out	0x3f, r0	; 63
    5bf4:	cd bf       	out	0x3d, r28	; 61
    5bf6:	9a 8b       	std	Y+18, r25	; 0x12
    5bf8:	89 8b       	std	Y+17, r24	; 0x11
    5bfa:	7c 8b       	std	Y+20, r23	; 0x14
    5bfc:	6b 8b       	std	Y+19, r22	; 0x13
	u8 LocalVar;
	//u8* pointer=address;
	for(u8 i=0 ; i<4 ; i++)
    5bfe:	1f 86       	std	Y+15, r1	; 0x0f
    5c00:	93 c0       	rjmp	.+294    	; 0x5d28 <WriteInt_EEPROM+0x146>
	{
		LocalVar=number%10 ;
    5c02:	89 89       	ldd	r24, Y+17	; 0x11
    5c04:	9a 89       	ldd	r25, Y+18	; 0x12
    5c06:	2a e0       	ldi	r18, 0x0A	; 10
    5c08:	30 e0       	ldi	r19, 0x00	; 0
    5c0a:	b9 01       	movw	r22, r18
    5c0c:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    5c10:	88 8b       	std	Y+16, r24	; 0x10
		number/=10 ;
    5c12:	89 89       	ldd	r24, Y+17	; 0x11
    5c14:	9a 89       	ldd	r25, Y+18	; 0x12
    5c16:	2a e0       	ldi	r18, 0x0A	; 10
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	b9 01       	movw	r22, r18
    5c1c:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    5c20:	cb 01       	movw	r24, r22
    5c22:	9a 8b       	std	Y+18, r25	; 0x12
    5c24:	89 8b       	std	Y+17, r24	; 0x11
		EEPROM_voidWrite(LocalVar , address);
    5c26:	8b 89       	ldd	r24, Y+19	; 0x13
    5c28:	9c 89       	ldd	r25, Y+20	; 0x14
    5c2a:	98 2f       	mov	r25, r24
    5c2c:	88 89       	ldd	r24, Y+16	; 0x10
    5c2e:	69 2f       	mov	r22, r25
    5c30:	0e 94 de 06 	call	0xdbc	; 0xdbc <EEPROM_voidWrite>
    5c34:	80 e0       	ldi	r24, 0x00	; 0
    5c36:	90 e0       	ldi	r25, 0x00	; 0
    5c38:	a0 e7       	ldi	r26, 0x70	; 112
    5c3a:	b1 e4       	ldi	r27, 0x41	; 65
    5c3c:	8b 87       	std	Y+11, r24	; 0x0b
    5c3e:	9c 87       	std	Y+12, r25	; 0x0c
    5c40:	ad 87       	std	Y+13, r26	; 0x0d
    5c42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	4a ef       	ldi	r20, 0xFA	; 250
    5c52:	54 e4       	ldi	r21, 0x44	; 68
    5c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c58:	dc 01       	movw	r26, r24
    5c5a:	cb 01       	movw	r24, r22
    5c5c:	8f 83       	std	Y+7, r24	; 0x07
    5c5e:	98 87       	std	Y+8, r25	; 0x08
    5c60:	a9 87       	std	Y+9, r26	; 0x09
    5c62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c64:	6f 81       	ldd	r22, Y+7	; 0x07
    5c66:	78 85       	ldd	r23, Y+8	; 0x08
    5c68:	89 85       	ldd	r24, Y+9	; 0x09
    5c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c6c:	20 e0       	ldi	r18, 0x00	; 0
    5c6e:	30 e0       	ldi	r19, 0x00	; 0
    5c70:	40 e8       	ldi	r20, 0x80	; 128
    5c72:	5f e3       	ldi	r21, 0x3F	; 63
    5c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c78:	88 23       	and	r24, r24
    5c7a:	2c f4       	brge	.+10     	; 0x5c86 <WriteInt_EEPROM+0xa4>
		__ticks = 1;
    5c7c:	81 e0       	ldi	r24, 0x01	; 1
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	9e 83       	std	Y+6, r25	; 0x06
    5c82:	8d 83       	std	Y+5, r24	; 0x05
    5c84:	3f c0       	rjmp	.+126    	; 0x5d04 <WriteInt_EEPROM+0x122>
	else if (__tmp > 65535)
    5c86:	6f 81       	ldd	r22, Y+7	; 0x07
    5c88:	78 85       	ldd	r23, Y+8	; 0x08
    5c8a:	89 85       	ldd	r24, Y+9	; 0x09
    5c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c8e:	20 e0       	ldi	r18, 0x00	; 0
    5c90:	3f ef       	ldi	r19, 0xFF	; 255
    5c92:	4f e7       	ldi	r20, 0x7F	; 127
    5c94:	57 e4       	ldi	r21, 0x47	; 71
    5c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c9a:	18 16       	cp	r1, r24
    5c9c:	4c f5       	brge	.+82     	; 0x5cf0 <WriteInt_EEPROM+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ca6:	20 e0       	ldi	r18, 0x00	; 0
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
    5caa:	40 e2       	ldi	r20, 0x20	; 32
    5cac:	51 e4       	ldi	r21, 0x41	; 65
    5cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cb2:	dc 01       	movw	r26, r24
    5cb4:	cb 01       	movw	r24, r22
    5cb6:	bc 01       	movw	r22, r24
    5cb8:	cd 01       	movw	r24, r26
    5cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	9e 83       	std	Y+6, r25	; 0x06
    5cc4:	8d 83       	std	Y+5, r24	; 0x05
    5cc6:	0f c0       	rjmp	.+30     	; 0x5ce6 <WriteInt_EEPROM+0x104>
    5cc8:	88 ec       	ldi	r24, 0xC8	; 200
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	9c 83       	std	Y+4, r25	; 0x04
    5cce:	8b 83       	std	Y+3, r24	; 0x03
    5cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    5cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd4:	01 97       	sbiw	r24, 0x01	; 1
    5cd6:	f1 f7       	brne	.-4      	; 0x5cd4 <WriteInt_EEPROM+0xf2>
    5cd8:	9c 83       	std	Y+4, r25	; 0x04
    5cda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    5cde:	9e 81       	ldd	r25, Y+6	; 0x06
    5ce0:	01 97       	sbiw	r24, 0x01	; 1
    5ce2:	9e 83       	std	Y+6, r25	; 0x06
    5ce4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    5cea:	00 97       	sbiw	r24, 0x00	; 0
    5cec:	69 f7       	brne	.-38     	; 0x5cc8 <WriteInt_EEPROM+0xe6>
    5cee:	14 c0       	rjmp	.+40     	; 0x5d18 <WriteInt_EEPROM+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    5cf2:	78 85       	ldd	r23, Y+8	; 0x08
    5cf4:	89 85       	ldd	r24, Y+9	; 0x09
    5cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cfc:	dc 01       	movw	r26, r24
    5cfe:	cb 01       	movw	r24, r22
    5d00:	9e 83       	std	Y+6, r25	; 0x06
    5d02:	8d 83       	std	Y+5, r24	; 0x05
    5d04:	8d 81       	ldd	r24, Y+5	; 0x05
    5d06:	9e 81       	ldd	r25, Y+6	; 0x06
    5d08:	9a 83       	std	Y+2, r25	; 0x02
    5d0a:	89 83       	std	Y+1, r24	; 0x01
    5d0c:	89 81       	ldd	r24, Y+1	; 0x01
    5d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d10:	01 97       	sbiw	r24, 0x01	; 1
    5d12:	f1 f7       	brne	.-4      	; 0x5d10 <WriteInt_EEPROM+0x12e>
    5d14:	9a 83       	std	Y+2, r25	; 0x02
    5d16:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
		address++ ;
    5d18:	8b 89       	ldd	r24, Y+19	; 0x13
    5d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    5d1c:	01 96       	adiw	r24, 0x01	; 1
    5d1e:	9c 8b       	std	Y+20, r25	; 0x14
    5d20:	8b 8b       	std	Y+19, r24	; 0x13
}
void WriteInt_EEPROM(u16 number,u8* address)
{
	u8 LocalVar;
	//u8* pointer=address;
	for(u8 i=0 ; i<4 ; i++)
    5d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d24:	8f 5f       	subi	r24, 0xFF	; 255
    5d26:	8f 87       	std	Y+15, r24	; 0x0f
    5d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d2a:	84 30       	cpi	r24, 0x04	; 4
    5d2c:	08 f4       	brcc	.+2      	; 0x5d30 <WriteInt_EEPROM+0x14e>
    5d2e:	69 cf       	rjmp	.-302    	; 0x5c02 <WriteInt_EEPROM+0x20>
		number/=10 ;
		EEPROM_voidWrite(LocalVar , address);
		_delay_ms(15);
		address++ ;
	}
}
    5d30:	64 96       	adiw	r28, 0x14	; 20
    5d32:	0f b6       	in	r0, 0x3f	; 63
    5d34:	f8 94       	cli
    5d36:	de bf       	out	0x3e, r29	; 62
    5d38:	0f be       	out	0x3f, r0	; 63
    5d3a:	cd bf       	out	0x3d, r28	; 61
    5d3c:	cf 91       	pop	r28
    5d3e:	df 91       	pop	r29
    5d40:	08 95       	ret

00005d42 <Add_ID_EEPROM>:
void Add_ID_EEPROM(u16 ID)
{
    5d42:	df 93       	push	r29
    5d44:	cf 93       	push	r28
    5d46:	00 d0       	rcall	.+0      	; 0x5d48 <Add_ID_EEPROM+0x6>
    5d48:	00 d0       	rcall	.+0      	; 0x5d4a <Add_ID_EEPROM+0x8>
    5d4a:	cd b7       	in	r28, 0x3d	; 61
    5d4c:	de b7       	in	r29, 0x3e	; 62
    5d4e:	9a 83       	std	Y+2, r25	; 0x02
    5d50:	89 83       	std	Y+1, r24	; 0x01
	flag_User++ ;
    5d52:	80 91 29 01 	lds	r24, 0x0129
    5d56:	8f 5f       	subi	r24, 0xFF	; 255
    5d58:	80 93 29 01 	sts	0x0129, r24
	switch(flag_User)
    5d5c:	80 91 29 01 	lds	r24, 0x0129
    5d60:	28 2f       	mov	r18, r24
    5d62:	30 e0       	ldi	r19, 0x00	; 0
    5d64:	3c 83       	std	Y+4, r19	; 0x04
    5d66:	2b 83       	std	Y+3, r18	; 0x03
    5d68:	8b 81       	ldd	r24, Y+3	; 0x03
    5d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d6c:	83 30       	cpi	r24, 0x03	; 3
    5d6e:	91 05       	cpc	r25, r1
    5d70:	91 f1       	breq	.+100    	; 0x5dd6 <Add_ID_EEPROM+0x94>
    5d72:	2b 81       	ldd	r18, Y+3	; 0x03
    5d74:	3c 81       	ldd	r19, Y+4	; 0x04
    5d76:	24 30       	cpi	r18, 0x04	; 4
    5d78:	31 05       	cpc	r19, r1
    5d7a:	5c f4       	brge	.+22     	; 0x5d92 <Add_ID_EEPROM+0x50>
    5d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d80:	81 30       	cpi	r24, 0x01	; 1
    5d82:	91 05       	cpc	r25, r1
    5d84:	89 f0       	breq	.+34     	; 0x5da8 <Add_ID_EEPROM+0x66>
    5d86:	2b 81       	ldd	r18, Y+3	; 0x03
    5d88:	3c 81       	ldd	r19, Y+4	; 0x04
    5d8a:	22 30       	cpi	r18, 0x02	; 2
    5d8c:	31 05       	cpc	r19, r1
    5d8e:	b1 f0       	breq	.+44     	; 0x5dbc <Add_ID_EEPROM+0x7a>
    5d90:	48 c0       	rjmp	.+144    	; 0x5e22 <Add_ID_EEPROM+0xe0>
    5d92:	8b 81       	ldd	r24, Y+3	; 0x03
    5d94:	9c 81       	ldd	r25, Y+4	; 0x04
    5d96:	84 30       	cpi	r24, 0x04	; 4
    5d98:	91 05       	cpc	r25, r1
    5d9a:	51 f1       	breq	.+84     	; 0x5df0 <Add_ID_EEPROM+0xae>
    5d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    5d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    5da0:	25 30       	cpi	r18, 0x05	; 5
    5da2:	31 05       	cpc	r19, r1
    5da4:	91 f1       	breq	.+100    	; 0x5e0a <Add_ID_EEPROM+0xc8>
    5da6:	3d c0       	rjmp	.+122    	; 0x5e22 <Add_ID_EEPROM+0xe0>
	{
	case 1 : WriteInt_EEPROM(ID,ptr);break;
    5da8:	20 91 06 01 	lds	r18, 0x0106
    5dac:	30 91 07 01 	lds	r19, 0x0107
    5db0:	89 81       	ldd	r24, Y+1	; 0x01
    5db2:	9a 81       	ldd	r25, Y+2	; 0x02
    5db4:	b9 01       	movw	r22, r18
    5db6:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5dba:	33 c0       	rjmp	.+102    	; 0x5e22 <Add_ID_EEPROM+0xe0>
	case 2 : WriteInt_EEPROM(ID,ptr+8);break;
    5dbc:	80 91 06 01 	lds	r24, 0x0106
    5dc0:	90 91 07 01 	lds	r25, 0x0107
    5dc4:	9c 01       	movw	r18, r24
    5dc6:	28 5f       	subi	r18, 0xF8	; 248
    5dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5dca:	89 81       	ldd	r24, Y+1	; 0x01
    5dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    5dce:	b9 01       	movw	r22, r18
    5dd0:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5dd4:	26 c0       	rjmp	.+76     	; 0x5e22 <Add_ID_EEPROM+0xe0>
	case 3 : WriteInt_EEPROM(ID,ptr+16);break;
    5dd6:	80 91 06 01 	lds	r24, 0x0106
    5dda:	90 91 07 01 	lds	r25, 0x0107
    5dde:	9c 01       	movw	r18, r24
    5de0:	20 5f       	subi	r18, 0xF0	; 240
    5de2:	3f 4f       	sbci	r19, 0xFF	; 255
    5de4:	89 81       	ldd	r24, Y+1	; 0x01
    5de6:	9a 81       	ldd	r25, Y+2	; 0x02
    5de8:	b9 01       	movw	r22, r18
    5dea:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5dee:	19 c0       	rjmp	.+50     	; 0x5e22 <Add_ID_EEPROM+0xe0>
	case 4 : WriteInt_EEPROM(ID,ptr+24);break;
    5df0:	80 91 06 01 	lds	r24, 0x0106
    5df4:	90 91 07 01 	lds	r25, 0x0107
    5df8:	9c 01       	movw	r18, r24
    5dfa:	28 5e       	subi	r18, 0xE8	; 232
    5dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    5dfe:	89 81       	ldd	r24, Y+1	; 0x01
    5e00:	9a 81       	ldd	r25, Y+2	; 0x02
    5e02:	b9 01       	movw	r22, r18
    5e04:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5e08:	0c c0       	rjmp	.+24     	; 0x5e22 <Add_ID_EEPROM+0xe0>
	case 5 : WriteInt_EEPROM(ID,ptr+32);break;
    5e0a:	80 91 06 01 	lds	r24, 0x0106
    5e0e:	90 91 07 01 	lds	r25, 0x0107
    5e12:	9c 01       	movw	r18, r24
    5e14:	20 5e       	subi	r18, 0xE0	; 224
    5e16:	3f 4f       	sbci	r19, 0xFF	; 255
    5e18:	89 81       	ldd	r24, Y+1	; 0x01
    5e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e1c:	b9 01       	movw	r22, r18
    5e1e:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
	default : break ;
	}
}
    5e22:	0f 90       	pop	r0
    5e24:	0f 90       	pop	r0
    5e26:	0f 90       	pop	r0
    5e28:	0f 90       	pop	r0
    5e2a:	cf 91       	pop	r28
    5e2c:	df 91       	pop	r29
    5e2e:	08 95       	ret

00005e30 <Add_Pass_EEPROM>:
void Add_Pass_EEPROM(u16 Pass)
{
    5e30:	df 93       	push	r29
    5e32:	cf 93       	push	r28
    5e34:	00 d0       	rcall	.+0      	; 0x5e36 <Add_Pass_EEPROM+0x6>
    5e36:	00 d0       	rcall	.+0      	; 0x5e38 <Add_Pass_EEPROM+0x8>
    5e38:	cd b7       	in	r28, 0x3d	; 61
    5e3a:	de b7       	in	r29, 0x3e	; 62
    5e3c:	9a 83       	std	Y+2, r25	; 0x02
    5e3e:	89 83       	std	Y+1, r24	; 0x01
	switch(flag_User)
    5e40:	80 91 29 01 	lds	r24, 0x0129
    5e44:	28 2f       	mov	r18, r24
    5e46:	30 e0       	ldi	r19, 0x00	; 0
    5e48:	3c 83       	std	Y+4, r19	; 0x04
    5e4a:	2b 83       	std	Y+3, r18	; 0x03
    5e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    5e50:	83 30       	cpi	r24, 0x03	; 3
    5e52:	91 05       	cpc	r25, r1
    5e54:	a9 f1       	breq	.+106    	; 0x5ec0 <Add_Pass_EEPROM+0x90>
    5e56:	2b 81       	ldd	r18, Y+3	; 0x03
    5e58:	3c 81       	ldd	r19, Y+4	; 0x04
    5e5a:	24 30       	cpi	r18, 0x04	; 4
    5e5c:	31 05       	cpc	r19, r1
    5e5e:	5c f4       	brge	.+22     	; 0x5e76 <Add_Pass_EEPROM+0x46>
    5e60:	8b 81       	ldd	r24, Y+3	; 0x03
    5e62:	9c 81       	ldd	r25, Y+4	; 0x04
    5e64:	81 30       	cpi	r24, 0x01	; 1
    5e66:	91 05       	cpc	r25, r1
    5e68:	89 f0       	breq	.+34     	; 0x5e8c <Add_Pass_EEPROM+0x5c>
    5e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    5e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    5e6e:	22 30       	cpi	r18, 0x02	; 2
    5e70:	31 05       	cpc	r19, r1
    5e72:	c9 f0       	breq	.+50     	; 0x5ea6 <Add_Pass_EEPROM+0x76>
    5e74:	4b c0       	rjmp	.+150    	; 0x5f0c <Add_Pass_EEPROM+0xdc>
    5e76:	8b 81       	ldd	r24, Y+3	; 0x03
    5e78:	9c 81       	ldd	r25, Y+4	; 0x04
    5e7a:	84 30       	cpi	r24, 0x04	; 4
    5e7c:	91 05       	cpc	r25, r1
    5e7e:	69 f1       	breq	.+90     	; 0x5eda <Add_Pass_EEPROM+0xaa>
    5e80:	2b 81       	ldd	r18, Y+3	; 0x03
    5e82:	3c 81       	ldd	r19, Y+4	; 0x04
    5e84:	25 30       	cpi	r18, 0x05	; 5
    5e86:	31 05       	cpc	r19, r1
    5e88:	a9 f1       	breq	.+106    	; 0x5ef4 <Add_Pass_EEPROM+0xc4>
    5e8a:	40 c0       	rjmp	.+128    	; 0x5f0c <Add_Pass_EEPROM+0xdc>
	{
	case 1 : WriteInt_EEPROM(Pass,ptr+4);break;
    5e8c:	80 91 06 01 	lds	r24, 0x0106
    5e90:	90 91 07 01 	lds	r25, 0x0107
    5e94:	9c 01       	movw	r18, r24
    5e96:	2c 5f       	subi	r18, 0xFC	; 252
    5e98:	3f 4f       	sbci	r19, 0xFF	; 255
    5e9a:	89 81       	ldd	r24, Y+1	; 0x01
    5e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e9e:	b9 01       	movw	r22, r18
    5ea0:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5ea4:	33 c0       	rjmp	.+102    	; 0x5f0c <Add_Pass_EEPROM+0xdc>
	case 2 : WriteInt_EEPROM(Pass,ptr+12);break;
    5ea6:	80 91 06 01 	lds	r24, 0x0106
    5eaa:	90 91 07 01 	lds	r25, 0x0107
    5eae:	9c 01       	movw	r18, r24
    5eb0:	24 5f       	subi	r18, 0xF4	; 244
    5eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    5eb4:	89 81       	ldd	r24, Y+1	; 0x01
    5eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb8:	b9 01       	movw	r22, r18
    5eba:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5ebe:	26 c0       	rjmp	.+76     	; 0x5f0c <Add_Pass_EEPROM+0xdc>
	case 3 : WriteInt_EEPROM(Pass,ptr+20);break;
    5ec0:	80 91 06 01 	lds	r24, 0x0106
    5ec4:	90 91 07 01 	lds	r25, 0x0107
    5ec8:	9c 01       	movw	r18, r24
    5eca:	2c 5e       	subi	r18, 0xEC	; 236
    5ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ece:	89 81       	ldd	r24, Y+1	; 0x01
    5ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed2:	b9 01       	movw	r22, r18
    5ed4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5ed8:	19 c0       	rjmp	.+50     	; 0x5f0c <Add_Pass_EEPROM+0xdc>
	case 4 : WriteInt_EEPROM(Pass,ptr+28);break;
    5eda:	80 91 06 01 	lds	r24, 0x0106
    5ede:	90 91 07 01 	lds	r25, 0x0107
    5ee2:	9c 01       	movw	r18, r24
    5ee4:	24 5e       	subi	r18, 0xE4	; 228
    5ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ee8:	89 81       	ldd	r24, Y+1	; 0x01
    5eea:	9a 81       	ldd	r25, Y+2	; 0x02
    5eec:	b9 01       	movw	r22, r18
    5eee:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
    5ef2:	0c c0       	rjmp	.+24     	; 0x5f0c <Add_Pass_EEPROM+0xdc>
	case 5 : WriteInt_EEPROM(Pass,ptr+36);break;
    5ef4:	80 91 06 01 	lds	r24, 0x0106
    5ef8:	90 91 07 01 	lds	r25, 0x0107
    5efc:	9c 01       	movw	r18, r24
    5efe:	2c 5d       	subi	r18, 0xDC	; 220
    5f00:	3f 4f       	sbci	r19, 0xFF	; 255
    5f02:	89 81       	ldd	r24, Y+1	; 0x01
    5f04:	9a 81       	ldd	r25, Y+2	; 0x02
    5f06:	b9 01       	movw	r22, r18
    5f08:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <WriteInt_EEPROM>
	default : break ;
	}
}
    5f0c:	0f 90       	pop	r0
    5f0e:	0f 90       	pop	r0
    5f10:	0f 90       	pop	r0
    5f12:	0f 90       	pop	r0
    5f14:	cf 91       	pop	r28
    5f16:	df 91       	pop	r29
    5f18:	08 95       	ret

00005f1a <Check_ID>:
void Check_ID(u16 User_ID)
{
    5f1a:	df 93       	push	r29
    5f1c:	cf 93       	push	r28
    5f1e:	cd b7       	in	r28, 0x3d	; 61
    5f20:	de b7       	in	r29, 0x3e	; 62
    5f22:	27 97       	sbiw	r28, 0x07	; 7
    5f24:	0f b6       	in	r0, 0x3f	; 63
    5f26:	f8 94       	cli
    5f28:	de bf       	out	0x3e, r29	; 62
    5f2a:	0f be       	out	0x3f, r0	; 63
    5f2c:	cd bf       	out	0x3d, r28	; 61
    5f2e:	9f 83       	std	Y+7, r25	; 0x07
    5f30:	8e 83       	std	Y+6, r24	; 0x06
	u8 *address=ptr ;
    5f32:	80 91 06 01 	lds	r24, 0x0106
    5f36:	90 91 07 01 	lds	r25, 0x0107
    5f3a:	9d 83       	std	Y+5, r25	; 0x05
    5f3c:	8c 83       	std	Y+4, r24	; 0x04
	u16 ID=0;
    5f3e:	1b 82       	std	Y+3, r1	; 0x03
    5f40:	1a 82       	std	Y+2, r1	; 0x02
	flag_User=0;
    5f42:	10 92 29 01 	sts	0x0129, r1
	for(u8 i=0 ; i<5 ; i++)
    5f46:	19 82       	std	Y+1, r1	; 0x01
    5f48:	19 c0       	rjmp	.+50     	; 0x5f7c <Check_ID+0x62>
	{
		ID=ReadInt_EEPROM(address);
    5f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    5f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    5f4e:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <ReadInt_EEPROM>
    5f52:	9b 83       	std	Y+3, r25	; 0x03
    5f54:	8a 83       	std	Y+2, r24	; 0x02
		if(ID==User_ID)
    5f56:	2a 81       	ldd	r18, Y+2	; 0x02
    5f58:	3b 81       	ldd	r19, Y+3	; 0x03
    5f5a:	8e 81       	ldd	r24, Y+6	; 0x06
    5f5c:	9f 81       	ldd	r25, Y+7	; 0x07
    5f5e:	28 17       	cp	r18, r24
    5f60:	39 07       	cpc	r19, r25
    5f62:	21 f4       	brne	.+8      	; 0x5f6c <Check_ID+0x52>
		{
			flag_User=i+1 ;
    5f64:	89 81       	ldd	r24, Y+1	; 0x01
    5f66:	8f 5f       	subi	r24, 0xFF	; 255
    5f68:	80 93 29 01 	sts	0x0129, r24
		}
		address+=8 ;
    5f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    5f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    5f70:	08 96       	adiw	r24, 0x08	; 8
    5f72:	9d 83       	std	Y+5, r25	; 0x05
    5f74:	8c 83       	std	Y+4, r24	; 0x04
void Check_ID(u16 User_ID)
{
	u8 *address=ptr ;
	u16 ID=0;
	flag_User=0;
	for(u8 i=0 ; i<5 ; i++)
    5f76:	89 81       	ldd	r24, Y+1	; 0x01
    5f78:	8f 5f       	subi	r24, 0xFF	; 255
    5f7a:	89 83       	std	Y+1, r24	; 0x01
    5f7c:	89 81       	ldd	r24, Y+1	; 0x01
    5f7e:	85 30       	cpi	r24, 0x05	; 5
    5f80:	20 f3       	brcs	.-56     	; 0x5f4a <Check_ID+0x30>
		{
			flag_User=i+1 ;
		}
		address+=8 ;
	}
}
    5f82:	27 96       	adiw	r28, 0x07	; 7
    5f84:	0f b6       	in	r0, 0x3f	; 63
    5f86:	f8 94       	cli
    5f88:	de bf       	out	0x3e, r29	; 62
    5f8a:	0f be       	out	0x3f, r0	; 63
    5f8c:	cd bf       	out	0x3d, r28	; 61
    5f8e:	cf 91       	pop	r28
    5f90:	df 91       	pop	r29
    5f92:	08 95       	ret

00005f94 <Check_Pass>:
void Check_Pass(u16 User_Pass)
{
    5f94:	df 93       	push	r29
    5f96:	cf 93       	push	r28
    5f98:	00 d0       	rcall	.+0      	; 0x5f9a <Check_Pass+0x6>
    5f9a:	00 d0       	rcall	.+0      	; 0x5f9c <Check_Pass+0x8>
    5f9c:	00 d0       	rcall	.+0      	; 0x5f9e <Check_Pass+0xa>
    5f9e:	cd b7       	in	r28, 0x3d	; 61
    5fa0:	de b7       	in	r29, 0x3e	; 62
    5fa2:	9c 83       	std	Y+4, r25	; 0x04
    5fa4:	8b 83       	std	Y+3, r24	; 0x03
	u16 Pass=0 ;
    5fa6:	1a 82       	std	Y+2, r1	; 0x02
    5fa8:	19 82       	std	Y+1, r1	; 0x01
	switch(flag_User)
    5faa:	80 91 29 01 	lds	r24, 0x0129
    5fae:	28 2f       	mov	r18, r24
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	3e 83       	std	Y+6, r19	; 0x06
    5fb4:	2d 83       	std	Y+5, r18	; 0x05
    5fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    5fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    5fba:	83 30       	cpi	r24, 0x03	; 3
    5fbc:	91 05       	cpc	r25, r1
    5fbe:	79 f1       	breq	.+94     	; 0x601e <Check_Pass+0x8a>
    5fc0:	2d 81       	ldd	r18, Y+5	; 0x05
    5fc2:	3e 81       	ldd	r19, Y+6	; 0x06
    5fc4:	24 30       	cpi	r18, 0x04	; 4
    5fc6:	31 05       	cpc	r19, r1
    5fc8:	5c f4       	brge	.+22     	; 0x5fe0 <Check_Pass+0x4c>
    5fca:	8d 81       	ldd	r24, Y+5	; 0x05
    5fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    5fce:	81 30       	cpi	r24, 0x01	; 1
    5fd0:	91 05       	cpc	r25, r1
    5fd2:	89 f0       	breq	.+34     	; 0x5ff6 <Check_Pass+0x62>
    5fd4:	2d 81       	ldd	r18, Y+5	; 0x05
    5fd6:	3e 81       	ldd	r19, Y+6	; 0x06
    5fd8:	22 30       	cpi	r18, 0x02	; 2
    5fda:	31 05       	cpc	r19, r1
    5fdc:	b1 f0       	breq	.+44     	; 0x600a <Check_Pass+0x76>
    5fde:	3c c0       	rjmp	.+120    	; 0x6058 <Check_Pass+0xc4>
    5fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    5fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    5fe4:	84 30       	cpi	r24, 0x04	; 4
    5fe6:	91 05       	cpc	r25, r1
    5fe8:	21 f1       	breq	.+72     	; 0x6032 <Check_Pass+0x9e>
    5fea:	2d 81       	ldd	r18, Y+5	; 0x05
    5fec:	3e 81       	ldd	r19, Y+6	; 0x06
    5fee:	25 30       	cpi	r18, 0x05	; 5
    5ff0:	31 05       	cpc	r19, r1
    5ff2:	49 f1       	breq	.+82     	; 0x6046 <Check_Pass+0xb2>
    5ff4:	31 c0       	rjmp	.+98     	; 0x6058 <Check_Pass+0xc4>
	{
	case 1 : Pass=ReadInt_EEPROM(ptr+4);break;
    5ff6:	80 91 06 01 	lds	r24, 0x0106
    5ffa:	90 91 07 01 	lds	r25, 0x0107
    5ffe:	04 96       	adiw	r24, 0x04	; 4
    6000:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <ReadInt_EEPROM>
    6004:	9a 83       	std	Y+2, r25	; 0x02
    6006:	89 83       	std	Y+1, r24	; 0x01
    6008:	27 c0       	rjmp	.+78     	; 0x6058 <Check_Pass+0xc4>
	case 2 : Pass=ReadInt_EEPROM(ptr+12);break;
    600a:	80 91 06 01 	lds	r24, 0x0106
    600e:	90 91 07 01 	lds	r25, 0x0107
    6012:	0c 96       	adiw	r24, 0x0c	; 12
    6014:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <ReadInt_EEPROM>
    6018:	9a 83       	std	Y+2, r25	; 0x02
    601a:	89 83       	std	Y+1, r24	; 0x01
    601c:	1d c0       	rjmp	.+58     	; 0x6058 <Check_Pass+0xc4>
	case 3 : Pass=ReadInt_EEPROM(ptr+20);break;
    601e:	80 91 06 01 	lds	r24, 0x0106
    6022:	90 91 07 01 	lds	r25, 0x0107
    6026:	44 96       	adiw	r24, 0x14	; 20
    6028:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <ReadInt_EEPROM>
    602c:	9a 83       	std	Y+2, r25	; 0x02
    602e:	89 83       	std	Y+1, r24	; 0x01
    6030:	13 c0       	rjmp	.+38     	; 0x6058 <Check_Pass+0xc4>
	case 4 : Pass=ReadInt_EEPROM(ptr+28);break;
    6032:	80 91 06 01 	lds	r24, 0x0106
    6036:	90 91 07 01 	lds	r25, 0x0107
    603a:	4c 96       	adiw	r24, 0x1c	; 28
    603c:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <ReadInt_EEPROM>
    6040:	9a 83       	std	Y+2, r25	; 0x02
    6042:	89 83       	std	Y+1, r24	; 0x01
    6044:	09 c0       	rjmp	.+18     	; 0x6058 <Check_Pass+0xc4>
	case 5 : Pass=ReadInt_EEPROM(ptr+36);break;
    6046:	80 91 06 01 	lds	r24, 0x0106
    604a:	90 91 07 01 	lds	r25, 0x0107
    604e:	84 96       	adiw	r24, 0x24	; 36
    6050:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <ReadInt_EEPROM>
    6054:	9a 83       	std	Y+2, r25	; 0x02
    6056:	89 83       	std	Y+1, r24	; 0x01
	default : break;
	}
	if(User_Pass == Pass)
    6058:	2b 81       	ldd	r18, Y+3	; 0x03
    605a:	3c 81       	ldd	r19, Y+4	; 0x04
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	9a 81       	ldd	r25, Y+2	; 0x02
    6060:	28 17       	cp	r18, r24
    6062:	39 07       	cpc	r19, r25
    6064:	19 f4       	brne	.+6      	; 0x606c <Check_Pass+0xd8>
	{
		flag_CorrectPass=1 ;
    6066:	81 e0       	ldi	r24, 0x01	; 1
    6068:	80 93 2a 01 	sts	0x012A, r24
	}
}
    606c:	26 96       	adiw	r28, 0x06	; 6
    606e:	0f b6       	in	r0, 0x3f	; 63
    6070:	f8 94       	cli
    6072:	de bf       	out	0x3e, r29	; 62
    6074:	0f be       	out	0x3f, r0	; 63
    6076:	cd bf       	out	0x3d, r28	; 61
    6078:	cf 91       	pop	r28
    607a:	df 91       	pop	r29
    607c:	08 95       	ret

0000607e <ADC_ISR>:
void ADC_ISR()
{
    607e:	0f 93       	push	r16
    6080:	1f 93       	push	r17
    6082:	df 93       	push	r29
    6084:	cf 93       	push	r28
    6086:	cd b7       	in	r28, 0x3d	; 61
    6088:	de b7       	in	r29, 0x3e	; 62
	static u16 Temp=0,Reading=0,L=0,Light=0 ;

	if(flag==0)
    608a:	80 91 28 01 	lds	r24, 0x0128
    608e:	88 23       	and	r24, r24
    6090:	29 f5       	brne	.+74     	; 0x60dc <ADC_ISR+0x5e>
	{
		Reading = ADC_DATA;
    6092:	e4 e2       	ldi	r30, 0x24	; 36
    6094:	f0 e0       	ldi	r31, 0x00	; 0
    6096:	80 81       	ld	r24, Z
    6098:	91 81       	ldd	r25, Z+1	; 0x01
    609a:	90 93 30 01 	sts	0x0130, r25
    609e:	80 93 2f 01 	sts	0x012F, r24
		Temp=Mapping(40,20,1023,0,Reading);
    60a2:	e0 91 2f 01 	lds	r30, 0x012F
    60a6:	f0 91 30 01 	lds	r31, 0x0130
    60aa:	88 e2       	ldi	r24, 0x28	; 40
    60ac:	90 e0       	ldi	r25, 0x00	; 0
    60ae:	64 e1       	ldi	r22, 0x14	; 20
    60b0:	70 e0       	ldi	r23, 0x00	; 0
    60b2:	4f ef       	ldi	r20, 0xFF	; 255
    60b4:	53 e0       	ldi	r21, 0x03	; 3
    60b6:	20 e0       	ldi	r18, 0x00	; 0
    60b8:	30 e0       	ldi	r19, 0x00	; 0
    60ba:	8f 01       	movw	r16, r30
    60bc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <Mapping>
    60c0:	90 93 32 01 	sts	0x0132, r25
    60c4:	80 93 31 01 	sts	0x0131, r24
		MSPI_voidTranceive((u8)Temp);
    60c8:	80 91 31 01 	lds	r24, 0x0131
    60cc:	90 91 32 01 	lds	r25, 0x0132
    60d0:	0e 94 44 1b 	call	0x3688	; 0x3688 <MSPI_voidTranceive>
		flag=1 ;
    60d4:	81 e0       	ldi	r24, 0x01	; 1
    60d6:	80 93 28 01 	sts	0x0128, r24
    60da:	23 c0       	rjmp	.+70     	; 0x6122 <ADC_ISR+0xa4>
	}
	else
	{
		Light=ADC_DATA;
    60dc:	e4 e2       	ldi	r30, 0x24	; 36
    60de:	f0 e0       	ldi	r31, 0x00	; 0
    60e0:	80 81       	ld	r24, Z
    60e2:	91 81       	ldd	r25, Z+1	; 0x01
    60e4:	90 93 2c 01 	sts	0x012C, r25
    60e8:	80 93 2b 01 	sts	0x012B, r24
		L=Mapping(250,200,1023,0,Light);
    60ec:	e0 91 2b 01 	lds	r30, 0x012B
    60f0:	f0 91 2c 01 	lds	r31, 0x012C
    60f4:	8a ef       	ldi	r24, 0xFA	; 250
    60f6:	90 e0       	ldi	r25, 0x00	; 0
    60f8:	68 ec       	ldi	r22, 0xC8	; 200
    60fa:	70 e0       	ldi	r23, 0x00	; 0
    60fc:	4f ef       	ldi	r20, 0xFF	; 255
    60fe:	53 e0       	ldi	r21, 0x03	; 3
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	8f 01       	movw	r16, r30
    6106:	0e 94 d5 16 	call	0x2daa	; 0x2daa <Mapping>
    610a:	90 93 2e 01 	sts	0x012E, r25
    610e:	80 93 2d 01 	sts	0x012D, r24
		MSPI_voidTranceive((u8)L);
    6112:	80 91 2d 01 	lds	r24, 0x012D
    6116:	90 91 2e 01 	lds	r25, 0x012E
    611a:	0e 94 44 1b 	call	0x3688	; 0x3688 <MSPI_voidTranceive>
		flag=0 ;
    611e:	10 92 28 01 	sts	0x0128, r1
	}
}
    6122:	cf 91       	pop	r28
    6124:	df 91       	pop	r29
    6126:	1f 91       	pop	r17
    6128:	0f 91       	pop	r16
    612a:	08 95       	ret

0000612c <ISR_UART>:
void ISR_UART()
{
    612c:	df 93       	push	r29
    612e:	cf 93       	push	r28
    6130:	0f 92       	push	r0
    6132:	cd b7       	in	r28, 0x3d	; 61
    6134:	de b7       	in	r29, 0x3e	; 62
	u8 x=0 ;
    6136:	19 82       	std	Y+1, r1	; 0x01
	x=UDR ;
    6138:	ec e2       	ldi	r30, 0x2C	; 44
    613a:	f0 e0       	ldi	r31, 0x00	; 0
    613c:	80 81       	ld	r24, Z
    613e:	89 83       	std	Y+1, r24	; 0x01
	MSPI_voidTranceive(x);
    6140:	89 81       	ldd	r24, Y+1	; 0x01
    6142:	0e 94 44 1b 	call	0x3688	; 0x3688 <MSPI_voidTranceive>
}
    6146:	0f 90       	pop	r0
    6148:	cf 91       	pop	r28
    614a:	df 91       	pop	r29
    614c:	08 95       	ret

0000614e <ISR_TIMER1>:
void ISR_TIMER1()
{
    614e:	df 93       	push	r29
    6150:	cf 93       	push	r28
    6152:	cd b7       	in	r28, 0x3d	; 61
    6154:	de b7       	in	r29, 0x3e	; 62

	if(flag==0)
    6156:	80 91 28 01 	lds	r24, 0x0128
    615a:	88 23       	and	r24, r24
    615c:	31 f4       	brne	.+12     	; 0x616a <ISR_TIMER1+0x1c>
	{
		ADC_SelectChannel(0); // LM35
    615e:	80 e0       	ldi	r24, 0x00	; 0
    6160:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_SelectChannel>
		ADC_StartConversionAndWait();
    6164:	0e 94 80 06 	call	0xd00	; 0xd00 <ADC_StartConversionAndWait>
    6168:	05 c0       	rjmp	.+10     	; 0x6174 <ISR_TIMER1+0x26>
	}
	else
	{
		ADC_SelectChannel(1);//LDR
    616a:	81 e0       	ldi	r24, 0x01	; 1
    616c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_SelectChannel>
		ADC_StartConversionAndWait();
    6170:	0e 94 80 06 	call	0xd00	; 0xd00 <ADC_StartConversionAndWait>
	}



}
    6174:	cf 91       	pop	r28
    6176:	df 91       	pop	r29
    6178:	08 95       	ret

0000617a <__mulsi3>:
    617a:	62 9f       	mul	r22, r18
    617c:	d0 01       	movw	r26, r0
    617e:	73 9f       	mul	r23, r19
    6180:	f0 01       	movw	r30, r0
    6182:	82 9f       	mul	r24, r18
    6184:	e0 0d       	add	r30, r0
    6186:	f1 1d       	adc	r31, r1
    6188:	64 9f       	mul	r22, r20
    618a:	e0 0d       	add	r30, r0
    618c:	f1 1d       	adc	r31, r1
    618e:	92 9f       	mul	r25, r18
    6190:	f0 0d       	add	r31, r0
    6192:	83 9f       	mul	r24, r19
    6194:	f0 0d       	add	r31, r0
    6196:	74 9f       	mul	r23, r20
    6198:	f0 0d       	add	r31, r0
    619a:	65 9f       	mul	r22, r21
    619c:	f0 0d       	add	r31, r0
    619e:	99 27       	eor	r25, r25
    61a0:	72 9f       	mul	r23, r18
    61a2:	b0 0d       	add	r27, r0
    61a4:	e1 1d       	adc	r30, r1
    61a6:	f9 1f       	adc	r31, r25
    61a8:	63 9f       	mul	r22, r19
    61aa:	b0 0d       	add	r27, r0
    61ac:	e1 1d       	adc	r30, r1
    61ae:	f9 1f       	adc	r31, r25
    61b0:	bd 01       	movw	r22, r26
    61b2:	cf 01       	movw	r24, r30
    61b4:	11 24       	eor	r1, r1
    61b6:	08 95       	ret

000061b8 <__udivmodhi4>:
    61b8:	aa 1b       	sub	r26, r26
    61ba:	bb 1b       	sub	r27, r27
    61bc:	51 e1       	ldi	r21, 0x11	; 17
    61be:	07 c0       	rjmp	.+14     	; 0x61ce <__udivmodhi4_ep>

000061c0 <__udivmodhi4_loop>:
    61c0:	aa 1f       	adc	r26, r26
    61c2:	bb 1f       	adc	r27, r27
    61c4:	a6 17       	cp	r26, r22
    61c6:	b7 07       	cpc	r27, r23
    61c8:	10 f0       	brcs	.+4      	; 0x61ce <__udivmodhi4_ep>
    61ca:	a6 1b       	sub	r26, r22
    61cc:	b7 0b       	sbc	r27, r23

000061ce <__udivmodhi4_ep>:
    61ce:	88 1f       	adc	r24, r24
    61d0:	99 1f       	adc	r25, r25
    61d2:	5a 95       	dec	r21
    61d4:	a9 f7       	brne	.-22     	; 0x61c0 <__udivmodhi4_loop>
    61d6:	80 95       	com	r24
    61d8:	90 95       	com	r25
    61da:	bc 01       	movw	r22, r24
    61dc:	cd 01       	movw	r24, r26
    61de:	08 95       	ret

000061e0 <__udivmodsi4>:
    61e0:	a1 e2       	ldi	r26, 0x21	; 33
    61e2:	1a 2e       	mov	r1, r26
    61e4:	aa 1b       	sub	r26, r26
    61e6:	bb 1b       	sub	r27, r27
    61e8:	fd 01       	movw	r30, r26
    61ea:	0d c0       	rjmp	.+26     	; 0x6206 <__udivmodsi4_ep>

000061ec <__udivmodsi4_loop>:
    61ec:	aa 1f       	adc	r26, r26
    61ee:	bb 1f       	adc	r27, r27
    61f0:	ee 1f       	adc	r30, r30
    61f2:	ff 1f       	adc	r31, r31
    61f4:	a2 17       	cp	r26, r18
    61f6:	b3 07       	cpc	r27, r19
    61f8:	e4 07       	cpc	r30, r20
    61fa:	f5 07       	cpc	r31, r21
    61fc:	20 f0       	brcs	.+8      	; 0x6206 <__udivmodsi4_ep>
    61fe:	a2 1b       	sub	r26, r18
    6200:	b3 0b       	sbc	r27, r19
    6202:	e4 0b       	sbc	r30, r20
    6204:	f5 0b       	sbc	r31, r21

00006206 <__udivmodsi4_ep>:
    6206:	66 1f       	adc	r22, r22
    6208:	77 1f       	adc	r23, r23
    620a:	88 1f       	adc	r24, r24
    620c:	99 1f       	adc	r25, r25
    620e:	1a 94       	dec	r1
    6210:	69 f7       	brne	.-38     	; 0x61ec <__udivmodsi4_loop>
    6212:	60 95       	com	r22
    6214:	70 95       	com	r23
    6216:	80 95       	com	r24
    6218:	90 95       	com	r25
    621a:	9b 01       	movw	r18, r22
    621c:	ac 01       	movw	r20, r24
    621e:	bd 01       	movw	r22, r26
    6220:	cf 01       	movw	r24, r30
    6222:	08 95       	ret

00006224 <__prologue_saves__>:
    6224:	2f 92       	push	r2
    6226:	3f 92       	push	r3
    6228:	4f 92       	push	r4
    622a:	5f 92       	push	r5
    622c:	6f 92       	push	r6
    622e:	7f 92       	push	r7
    6230:	8f 92       	push	r8
    6232:	9f 92       	push	r9
    6234:	af 92       	push	r10
    6236:	bf 92       	push	r11
    6238:	cf 92       	push	r12
    623a:	df 92       	push	r13
    623c:	ef 92       	push	r14
    623e:	ff 92       	push	r15
    6240:	0f 93       	push	r16
    6242:	1f 93       	push	r17
    6244:	cf 93       	push	r28
    6246:	df 93       	push	r29
    6248:	cd b7       	in	r28, 0x3d	; 61
    624a:	de b7       	in	r29, 0x3e	; 62
    624c:	ca 1b       	sub	r28, r26
    624e:	db 0b       	sbc	r29, r27
    6250:	0f b6       	in	r0, 0x3f	; 63
    6252:	f8 94       	cli
    6254:	de bf       	out	0x3e, r29	; 62
    6256:	0f be       	out	0x3f, r0	; 63
    6258:	cd bf       	out	0x3d, r28	; 61
    625a:	09 94       	ijmp

0000625c <__epilogue_restores__>:
    625c:	2a 88       	ldd	r2, Y+18	; 0x12
    625e:	39 88       	ldd	r3, Y+17	; 0x11
    6260:	48 88       	ldd	r4, Y+16	; 0x10
    6262:	5f 84       	ldd	r5, Y+15	; 0x0f
    6264:	6e 84       	ldd	r6, Y+14	; 0x0e
    6266:	7d 84       	ldd	r7, Y+13	; 0x0d
    6268:	8c 84       	ldd	r8, Y+12	; 0x0c
    626a:	9b 84       	ldd	r9, Y+11	; 0x0b
    626c:	aa 84       	ldd	r10, Y+10	; 0x0a
    626e:	b9 84       	ldd	r11, Y+9	; 0x09
    6270:	c8 84       	ldd	r12, Y+8	; 0x08
    6272:	df 80       	ldd	r13, Y+7	; 0x07
    6274:	ee 80       	ldd	r14, Y+6	; 0x06
    6276:	fd 80       	ldd	r15, Y+5	; 0x05
    6278:	0c 81       	ldd	r16, Y+4	; 0x04
    627a:	1b 81       	ldd	r17, Y+3	; 0x03
    627c:	aa 81       	ldd	r26, Y+2	; 0x02
    627e:	b9 81       	ldd	r27, Y+1	; 0x01
    6280:	ce 0f       	add	r28, r30
    6282:	d1 1d       	adc	r29, r1
    6284:	0f b6       	in	r0, 0x3f	; 63
    6286:	f8 94       	cli
    6288:	de bf       	out	0x3e, r29	; 62
    628a:	0f be       	out	0x3f, r0	; 63
    628c:	cd bf       	out	0x3d, r28	; 61
    628e:	ed 01       	movw	r28, r26
    6290:	08 95       	ret

00006292 <itoa>:
    6292:	fb 01       	movw	r30, r22
    6294:	9f 01       	movw	r18, r30
    6296:	e8 94       	clt
    6298:	42 30       	cpi	r20, 0x02	; 2
    629a:	c4 f0       	brlt	.+48     	; 0x62cc <itoa+0x3a>
    629c:	45 32       	cpi	r20, 0x25	; 37
    629e:	b4 f4       	brge	.+44     	; 0x62cc <itoa+0x3a>
    62a0:	4a 30       	cpi	r20, 0x0A	; 10
    62a2:	29 f4       	brne	.+10     	; 0x62ae <itoa+0x1c>
    62a4:	97 fb       	bst	r25, 7
    62a6:	1e f4       	brtc	.+6      	; 0x62ae <itoa+0x1c>
    62a8:	90 95       	com	r25
    62aa:	81 95       	neg	r24
    62ac:	9f 4f       	sbci	r25, 0xFF	; 255
    62ae:	64 2f       	mov	r22, r20
    62b0:	77 27       	eor	r23, r23
    62b2:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <__udivmodhi4>
    62b6:	80 5d       	subi	r24, 0xD0	; 208
    62b8:	8a 33       	cpi	r24, 0x3A	; 58
    62ba:	0c f0       	brlt	.+2      	; 0x62be <itoa+0x2c>
    62bc:	89 5d       	subi	r24, 0xD9	; 217
    62be:	81 93       	st	Z+, r24
    62c0:	cb 01       	movw	r24, r22
    62c2:	00 97       	sbiw	r24, 0x00	; 0
    62c4:	a1 f7       	brne	.-24     	; 0x62ae <itoa+0x1c>
    62c6:	16 f4       	brtc	.+4      	; 0x62cc <itoa+0x3a>
    62c8:	5d e2       	ldi	r21, 0x2D	; 45
    62ca:	51 93       	st	Z+, r21
    62cc:	10 82       	st	Z, r1
    62ce:	c9 01       	movw	r24, r18
    62d0:	0c 94 6a 31 	jmp	0x62d4	; 0x62d4 <strrev>

000062d4 <strrev>:
    62d4:	dc 01       	movw	r26, r24
    62d6:	fc 01       	movw	r30, r24
    62d8:	67 2f       	mov	r22, r23
    62da:	71 91       	ld	r23, Z+
    62dc:	77 23       	and	r23, r23
    62de:	e1 f7       	brne	.-8      	; 0x62d8 <strrev+0x4>
    62e0:	32 97       	sbiw	r30, 0x02	; 2
    62e2:	04 c0       	rjmp	.+8      	; 0x62ec <strrev+0x18>
    62e4:	7c 91       	ld	r23, X
    62e6:	6d 93       	st	X+, r22
    62e8:	70 83       	st	Z, r23
    62ea:	62 91       	ld	r22, -Z
    62ec:	ae 17       	cp	r26, r30
    62ee:	bf 07       	cpc	r27, r31
    62f0:	c8 f3       	brcs	.-14     	; 0x62e4 <strrev+0x10>
    62f2:	08 95       	ret

000062f4 <_exit>:
    62f4:	f8 94       	cli

000062f6 <__stop_program>:
    62f6:	ff cf       	rjmp	.-2      	; 0x62f6 <__stop_program>
