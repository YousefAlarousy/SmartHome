
TestAvrProject_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002fae  00003042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800068  00800068  0000304a  2**0
                  ALLOC
  3 .stab         00002f88  00000000  00000000  0000304c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144b  00000000  00000000  00005fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000741f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000755f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000076cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a203  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000afb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b39d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__vector_4>
      14:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__vector_5>
      18:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__vector_6>
      1c:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <__vector_10>
      2c:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 37       	cpi	r26, 0x77	; 119
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ea       	ldi	r30, 0xAE	; 174
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <main>
      8a:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HDCMOTOR_voidStop>:
#include "HDCMOTOR_interface.h"
#include "HDCMOTOR_private.h"


void HDCMOTOR_voidStop()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	MDIO_VoidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN,DIO_PIN_LOW);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	42 e0       	ldi	r20, 0x02	; 2
     b54:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <HDCMOTOR_voidPlay>:
void HDCMOTOR_voidPlay()
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	MDIO_VoidSetPinValue(DCMOTOR_PORT,DCMOTOR_PIN,DIO_PIN_HIGH);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <HLED_voidLedPinState>:
#include "HLED_private.h"



void HLED_voidLedPinState(led_pin_t Copy_u8LedPinStruct,u8 Copy_u8LedPinState)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <HLED_voidLedPinState+0x6>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <HLED_voidLedPinState+0x8>
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <HLED_voidLedPinState+0xa>
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	69 83       	std	Y+1, r22	; 0x01
     b86:	7a 83       	std	Y+2, r23	; 0x02
     b88:	8b 83       	std	Y+3, r24	; 0x03
     b8a:	4c 83       	std	Y+4, r20	; 0x04

	switch(Copy_u8LedPinStruct.LedConnection)
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	3e 83       	std	Y+6, r19	; 0x06
     b94:	2d 83       	std	Y+5, r18	; 0x05
     b96:	8d 81       	ldd	r24, Y+5	; 0x05
     b98:	9e 81       	ldd	r25, Y+6	; 0x06
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	91 05       	cpc	r25, r1
     b9e:	61 f0       	breq	.+24     	; 0xbb8 <HLED_voidLedPinState+0x42>
     ba0:	2d 81       	ldd	r18, Y+5	; 0x05
     ba2:	3e 81       	ldd	r19, Y+6	; 0x06
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	69 f4       	brne	.+26     	; 0xbc4 <HLED_voidLedPinState+0x4e>
	{
	case LED_PIN_SOURCE : MDIO_VoidSetPinValue(Copy_u8LedPinStruct.LedPort,Copy_u8LedPinStruct.LedPin,Copy_u8LedPinState);break ;
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	9b 81       	ldd	r25, Y+3	; 0x03
     bae:	69 2f       	mov	r22, r25
     bb0:	4c 81       	ldd	r20, Y+4	; 0x04
     bb2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <HLED_voidLedPinState+0x4e>
	case LED_PIN_SINK   : MDIO_VoidSetPinValue(Copy_u8LedPinStruct.LedPort,Copy_u8LedPinStruct.LedPin,Copy_u8LedPinState);break ;
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	69 2f       	mov	r22, r25
     bbe:	4c 81       	ldd	r20, Y+4	; 0x04
     bc0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
	default:break;
	}

}
     bc4:	26 96       	adiw	r28, 0x06	; 6
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <HLED_voidLedPortState>:
void HLED_voidLedPortState(led_port_t Copy_u8LedPortStruct,u8 Copy_u8LedPortState)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	00 d0       	rcall	.+0      	; 0xbdc <HLED_voidLedPortState+0x6>
     bdc:	00 d0       	rcall	.+0      	; 0xbde <HLED_voidLedPortState+0x8>
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	6b 83       	std	Y+3, r22	; 0x03

	switch(Copy_u8LedPortStruct.LedConnection)
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	3d 83       	std	Y+5, r19	; 0x05
     bf2:	2c 83       	std	Y+4, r18	; 0x04
     bf4:	8c 81       	ldd	r24, Y+4	; 0x04
     bf6:	9d 81       	ldd	r25, Y+5	; 0x05
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	31 f0       	breq	.+12     	; 0xc0a <HLED_voidLedPortState+0x34>
     bfe:	2c 81       	ldd	r18, Y+4	; 0x04
     c00:	3d 81       	ldd	r19, Y+5	; 0x05
     c02:	24 30       	cpi	r18, 0x04	; 4
     c04:	31 05       	cpc	r19, r1
     c06:	31 f0       	breq	.+12     	; 0xc14 <HLED_voidLedPortState+0x3e>
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <HLED_voidLedPortState+0x46>
	{
	case LED_PORT_SOURCE : MDIO_VoidSetPortValue(Copy_u8LedPortStruct.LedPort,Copy_u8LedPortState);break ;
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	6b 81       	ldd	r22, Y+3	; 0x03
     c0e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <MDIO_VoidSetPortValue>
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <HLED_voidLedPortState+0x46>
	case LED_PORT_SINK   : MDIO_VoidSetPortValue(Copy_u8LedPortStruct.LedPort,Copy_u8LedPortState);break ;
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	6b 81       	ldd	r22, Y+3	; 0x03
     c18:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <MDIO_VoidSetPortValue>
	default:break;
	}


}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <HSERVO_voidSetAngle>:




void HSERVO_voidSetAngle(u8 Copy_u8Angle)
{
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	df 93       	push	r29
     c32:	cf 93       	push	r28
     c34:	00 d0       	rcall	.+0      	; 0xc36 <HSERVO_voidSetAngle+0xa>
     c36:	0f 92       	push	r0
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_DutyCycle ;
	MTIMER1_voidInit(TIMER1_FPWM_NON_INVERTING,TOP_FPWM_ICR1,TIMER1_8_PRESCALER);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	41 e0       	ldi	r20, 0x01	; 1
     c44:	0e 94 1b 11 	call	0x2236	; 0x2236 <MTIMER1_voidInit>
	MTIMER1_voidSetTopValue(20000,TOP_FPWM_ICR1);
     c48:	80 e2       	ldi	r24, 0x20	; 32
     c4a:	9e e4       	ldi	r25, 0x4E	; 78
     c4c:	63 e0       	ldi	r22, 0x03	; 3
     c4e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <MTIMER1_voidSetTopValue>
	Local_DutyCycle=Mapping(2500,700,180,0,Copy_u8Angle);
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	e8 2f       	mov	r30, r24
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	84 ec       	ldi	r24, 0xC4	; 196
     c5a:	99 e0       	ldi	r25, 0x09	; 9
     c5c:	6c eb       	ldi	r22, 0xBC	; 188
     c5e:	72 e0       	ldi	r23, 0x02	; 2
     c60:	44 eb       	ldi	r20, 0xB4	; 180
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	8f 01       	movw	r16, r30
     c6a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Mapping>
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_voidSetDutyCycle(Local_DutyCycle);
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	0e 94 32 13 	call	0x2664	; 0x2664 <MTIMER1_voidSetDutyCycle>
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <Mapping>:

u16 Mapping(u16 X_MAX,u16 X_MIN,u16 Y_MAX,u16 Y_MIN,u16 Y)
{
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	2c 97       	sbiw	r28, 0x0c	; 12
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	9c 83       	std	Y+4, r25	; 0x04
     ca8:	8b 83       	std	Y+3, r24	; 0x03
     caa:	7e 83       	std	Y+6, r23	; 0x06
     cac:	6d 83       	std	Y+5, r22	; 0x05
     cae:	58 87       	std	Y+8, r21	; 0x08
     cb0:	4f 83       	std	Y+7, r20	; 0x07
     cb2:	3a 87       	std	Y+10, r19	; 0x0a
     cb4:	29 87       	std	Y+9, r18	; 0x09
     cb6:	1c 87       	std	Y+12, r17	; 0x0c
     cb8:	0b 87       	std	Y+11, r16	; 0x0b
	u16 X;
	X = ( (  ((u32) (X_MAX - X_MIN) * (Y-Y_MIN) )/ (Y_MAX-Y_MIN) ) + X_MIN);
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	a9 01       	movw	r20, r18
     cc4:	48 1b       	sub	r20, r24
     cc6:	59 0b       	sbc	r21, r25
     cc8:	ca 01       	movw	r24, r20
     cca:	7c 01       	movw	r14, r24
     ccc:	00 e0       	ldi	r16, 0x00	; 0
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	2b 85       	ldd	r18, Y+11	; 0x0b
     cd2:	3c 85       	ldd	r19, Y+12	; 0x0c
     cd4:	89 85       	ldd	r24, Y+9	; 0x09
     cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd8:	a9 01       	movw	r20, r18
     cda:	48 1b       	sub	r20, r24
     cdc:	59 0b       	sbc	r21, r25
     cde:	ca 01       	movw	r24, r20
     ce0:	9c 01       	movw	r18, r24
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	c8 01       	movw	r24, r16
     ce8:	b7 01       	movw	r22, r14
     cea:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__mulsi3>
     cee:	7b 01       	movw	r14, r22
     cf0:	8c 01       	movw	r16, r24
     cf2:	2f 81       	ldd	r18, Y+7	; 0x07
     cf4:	38 85       	ldd	r19, Y+8	; 0x08
     cf6:	89 85       	ldd	r24, Y+9	; 0x09
     cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfa:	a9 01       	movw	r20, r18
     cfc:	48 1b       	sub	r20, r24
     cfe:	59 0b       	sbc	r21, r25
     d00:	ca 01       	movw	r24, r20
     d02:	9c 01       	movw	r18, r24
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	c8 01       	movw	r24, r16
     d0a:	b7 01       	movw	r22, r14
     d0c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__udivmodsi4>
     d10:	da 01       	movw	r26, r20
     d12:	c9 01       	movw	r24, r18
     d14:	9c 01       	movw	r18, r24
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	82 0f       	add	r24, r18
     d1c:	93 1f       	adc	r25, r19
     d1e:	9a 83       	std	Y+2, r25	; 0x02
     d20:	89 83       	std	Y+1, r24	; 0x01

	return X ;
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d26:	2c 96       	adiw	r28, 0x0c	; 12
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <HSSD_voidEnable>:
#include "HSSD_config.h"
#include "HSSD_interface.h"
#include "HSSD_private.h"

void HSSD_voidEnable(u8 Copy_EnablePort,u8 Copy_EnablePin)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <HSSD_voidEnable+0x6>
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	6a 83       	std	Y+2, r22	; 0x02
#if SSD_COMMON_TYPE == SSD_COMMON_KATHODE
	MDIO_VoidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_PIN_LOW);
#elif SSD_COMMON_TYPE==SSD_COMMON_ANODE
	MDIO_VoidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_PIN_HIGH);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	6a 81       	ldd	r22, Y+2	; 0x02
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
#else
#error "Wrong CommonType Configuration"
#endif
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <HSSD_voidDisable>:
void HSSD_voidDisable(u8 Copy_EnablePort,u8 Copy_EnablePin)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <HSSD_voidDisable+0x6>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	6a 83       	std	Y+2, r22	; 0x02
#if SSD_COMMON_TYPE == SSD_COMMON_KATHODE
	MDIO_VoidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_PIN_HIGH);
#elif SSD_COMMON_TYPE==SSD_COMMON_ANODE
	MDIO_VoidSetPinValue(Copy_EnablePort,Copy_EnablePin,DIO_PIN_LOW);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	6a 81       	ldd	r22, Y+2	; 0x02
     d74:	42 e0       	ldi	r20, 0x02	; 2
     d76:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
#else
#error "Wrong CommonType Configuration"
#endif
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <HSSD_voidSendNumber>:
void HSSD_voidSendNumber(u8 Copy_u8Number)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <HSSD_voidSendNumber+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <HSSD_voidSendNumber+0x8>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	8a 83       	std	Y+2, r24	; 0x02
	case 8 : Local_u8Number =0b1111111 ; break ;
	case 9 : Local_u8Number =0b1101111 ; break ;
	}
	MDIO_VoidSetPortValue(SSD_PORT,Local_u8Number);
#elif SSD_COMMON_TYPE==SSD_COMMON_ANODE
	switch(Copy_u8Number)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3c 83       	std	Y+4, r19	; 0x04
     d9a:	2b 83       	std	Y+3, r18	; 0x03
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <HSSD_voidSendNumber+0x24>
     da6:	4b c0       	rjmp	.+150    	; 0xe3e <HSSD_voidSendNumber+0xba>
     da8:	2b 81       	ldd	r18, Y+3	; 0x03
     daa:	3c 81       	ldd	r19, Y+4	; 0x04
     dac:	25 30       	cpi	r18, 0x05	; 5
     dae:	31 05       	cpc	r19, r1
     db0:	d4 f4       	brge	.+52     	; 0xde6 <HSSD_voidSendNumber+0x62>
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	91 05       	cpc	r25, r1
     dba:	c1 f1       	breq	.+112    	; 0xe2c <HSSD_voidSendNumber+0xa8>
     dbc:	2b 81       	ldd	r18, Y+3	; 0x03
     dbe:	3c 81       	ldd	r19, Y+4	; 0x04
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <HSSD_voidSendNumber+0x4c>
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	00 97       	sbiw	r24, 0x00	; 0
     dcc:	61 f1       	breq	.+88     	; 0xe26 <HSSD_voidSendNumber+0xa2>
     dce:	48 c0       	rjmp	.+144    	; 0xe60 <HSSD_voidSendNumber+0xdc>
     dd0:	2b 81       	ldd	r18, Y+3	; 0x03
     dd2:	3c 81       	ldd	r19, Y+4	; 0x04
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	61 f1       	breq	.+88     	; 0xe32 <HSSD_voidSendNumber+0xae>
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	91 05       	cpc	r25, r1
     de2:	51 f1       	breq	.+84     	; 0xe38 <HSSD_voidSendNumber+0xb4>
     de4:	3d c0       	rjmp	.+122    	; 0xe60 <HSSD_voidSendNumber+0xdc>
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	3c 81       	ldd	r19, Y+4	; 0x04
     dea:	27 30       	cpi	r18, 0x07	; 7
     dec:	31 05       	cpc	r19, r1
     dee:	81 f1       	breq	.+96     	; 0xe50 <HSSD_voidSendNumber+0xcc>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	91 05       	cpc	r25, r1
     df8:	5c f4       	brge	.+22     	; 0xe10 <HSSD_voidSendNumber+0x8c>
     dfa:	2b 81       	ldd	r18, Y+3	; 0x03
     dfc:	3c 81       	ldd	r19, Y+4	; 0x04
     dfe:	25 30       	cpi	r18, 0x05	; 5
     e00:	31 05       	cpc	r19, r1
     e02:	01 f1       	breq	.+64     	; 0xe44 <HSSD_voidSendNumber+0xc0>
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	86 30       	cpi	r24, 0x06	; 6
     e0a:	91 05       	cpc	r25, r1
     e0c:	f1 f0       	breq	.+60     	; 0xe4a <HSSD_voidSendNumber+0xc6>
     e0e:	28 c0       	rjmp	.+80     	; 0xe60 <HSSD_voidSendNumber+0xdc>
     e10:	2b 81       	ldd	r18, Y+3	; 0x03
     e12:	3c 81       	ldd	r19, Y+4	; 0x04
     e14:	28 30       	cpi	r18, 0x08	; 8
     e16:	31 05       	cpc	r19, r1
     e18:	f1 f0       	breq	.+60     	; 0xe56 <HSSD_voidSendNumber+0xd2>
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	89 30       	cpi	r24, 0x09	; 9
     e20:	91 05       	cpc	r25, r1
     e22:	e1 f0       	breq	.+56     	; 0xe5c <HSSD_voidSendNumber+0xd8>
     e24:	1d c0       	rjmp	.+58     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	{
	case 0 : Local_u8Number =(0b0111111) ; break ;
     e26:	8f e3       	ldi	r24, 0x3F	; 63
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	1a c0       	rjmp	.+52     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 1 : Local_u8Number =(0b0000110) ; break ;
     e2c:	86 e0       	ldi	r24, 0x06	; 6
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	17 c0       	rjmp	.+46     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 2 : Local_u8Number =(0b1011011) ; break ;
     e32:	8b e5       	ldi	r24, 0x5B	; 91
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	14 c0       	rjmp	.+40     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 3 : Local_u8Number =(0b1001111) ; break ;
     e38:	8f e4       	ldi	r24, 0x4F	; 79
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	11 c0       	rjmp	.+34     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 4 : Local_u8Number =(0b1100110) ; break ;
     e3e:	86 e6       	ldi	r24, 0x66	; 102
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	0e c0       	rjmp	.+28     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 5 : Local_u8Number =(0b1101101) ; break ;
     e44:	8d e6       	ldi	r24, 0x6D	; 109
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	0b c0       	rjmp	.+22     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 6 : Local_u8Number =(0b1111101) ; break ;
     e4a:	8d e7       	ldi	r24, 0x7D	; 125
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 7 : Local_u8Number =(0b0000111) ; break ;
     e50:	87 e0       	ldi	r24, 0x07	; 7
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 8 : Local_u8Number =(0b1111111) ; break ;
     e56:	8f e7       	ldi	r24, 0x7F	; 127
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <HSSD_voidSendNumber+0xdc>
	case 9 : Local_u8Number =(0b1101111) ; break ;
     e5c:	8f e6       	ldi	r24, 0x6F	; 111
     e5e:	89 83       	std	Y+1, r24	; 0x01
	}
	MDIO_VoidSetPortValue(SSD_PORT,~(Local_u8Number));
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	98 2f       	mov	r25, r24
     e64:	90 95       	com	r25
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	69 2f       	mov	r22, r25
     e6a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <MDIO_VoidSetPortValue>
#else
#error "Wrong CommonType Configuration"
#endif
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <HStepperPlay_CCW>:
#include <util/delay.h>



void HStepperPlay_CCW(u16 deg)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	ee 97       	sbiw	r28, 0x3e	; 62
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	9e af       	std	Y+62, r25	; 0x3e
     e92:	8d af       	std	Y+61, r24	; 0x3d
	deg *= 10;
     e94:	8d ad       	ldd	r24, Y+61	; 0x3d
     e96:	9e ad       	ldd	r25, Y+62	; 0x3e
     e98:	9c 01       	movw	r18, r24
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	c9 01       	movw	r24, r18
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	9e af       	std	Y+62, r25	; 0x3e
     eae:	8d af       	std	Y+61, r24	; 0x3d
	deg /= 7 ;
     eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
     eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
     eb4:	27 e0       	ldi	r18, 0x07	; 7
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	b9 01       	movw	r22, r18
     eba:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__udivmodhi4>
     ebe:	cb 01       	movw	r24, r22
     ec0:	9e af       	std	Y+62, r25	; 0x3e
     ec2:	8d af       	std	Y+61, r24	; 0x3d

	for (u32 i=0 ; i < deg ; i++)
     ec4:	19 ae       	std	Y+57, r1	; 0x39
     ec6:	1a ae       	std	Y+58, r1	; 0x3a
     ec8:	1b ae       	std	Y+59, r1	; 0x3b
     eca:	1c ae       	std	Y+60, r1	; 0x3c
     ecc:	23 c2       	rjmp	.+1094   	; 0x1314 <HStepperPlay_CCW+0x498>
	{
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT, STPPER_BLUE_PIN 	, DIO_PIN_HIGH);
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT, STPPER_PINK_PIN 	, DIO_PIN_LOW);
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	42 e0       	ldi	r20, 0x02	; 2
     ede:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT, STPPER_YELLOW_PIN, DIO_PIN_LOW);
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	42 e0       	ldi	r20, 0x02	; 2
     ee8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT, STPPER_ORANGE_PIN, DIO_PIN_LOW);
     eec:	84 e0       	ldi	r24, 0x04	; 4
     eee:	63 e0       	ldi	r22, 0x03	; 3
     ef0:	42 e0       	ldi	r20, 0x02	; 2
     ef2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e4       	ldi	r27, 0x40	; 64
     efe:	8d ab       	std	Y+53, r24	; 0x35
     f00:	9e ab       	std	Y+54, r25	; 0x36
     f02:	af ab       	std	Y+55, r26	; 0x37
     f04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f06:	6d a9       	ldd	r22, Y+53	; 0x35
     f08:	7e a9       	ldd	r23, Y+54	; 0x36
     f0a:	8f a9       	ldd	r24, Y+55	; 0x37
     f0c:	98 ad       	ldd	r25, Y+56	; 0x38
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a ef       	ldi	r20, 0xFA	; 250
     f14:	54 e4       	ldi	r21, 0x44	; 68
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	89 ab       	std	Y+49, r24	; 0x31
     f20:	9a ab       	std	Y+50, r25	; 0x32
     f22:	ab ab       	std	Y+51, r26	; 0x33
     f24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f26:	69 a9       	ldd	r22, Y+49	; 0x31
     f28:	7a a9       	ldd	r23, Y+50	; 0x32
     f2a:	8b a9       	ldd	r24, Y+51	; 0x33
     f2c:	9c a9       	ldd	r25, Y+52	; 0x34
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <HStepperPlay_CCW+0xcc>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	98 ab       	std	Y+48, r25	; 0x30
     f44:	8f a7       	std	Y+47, r24	; 0x2f
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <HStepperPlay_CCW+0x14a>
	else if (__tmp > 65535)
     f48:	69 a9       	ldd	r22, Y+49	; 0x31
     f4a:	7a a9       	ldd	r23, Y+50	; 0x32
     f4c:	8b a9       	ldd	r24, Y+51	; 0x33
     f4e:	9c a9       	ldd	r25, Y+52	; 0x34
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <HStepperPlay_CCW+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6d a9       	ldd	r22, Y+53	; 0x35
     f62:	7e a9       	ldd	r23, Y+54	; 0x36
     f64:	8f a9       	ldd	r24, Y+55	; 0x37
     f66:	98 ad       	ldd	r25, Y+56	; 0x38
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	98 ab       	std	Y+48, r25	; 0x30
     f86:	8f a7       	std	Y+47, r24	; 0x2f
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <HStepperPlay_CCW+0x12c>
     f8a:	88 ec       	ldi	r24, 0xC8	; 200
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9e a7       	std	Y+46, r25	; 0x2e
     f90:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f92:	8d a5       	ldd	r24, Y+45	; 0x2d
     f94:	9e a5       	ldd	r25, Y+46	; 0x2e
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <HStepperPlay_CCW+0x11a>
     f9a:	9e a7       	std	Y+46, r25	; 0x2e
     f9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     fa0:	98 a9       	ldd	r25, Y+48	; 0x30
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	98 ab       	std	Y+48, r25	; 0x30
     fa6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
     faa:	98 a9       	ldd	r25, Y+48	; 0x30
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	69 f7       	brne	.-38     	; 0xf8a <HStepperPlay_CCW+0x10e>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <HStepperPlay_CCW+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	69 a9       	ldd	r22, Y+49	; 0x31
     fb4:	7a a9       	ldd	r23, Y+50	; 0x32
     fb6:	8b a9       	ldd	r24, Y+51	; 0x33
     fb8:	9c a9       	ldd	r25, Y+52	; 0x34
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	98 ab       	std	Y+48, r25	; 0x30
     fc4:	8f a7       	std	Y+47, r24	; 0x2f
     fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fc8:	98 a9       	ldd	r25, Y+48	; 0x30
     fca:	9c a7       	std	Y+44, r25	; 0x2c
     fcc:	8b a7       	std	Y+43, r24	; 0x2b
     fce:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd0:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <HStepperPlay_CCW+0x156>
     fd6:	9c a7       	std	Y+44, r25	; 0x2c
     fd8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT, STPPER_BLUE_PIN 	, DIO_PIN_LOW);
     fda:	84 e0       	ldi	r24, 0x04	; 4
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	42 e0       	ldi	r20, 0x02	; 2
     fe0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT, STPPER_PINK_PIN 	, DIO_PIN_HIGH);
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT, STPPER_YELLOW_PIN, DIO_PIN_LOW);
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	62 e0       	ldi	r22, 0x02	; 2
     ff2:	42 e0       	ldi	r20, 0x02	; 2
     ff4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT, STPPER_ORANGE_PIN, DIO_PIN_LOW);
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	63 e0       	ldi	r22, 0x03	; 3
     ffc:	42 e0       	ldi	r20, 0x02	; 2
     ffe:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e4       	ldi	r27, 0x40	; 64
    100a:	8f a3       	std	Y+39, r24	; 0x27
    100c:	98 a7       	std	Y+40, r25	; 0x28
    100e:	a9 a7       	std	Y+41, r26	; 0x29
    1010:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1012:	6f a1       	ldd	r22, Y+39	; 0x27
    1014:	78 a5       	ldd	r23, Y+40	; 0x28
    1016:	89 a5       	ldd	r24, Y+41	; 0x29
    1018:	9a a5       	ldd	r25, Y+42	; 0x2a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4a ef       	ldi	r20, 0xFA	; 250
    1020:	54 e4       	ldi	r21, 0x44	; 68
    1022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	8b a3       	std	Y+35, r24	; 0x23
    102c:	9c a3       	std	Y+36, r25	; 0x24
    102e:	ad a3       	std	Y+37, r26	; 0x25
    1030:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1032:	6b a1       	ldd	r22, Y+35	; 0x23
    1034:	7c a1       	ldd	r23, Y+36	; 0x24
    1036:	8d a1       	ldd	r24, Y+37	; 0x25
    1038:	9e a1       	ldd	r25, Y+38	; 0x26
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e8       	ldi	r20, 0x80	; 128
    1040:	5f e3       	ldi	r21, 0x3F	; 63
    1042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1046:	88 23       	and	r24, r24
    1048:	2c f4       	brge	.+10     	; 0x1054 <HStepperPlay_CCW+0x1d8>
		__ticks = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9a a3       	std	Y+34, r25	; 0x22
    1050:	89 a3       	std	Y+33, r24	; 0x21
    1052:	3f c0       	rjmp	.+126    	; 0x10d2 <HStepperPlay_CCW+0x256>
	else if (__tmp > 65535)
    1054:	6b a1       	ldd	r22, Y+35	; 0x23
    1056:	7c a1       	ldd	r23, Y+36	; 0x24
    1058:	8d a1       	ldd	r24, Y+37	; 0x25
    105a:	9e a1       	ldd	r25, Y+38	; 0x26
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	3f ef       	ldi	r19, 0xFF	; 255
    1060:	4f e7       	ldi	r20, 0x7F	; 127
    1062:	57 e4       	ldi	r21, 0x47	; 71
    1064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1068:	18 16       	cp	r1, r24
    106a:	4c f5       	brge	.+82     	; 0x10be <HStepperPlay_CCW+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	6f a1       	ldd	r22, Y+39	; 0x27
    106e:	78 a5       	ldd	r23, Y+40	; 0x28
    1070:	89 a5       	ldd	r24, Y+41	; 0x29
    1072:	9a a5       	ldd	r25, Y+42	; 0x2a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e2       	ldi	r20, 0x20	; 32
    107a:	51 e4       	ldi	r21, 0x41	; 65
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9a a3       	std	Y+34, r25	; 0x22
    1092:	89 a3       	std	Y+33, r24	; 0x21
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <HStepperPlay_CCW+0x238>
    1096:	88 ec       	ldi	r24, 0xC8	; 200
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	98 a3       	std	Y+32, r25	; 0x20
    109c:	8f 8f       	std	Y+31, r24	; 0x1f
    109e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a0:	98 a1       	ldd	r25, Y+32	; 0x20
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f1 f7       	brne	.-4      	; 0x10a2 <HStepperPlay_CCW+0x226>
    10a6:	98 a3       	std	Y+32, r25	; 0x20
    10a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10aa:	89 a1       	ldd	r24, Y+33	; 0x21
    10ac:	9a a1       	ldd	r25, Y+34	; 0x22
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	9a a3       	std	Y+34, r25	; 0x22
    10b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b4:	89 a1       	ldd	r24, Y+33	; 0x21
    10b6:	9a a1       	ldd	r25, Y+34	; 0x22
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	69 f7       	brne	.-38     	; 0x1096 <HStepperPlay_CCW+0x21a>
    10bc:	14 c0       	rjmp	.+40     	; 0x10e6 <HStepperPlay_CCW+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10be:	6b a1       	ldd	r22, Y+35	; 0x23
    10c0:	7c a1       	ldd	r23, Y+36	; 0x24
    10c2:	8d a1       	ldd	r24, Y+37	; 0x25
    10c4:	9e a1       	ldd	r25, Y+38	; 0x26
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9a a3       	std	Y+34, r25	; 0x22
    10d0:	89 a3       	std	Y+33, r24	; 0x21
    10d2:	89 a1       	ldd	r24, Y+33	; 0x21
    10d4:	9a a1       	ldd	r25, Y+34	; 0x22
    10d6:	9e 8f       	std	Y+30, r25	; 0x1e
    10d8:	8d 8f       	std	Y+29, r24	; 0x1d
    10da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <HStepperPlay_CCW+0x262>
    10e2:	9e 8f       	std	Y+30, r25	; 0x1e
    10e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT, STPPER_BLUE_PIN 	, DIO_PIN_LOW);
    10e6:	84 e0       	ldi	r24, 0x04	; 4
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	42 e0       	ldi	r20, 0x02	; 2
    10ec:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT, STPPER_PINK_PIN 	, DIO_PIN_LOW);
    10f0:	84 e0       	ldi	r24, 0x04	; 4
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	42 e0       	ldi	r20, 0x02	; 2
    10f6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT, STPPER_YELLOW_PIN, DIO_PIN_HIGH);
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	62 e0       	ldi	r22, 0x02	; 2
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT, STPPER_ORANGE_PIN, DIO_PIN_LOW);
    1104:	84 e0       	ldi	r24, 0x04	; 4
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	42 e0       	ldi	r20, 0x02	; 2
    110a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e4       	ldi	r27, 0x40	; 64
    1116:	89 8f       	std	Y+25, r24	; 0x19
    1118:	9a 8f       	std	Y+26, r25	; 0x1a
    111a:	ab 8f       	std	Y+27, r26	; 0x1b
    111c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111e:	69 8d       	ldd	r22, Y+25	; 0x19
    1120:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1122:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1124:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	4a ef       	ldi	r20, 0xFA	; 250
    112c:	54 e4       	ldi	r21, 0x44	; 68
    112e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	8d 8b       	std	Y+21, r24	; 0x15
    1138:	9e 8b       	std	Y+22, r25	; 0x16
    113a:	af 8b       	std	Y+23, r26	; 0x17
    113c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    113e:	6d 89       	ldd	r22, Y+21	; 0x15
    1140:	7e 89       	ldd	r23, Y+22	; 0x16
    1142:	8f 89       	ldd	r24, Y+23	; 0x17
    1144:	98 8d       	ldd	r25, Y+24	; 0x18
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e8       	ldi	r20, 0x80	; 128
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1152:	88 23       	and	r24, r24
    1154:	2c f4       	brge	.+10     	; 0x1160 <HStepperPlay_CCW+0x2e4>
		__ticks = 1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	9c 8b       	std	Y+20, r25	; 0x14
    115c:	8b 8b       	std	Y+19, r24	; 0x13
    115e:	3f c0       	rjmp	.+126    	; 0x11de <HStepperPlay_CCW+0x362>
	else if (__tmp > 65535)
    1160:	6d 89       	ldd	r22, Y+21	; 0x15
    1162:	7e 89       	ldd	r23, Y+22	; 0x16
    1164:	8f 89       	ldd	r24, Y+23	; 0x17
    1166:	98 8d       	ldd	r25, Y+24	; 0x18
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	3f ef       	ldi	r19, 0xFF	; 255
    116c:	4f e7       	ldi	r20, 0x7F	; 127
    116e:	57 e4       	ldi	r21, 0x47	; 71
    1170:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1174:	18 16       	cp	r1, r24
    1176:	4c f5       	brge	.+82     	; 0x11ca <HStepperPlay_CCW+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1178:	69 8d       	ldd	r22, Y+25	; 0x19
    117a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    117c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e2       	ldi	r20, 0x20	; 32
    1186:	51 e4       	ldi	r21, 0x41	; 65
    1188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	9c 8b       	std	Y+20, r25	; 0x14
    119e:	8b 8b       	std	Y+19, r24	; 0x13
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <HStepperPlay_CCW+0x344>
    11a2:	88 ec       	ldi	r24, 0xC8	; 200
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9a 8b       	std	Y+18, r25	; 0x12
    11a8:	89 8b       	std	Y+17, r24	; 0x11
    11aa:	89 89       	ldd	r24, Y+17	; 0x11
    11ac:	9a 89       	ldd	r25, Y+18	; 0x12
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <HStepperPlay_CCW+0x332>
    11b2:	9a 8b       	std	Y+18, r25	; 0x12
    11b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b6:	8b 89       	ldd	r24, Y+19	; 0x13
    11b8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 8b       	std	Y+20, r25	; 0x14
    11be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c0:	8b 89       	ldd	r24, Y+19	; 0x13
    11c2:	9c 89       	ldd	r25, Y+20	; 0x14
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	69 f7       	brne	.-38     	; 0x11a2 <HStepperPlay_CCW+0x326>
    11c8:	14 c0       	rjmp	.+40     	; 0x11f2 <HStepperPlay_CCW+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ca:	6d 89       	ldd	r22, Y+21	; 0x15
    11cc:	7e 89       	ldd	r23, Y+22	; 0x16
    11ce:	8f 89       	ldd	r24, Y+23	; 0x17
    11d0:	98 8d       	ldd	r25, Y+24	; 0x18
    11d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	9c 8b       	std	Y+20, r25	; 0x14
    11dc:	8b 8b       	std	Y+19, r24	; 0x13
    11de:	8b 89       	ldd	r24, Y+19	; 0x13
    11e0:	9c 89       	ldd	r25, Y+20	; 0x14
    11e2:	98 8b       	std	Y+16, r25	; 0x10
    11e4:	8f 87       	std	Y+15, r24	; 0x0f
    11e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e8:	98 89       	ldd	r25, Y+16	; 0x10
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <HStepperPlay_CCW+0x36e>
    11ee:	98 8b       	std	Y+16, r25	; 0x10
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT, STPPER_BLUE_PIN 	, DIO_PIN_LOW);
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	42 e0       	ldi	r20, 0x02	; 2
    11f8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT, STPPER_PINK_PIN 	, DIO_PIN_LOW);
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	42 e0       	ldi	r20, 0x02	; 2
    1202:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT, STPPER_YELLOW_PIN, DIO_PIN_LOW);
    1206:	84 e0       	ldi	r24, 0x04	; 4
    1208:	62 e0       	ldi	r22, 0x02	; 2
    120a:	42 e0       	ldi	r20, 0x02	; 2
    120c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT, STPPER_ORANGE_PIN, DIO_PIN_HIGH);
    1210:	84 e0       	ldi	r24, 0x04	; 4
    1212:	63 e0       	ldi	r22, 0x03	; 3
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b0 e4       	ldi	r27, 0x40	; 64
    1222:	8b 87       	std	Y+11, r24	; 0x0b
    1224:	9c 87       	std	Y+12, r25	; 0x0c
    1226:	ad 87       	std	Y+13, r26	; 0x0d
    1228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122a:	6b 85       	ldd	r22, Y+11	; 0x0b
    122c:	7c 85       	ldd	r23, Y+12	; 0x0c
    122e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1230:	9e 85       	ldd	r25, Y+14	; 0x0e
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a ef       	ldi	r20, 0xFA	; 250
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8f 83       	std	Y+7, r24	; 0x07
    1244:	98 87       	std	Y+8, r25	; 0x08
    1246:	a9 87       	std	Y+9, r26	; 0x09
    1248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <HStepperPlay_CCW+0x3f0>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <HStepperPlay_CCW+0x46e>
	else if (__tmp > 65535)
    126c:	6f 81       	ldd	r22, Y+7	; 0x07
    126e:	78 85       	ldd	r23, Y+8	; 0x08
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1280:	18 16       	cp	r1, r24
    1282:	4c f5       	brge	.+82     	; 0x12d6 <HStepperPlay_CCW+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <HStepperPlay_CCW+0x450>
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 83       	std	Y+4, r25	; 0x04
    12b4:	8b 83       	std	Y+3, r24	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <HStepperPlay_CCW+0x43e>
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	69 f7       	brne	.-38     	; 0x12ae <HStepperPlay_CCW+0x432>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <HStepperPlay_CCW+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	6f 81       	ldd	r22, Y+7	; 0x07
    12d8:	78 85       	ldd	r23, Y+8	; 0x08
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <HStepperPlay_CCW+0x47a>
    12fa:	9a 83       	std	Y+2, r25	; 0x02
    12fc:	89 83       	std	Y+1, r24	; 0x01
void HStepperPlay_CCW(u16 deg)
{
	deg *= 10;
	deg /= 7 ;

	for (u32 i=0 ; i < deg ; i++)
    12fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1300:	9a ad       	ldd	r25, Y+58	; 0x3a
    1302:	ab ad       	ldd	r26, Y+59	; 0x3b
    1304:	bc ad       	ldd	r27, Y+60	; 0x3c
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	a1 1d       	adc	r26, r1
    130a:	b1 1d       	adc	r27, r1
    130c:	89 af       	std	Y+57, r24	; 0x39
    130e:	9a af       	std	Y+58, r25	; 0x3a
    1310:	ab af       	std	Y+59, r26	; 0x3b
    1312:	bc af       	std	Y+60, r27	; 0x3c
    1314:	8d ad       	ldd	r24, Y+61	; 0x3d
    1316:	9e ad       	ldd	r25, Y+62	; 0x3e
    1318:	9c 01       	movw	r18, r24
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	89 ad       	ldd	r24, Y+57	; 0x39
    1320:	9a ad       	ldd	r25, Y+58	; 0x3a
    1322:	ab ad       	ldd	r26, Y+59	; 0x3b
    1324:	bc ad       	ldd	r27, Y+60	; 0x3c
    1326:	82 17       	cp	r24, r18
    1328:	93 07       	cpc	r25, r19
    132a:	a4 07       	cpc	r26, r20
    132c:	b5 07       	cpc	r27, r21
    132e:	08 f4       	brcc	.+2      	; 0x1332 <HStepperPlay_CCW+0x4b6>
    1330:	ce cd       	rjmp	.-1124   	; 0xece <HStepperPlay_CCW+0x52>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT, STPPER_PINK_PIN 	, DIO_PIN_LOW);
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT, STPPER_YELLOW_PIN, DIO_PIN_LOW);
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT, STPPER_ORANGE_PIN, DIO_PIN_HIGH);
		_delay_ms(2);
	}
}
    1332:	ee 96       	adiw	r28, 0x3e	; 62
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <HStepperPlay_CW>:
void HStepperPlay_CW(u16 deg)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	ee 97       	sbiw	r28, 0x3e	; 62
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	9e af       	std	Y+62, r25	; 0x3e
    135a:	8d af       	std	Y+61, r24	; 0x3d

	deg *= 10;
    135c:	8d ad       	ldd	r24, Y+61	; 0x3d
    135e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1360:	9c 01       	movw	r18, r24
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	c9 01       	movw	r24, r18
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	82 0f       	add	r24, r18
    1372:	93 1f       	adc	r25, r19
    1374:	9e af       	std	Y+62, r25	; 0x3e
    1376:	8d af       	std	Y+61, r24	; 0x3d
	deg /= 7 ;
    1378:	8d ad       	ldd	r24, Y+61	; 0x3d
    137a:	9e ad       	ldd	r25, Y+62	; 0x3e
    137c:	27 e0       	ldi	r18, 0x07	; 7
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	b9 01       	movw	r22, r18
    1382:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__udivmodhi4>
    1386:	cb 01       	movw	r24, r22
    1388:	9e af       	std	Y+62, r25	; 0x3e
    138a:	8d af       	std	Y+61, r24	; 0x3d

	for (u32 i=0 ; i < deg ; i++)
    138c:	19 ae       	std	Y+57, r1	; 0x39
    138e:	1a ae       	std	Y+58, r1	; 0x3a
    1390:	1b ae       	std	Y+59, r1	; 0x3b
    1392:	1c ae       	std	Y+60, r1	; 0x3c
    1394:	23 c2       	rjmp	.+1094   	; 0x17dc <HStepperPlay_CW+0x498>
	{
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT,STPPER_ORANGE_PIN,DIO_PIN_HIGH);
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	63 e0       	ldi	r22, 0x03	; 3
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT,STPPER_YELLOW_PIN,DIO_PIN_LOW);
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	62 e0       	ldi	r22, 0x02	; 2
    13a4:	42 e0       	ldi	r20, 0x02	; 2
    13a6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT,STPPER_PINK_PIN,DIO_PIN_LOW);
    13aa:	84 e0       	ldi	r24, 0x04	; 4
    13ac:	61 e0       	ldi	r22, 0x01	; 1
    13ae:	42 e0       	ldi	r20, 0x02	; 2
    13b0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT,STPPER_BLUE_PIN,DIO_PIN_LOW);
    13b4:	84 e0       	ldi	r24, 0x04	; 4
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	42 e0       	ldi	r20, 0x02	; 2
    13ba:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e4       	ldi	r27, 0x40	; 64
    13c6:	8d ab       	std	Y+53, r24	; 0x35
    13c8:	9e ab       	std	Y+54, r25	; 0x36
    13ca:	af ab       	std	Y+55, r26	; 0x37
    13cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ce:	6d a9       	ldd	r22, Y+53	; 0x35
    13d0:	7e a9       	ldd	r23, Y+54	; 0x36
    13d2:	8f a9       	ldd	r24, Y+55	; 0x37
    13d4:	98 ad       	ldd	r25, Y+56	; 0x38
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	4a ef       	ldi	r20, 0xFA	; 250
    13dc:	54 e4       	ldi	r21, 0x44	; 68
    13de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	89 ab       	std	Y+49, r24	; 0x31
    13e8:	9a ab       	std	Y+50, r25	; 0x32
    13ea:	ab ab       	std	Y+51, r26	; 0x33
    13ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ee:	69 a9       	ldd	r22, Y+49	; 0x31
    13f0:	7a a9       	ldd	r23, Y+50	; 0x32
    13f2:	8b a9       	ldd	r24, Y+51	; 0x33
    13f4:	9c a9       	ldd	r25, Y+52	; 0x34
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1402:	88 23       	and	r24, r24
    1404:	2c f4       	brge	.+10     	; 0x1410 <HStepperPlay_CW+0xcc>
		__ticks = 1;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	98 ab       	std	Y+48, r25	; 0x30
    140c:	8f a7       	std	Y+47, r24	; 0x2f
    140e:	3f c0       	rjmp	.+126    	; 0x148e <HStepperPlay_CW+0x14a>
	else if (__tmp > 65535)
    1410:	69 a9       	ldd	r22, Y+49	; 0x31
    1412:	7a a9       	ldd	r23, Y+50	; 0x32
    1414:	8b a9       	ldd	r24, Y+51	; 0x33
    1416:	9c a9       	ldd	r25, Y+52	; 0x34
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	3f ef       	ldi	r19, 0xFF	; 255
    141c:	4f e7       	ldi	r20, 0x7F	; 127
    141e:	57 e4       	ldi	r21, 0x47	; 71
    1420:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1424:	18 16       	cp	r1, r24
    1426:	4c f5       	brge	.+82     	; 0x147a <HStepperPlay_CW+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1428:	6d a9       	ldd	r22, Y+53	; 0x35
    142a:	7e a9       	ldd	r23, Y+54	; 0x36
    142c:	8f a9       	ldd	r24, Y+55	; 0x37
    142e:	98 ad       	ldd	r25, Y+56	; 0x38
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	98 ab       	std	Y+48, r25	; 0x30
    144e:	8f a7       	std	Y+47, r24	; 0x2f
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <HStepperPlay_CW+0x12c>
    1452:	88 ec       	ldi	r24, 0xC8	; 200
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9e a7       	std	Y+46, r25	; 0x2e
    1458:	8d a7       	std	Y+45, r24	; 0x2d
    145a:	8d a5       	ldd	r24, Y+45	; 0x2d
    145c:	9e a5       	ldd	r25, Y+46	; 0x2e
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <HStepperPlay_CW+0x11a>
    1462:	9e a7       	std	Y+46, r25	; 0x2e
    1464:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1466:	8f a5       	ldd	r24, Y+47	; 0x2f
    1468:	98 a9       	ldd	r25, Y+48	; 0x30
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	98 ab       	std	Y+48, r25	; 0x30
    146e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1470:	8f a5       	ldd	r24, Y+47	; 0x2f
    1472:	98 a9       	ldd	r25, Y+48	; 0x30
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	69 f7       	brne	.-38     	; 0x1452 <HStepperPlay_CW+0x10e>
    1478:	14 c0       	rjmp	.+40     	; 0x14a2 <HStepperPlay_CW+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147a:	69 a9       	ldd	r22, Y+49	; 0x31
    147c:	7a a9       	ldd	r23, Y+50	; 0x32
    147e:	8b a9       	ldd	r24, Y+51	; 0x33
    1480:	9c a9       	ldd	r25, Y+52	; 0x34
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	98 ab       	std	Y+48, r25	; 0x30
    148c:	8f a7       	std	Y+47, r24	; 0x2f
    148e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1490:	98 a9       	ldd	r25, Y+48	; 0x30
    1492:	9c a7       	std	Y+44, r25	; 0x2c
    1494:	8b a7       	std	Y+43, r24	; 0x2b
    1496:	8b a5       	ldd	r24, Y+43	; 0x2b
    1498:	9c a5       	ldd	r25, Y+44	; 0x2c
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <HStepperPlay_CW+0x156>
    149e:	9c a7       	std	Y+44, r25	; 0x2c
    14a0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT,STPPER_ORANGE_PIN,DIO_PIN_LOW);
    14a2:	84 e0       	ldi	r24, 0x04	; 4
    14a4:	63 e0       	ldi	r22, 0x03	; 3
    14a6:	42 e0       	ldi	r20, 0x02	; 2
    14a8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT,STPPER_YELLOW_PIN,DIO_PIN_HIGH);
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	62 e0       	ldi	r22, 0x02	; 2
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT,STPPER_PINK_PIN, DIO_PIN_LOW);
    14b6:	84 e0       	ldi	r24, 0x04	; 4
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	42 e0       	ldi	r20, 0x02	; 2
    14bc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT,STPPER_BLUE_PIN, DIO_PIN_LOW);
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	42 e0       	ldi	r20, 0x02	; 2
    14c6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 e0       	ldi	r26, 0x00	; 0
    14d0:	b0 e4       	ldi	r27, 0x40	; 64
    14d2:	8f a3       	std	Y+39, r24	; 0x27
    14d4:	98 a7       	std	Y+40, r25	; 0x28
    14d6:	a9 a7       	std	Y+41, r26	; 0x29
    14d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6f a1       	ldd	r22, Y+39	; 0x27
    14dc:	78 a5       	ldd	r23, Y+40	; 0x28
    14de:	89 a5       	ldd	r24, Y+41	; 0x29
    14e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a ef       	ldi	r20, 0xFA	; 250
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8b a3       	std	Y+35, r24	; 0x23
    14f4:	9c a3       	std	Y+36, r25	; 0x24
    14f6:	ad a3       	std	Y+37, r26	; 0x25
    14f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14fa:	6b a1       	ldd	r22, Y+35	; 0x23
    14fc:	7c a1       	ldd	r23, Y+36	; 0x24
    14fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1500:	9e a1       	ldd	r25, Y+38	; 0x26
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <HStepperPlay_CW+0x1d8>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9a a3       	std	Y+34, r25	; 0x22
    1518:	89 a3       	std	Y+33, r24	; 0x21
    151a:	3f c0       	rjmp	.+126    	; 0x159a <HStepperPlay_CW+0x256>
	else if (__tmp > 65535)
    151c:	6b a1       	ldd	r22, Y+35	; 0x23
    151e:	7c a1       	ldd	r23, Y+36	; 0x24
    1520:	8d a1       	ldd	r24, Y+37	; 0x25
    1522:	9e a1       	ldd	r25, Y+38	; 0x26
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <HStepperPlay_CW+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	6f a1       	ldd	r22, Y+39	; 0x27
    1536:	78 a5       	ldd	r23, Y+40	; 0x28
    1538:	89 a5       	ldd	r24, Y+41	; 0x29
    153a:	9a a5       	ldd	r25, Y+42	; 0x2a
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9a a3       	std	Y+34, r25	; 0x22
    155a:	89 a3       	std	Y+33, r24	; 0x21
    155c:	0f c0       	rjmp	.+30     	; 0x157c <HStepperPlay_CW+0x238>
    155e:	88 ec       	ldi	r24, 0xC8	; 200
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	98 a3       	std	Y+32, r25	; 0x20
    1564:	8f 8f       	std	Y+31, r24	; 0x1f
    1566:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1568:	98 a1       	ldd	r25, Y+32	; 0x20
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <HStepperPlay_CW+0x226>
    156e:	98 a3       	std	Y+32, r25	; 0x20
    1570:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	89 a1       	ldd	r24, Y+33	; 0x21
    1574:	9a a1       	ldd	r25, Y+34	; 0x22
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9a a3       	std	Y+34, r25	; 0x22
    157a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	89 a1       	ldd	r24, Y+33	; 0x21
    157e:	9a a1       	ldd	r25, Y+34	; 0x22
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <HStepperPlay_CW+0x21a>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <HStepperPlay_CW+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6b a1       	ldd	r22, Y+35	; 0x23
    1588:	7c a1       	ldd	r23, Y+36	; 0x24
    158a:	8d a1       	ldd	r24, Y+37	; 0x25
    158c:	9e a1       	ldd	r25, Y+38	; 0x26
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9a a3       	std	Y+34, r25	; 0x22
    1598:	89 a3       	std	Y+33, r24	; 0x21
    159a:	89 a1       	ldd	r24, Y+33	; 0x21
    159c:	9a a1       	ldd	r25, Y+34	; 0x22
    159e:	9e 8f       	std	Y+30, r25	; 0x1e
    15a0:	8d 8f       	std	Y+29, r24	; 0x1d
    15a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <HStepperPlay_CW+0x262>
    15aa:	9e 8f       	std	Y+30, r25	; 0x1e
    15ac:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT,STPPER_ORANGE_PIN,DIO_PIN_LOW);
    15ae:	84 e0       	ldi	r24, 0x04	; 4
    15b0:	63 e0       	ldi	r22, 0x03	; 3
    15b2:	42 e0       	ldi	r20, 0x02	; 2
    15b4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT,STPPER_YELLOW_PIN,DIO_PIN_LOW);
    15b8:	84 e0       	ldi	r24, 0x04	; 4
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	42 e0       	ldi	r20, 0x02	; 2
    15be:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT,STPPER_PINK_PIN,DIO_PIN_HIGH);
    15c2:	84 e0       	ldi	r24, 0x04	; 4
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT,STPPER_BLUE_PIN,DIO_PIN_LOW);
    15cc:	84 e0       	ldi	r24, 0x04	; 4
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	42 e0       	ldi	r20, 0x02	; 2
    15d2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e4       	ldi	r27, 0x40	; 64
    15de:	89 8f       	std	Y+25, r24	; 0x19
    15e0:	9a 8f       	std	Y+26, r25	; 0x1a
    15e2:	ab 8f       	std	Y+27, r26	; 0x1b
    15e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	69 8d       	ldd	r22, Y+25	; 0x19
    15e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a ef       	ldi	r20, 0xFA	; 250
    15f4:	54 e4       	ldi	r21, 0x44	; 68
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8d 8b       	std	Y+21, r24	; 0x15
    1600:	9e 8b       	std	Y+22, r25	; 0x16
    1602:	af 8b       	std	Y+23, r26	; 0x17
    1604:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1606:	6d 89       	ldd	r22, Y+21	; 0x15
    1608:	7e 89       	ldd	r23, Y+22	; 0x16
    160a:	8f 89       	ldd	r24, Y+23	; 0x17
    160c:	98 8d       	ldd	r25, Y+24	; 0x18
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	2c f4       	brge	.+10     	; 0x1628 <HStepperPlay_CW+0x2e4>
		__ticks = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9c 8b       	std	Y+20, r25	; 0x14
    1624:	8b 8b       	std	Y+19, r24	; 0x13
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <HStepperPlay_CW+0x362>
	else if (__tmp > 65535)
    1628:	6d 89       	ldd	r22, Y+21	; 0x15
    162a:	7e 89       	ldd	r23, Y+22	; 0x16
    162c:	8f 89       	ldd	r24, Y+23	; 0x17
    162e:	98 8d       	ldd	r25, Y+24	; 0x18
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f5       	brge	.+82     	; 0x1692 <HStepperPlay_CW+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	69 8d       	ldd	r22, Y+25	; 0x19
    1642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	9c 8b       	std	Y+20, r25	; 0x14
    1666:	8b 8b       	std	Y+19, r24	; 0x13
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <HStepperPlay_CW+0x344>
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9a 8b       	std	Y+18, r25	; 0x12
    1670:	89 8b       	std	Y+17, r24	; 0x11
    1672:	89 89       	ldd	r24, Y+17	; 0x11
    1674:	9a 89       	ldd	r25, Y+18	; 0x12
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <HStepperPlay_CW+0x332>
    167a:	9a 8b       	std	Y+18, r25	; 0x12
    167c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	8b 89       	ldd	r24, Y+19	; 0x13
    1680:	9c 89       	ldd	r25, Y+20	; 0x14
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	9c 8b       	std	Y+20, r25	; 0x14
    1686:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	8b 89       	ldd	r24, Y+19	; 0x13
    168a:	9c 89       	ldd	r25, Y+20	; 0x14
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f7       	brne	.-38     	; 0x166a <HStepperPlay_CW+0x326>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <HStepperPlay_CW+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	6d 89       	ldd	r22, Y+21	; 0x15
    1694:	7e 89       	ldd	r23, Y+22	; 0x16
    1696:	8f 89       	ldd	r24, Y+23	; 0x17
    1698:	98 8d       	ldd	r25, Y+24	; 0x18
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9c 8b       	std	Y+20, r25	; 0x14
    16a4:	8b 8b       	std	Y+19, r24	; 0x13
    16a6:	8b 89       	ldd	r24, Y+19	; 0x13
    16a8:	9c 89       	ldd	r25, Y+20	; 0x14
    16aa:	98 8b       	std	Y+16, r25	; 0x10
    16ac:	8f 87       	std	Y+15, r24	; 0x0f
    16ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b0:	98 89       	ldd	r25, Y+16	; 0x10
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <HStepperPlay_CW+0x36e>
    16b6:	98 8b       	std	Y+16, r25	; 0x10
    16b8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_VoidSetPinValue(STPPER_ORANGE_PORT,STPPER_ORANGE_PIN,DIO_PIN_LOW);
    16ba:	84 e0       	ldi	r24, 0x04	; 4
    16bc:	63 e0       	ldi	r22, 0x03	; 3
    16be:	42 e0       	ldi	r20, 0x02	; 2
    16c0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT,STPPER_PINK_PIN,DIO_PIN_LOW);
    16c4:	84 e0       	ldi	r24, 0x04	; 4
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	42 e0       	ldi	r20, 0x02	; 2
    16ca:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_PINK_PORT,STPPER_PINK_PIN,DIO_PIN_LOW);
    16ce:	84 e0       	ldi	r24, 0x04	; 4
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	42 e0       	ldi	r20, 0x02	; 2
    16d4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT,STPPER_BLUE_PIN,DIO_PIN_HIGH);
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MDIO_VoidSetPinValue>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e4       	ldi	r27, 0x40	; 64
    16ea:	8b 87       	std	Y+11, r24	; 0x0b
    16ec:	9c 87       	std	Y+12, r25	; 0x0c
    16ee:	ad 87       	std	Y+13, r26	; 0x0d
    16f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a ef       	ldi	r20, 0xFA	; 250
    1700:	54 e4       	ldi	r21, 0x44	; 68
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8f 83       	std	Y+7, r24	; 0x07
    170c:	98 87       	std	Y+8, r25	; 0x08
    170e:	a9 87       	std	Y+9, r26	; 0x09
    1710:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	5f e3       	ldi	r21, 0x3F	; 63
    1722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1726:	88 23       	and	r24, r24
    1728:	2c f4       	brge	.+10     	; 0x1734 <HStepperPlay_CW+0x3f0>
		__ticks = 1;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <HStepperPlay_CW+0x46e>
	else if (__tmp > 65535)
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	3f ef       	ldi	r19, 0xFF	; 255
    1740:	4f e7       	ldi	r20, 0x7F	; 127
    1742:	57 e4       	ldi	r21, 0x47	; 71
    1744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1748:	18 16       	cp	r1, r24
    174a:	4c f5       	brge	.+82     	; 0x179e <HStepperPlay_CW+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174c:	6b 85       	ldd	r22, Y+11	; 0x0b
    174e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	9e 85       	ldd	r25, Y+14	; 0x0e
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <HStepperPlay_CW+0x450>
    1776:	88 ec       	ldi	r24, 0xC8	; 200
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <HStepperPlay_CW+0x43e>
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	9e 81       	ldd	r25, Y+6	; 0x06
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f7       	brne	.-38     	; 0x1776 <HStepperPlay_CW+0x432>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <HStepperPlay_CW+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179e:	6f 81       	ldd	r22, Y+7	; 0x07
    17a0:	78 85       	ldd	r23, Y+8	; 0x08
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <HStepperPlay_CW+0x47a>
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
{

	deg *= 10;
	deg /= 7 ;

	for (u32 i=0 ; i < deg ; i++)
    17c6:	89 ad       	ldd	r24, Y+57	; 0x39
    17c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ca:	ab ad       	ldd	r26, Y+59	; 0x3b
    17cc:	bc ad       	ldd	r27, Y+60	; 0x3c
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	a1 1d       	adc	r26, r1
    17d2:	b1 1d       	adc	r27, r1
    17d4:	89 af       	std	Y+57, r24	; 0x39
    17d6:	9a af       	std	Y+58, r25	; 0x3a
    17d8:	ab af       	std	Y+59, r26	; 0x3b
    17da:	bc af       	std	Y+60, r27	; 0x3c
    17dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    17de:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e0:	9c 01       	movw	r18, r24
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	89 ad       	ldd	r24, Y+57	; 0x39
    17e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ea:	ab ad       	ldd	r26, Y+59	; 0x3b
    17ec:	bc ad       	ldd	r27, Y+60	; 0x3c
    17ee:	82 17       	cp	r24, r18
    17f0:	93 07       	cpc	r25, r19
    17f2:	a4 07       	cpc	r26, r20
    17f4:	b5 07       	cpc	r27, r21
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <HStepperPlay_CW+0x4b6>
    17f8:	ce cd       	rjmp	.-1124   	; 0x1396 <HStepperPlay_CW+0x52>
		MDIO_VoidSetPinValue(STPPER_YELLOW_PORT,STPPER_PINK_PIN,DIO_PIN_LOW);
		MDIO_VoidSetPinValue(STPPER_PINK_PORT,STPPER_PINK_PIN,DIO_PIN_LOW);
		MDIO_VoidSetPinValue(STPPER_BLUE_PORT,STPPER_BLUE_PIN,DIO_PIN_HIGH);
		_delay_ms(2);
	}
}
    17fa:	ee 96       	adiw	r28, 0x3e	; 62
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <MDIO_VoidSetPinDirection>:




Error_state_t MDIO_VoidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	28 97       	sbiw	r28, 0x08	; 8
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	8a 83       	std	Y+2, r24	; 0x02
    1822:	6b 83       	std	Y+3, r22	; 0x03
    1824:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_state=Return_Ok ;
    1826:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	88 30       	cpi	r24, 0x08	; 8
    182c:	08 f0       	brcs	.+2      	; 0x1830 <MDIO_VoidSetPinDirection+0x24>
    182e:	f3 c0       	rjmp	.+486    	; 0x1a16 <MDIO_VoidSetPinDirection+0x20a>
	{
		if(Copy_u8Mode==DIO_PIN_INPUT)
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	09 f0       	breq	.+2      	; 0x1838 <MDIO_VoidSetPinDirection+0x2c>
    1836:	78 c0       	rjmp	.+240    	; 0x1928 <MDIO_VoidSetPinDirection+0x11c>
		{
			switch(Copy_u8Port)
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	38 87       	std	Y+8, r19	; 0x08
    1840:	2f 83       	std	Y+7, r18	; 0x07
    1842:	8f 81       	ldd	r24, Y+7	; 0x07
    1844:	98 85       	ldd	r25, Y+8	; 0x08
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	91 05       	cpc	r25, r1
    184a:	61 f1       	breq	.+88     	; 0x18a4 <MDIO_VoidSetPinDirection+0x98>
    184c:	2f 81       	ldd	r18, Y+7	; 0x07
    184e:	38 85       	ldd	r19, Y+8	; 0x08
    1850:	23 30       	cpi	r18, 0x03	; 3
    1852:	31 05       	cpc	r19, r1
    1854:	34 f4       	brge	.+12     	; 0x1862 <MDIO_VoidSetPinDirection+0x56>
    1856:	8f 81       	ldd	r24, Y+7	; 0x07
    1858:	98 85       	ldd	r25, Y+8	; 0x08
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	91 05       	cpc	r25, r1
    185e:	69 f0       	breq	.+26     	; 0x187a <MDIO_VoidSetPinDirection+0x6e>
    1860:	60 c0       	rjmp	.+192    	; 0x1922 <MDIO_VoidSetPinDirection+0x116>
    1862:	2f 81       	ldd	r18, Y+7	; 0x07
    1864:	38 85       	ldd	r19, Y+8	; 0x08
    1866:	23 30       	cpi	r18, 0x03	; 3
    1868:	31 05       	cpc	r19, r1
    186a:	89 f1       	breq	.+98     	; 0x18ce <MDIO_VoidSetPinDirection+0xc2>
    186c:	8f 81       	ldd	r24, Y+7	; 0x07
    186e:	98 85       	ldd	r25, Y+8	; 0x08
    1870:	84 30       	cpi	r24, 0x04	; 4
    1872:	91 05       	cpc	r25, r1
    1874:	09 f4       	brne	.+2      	; 0x1878 <MDIO_VoidSetPinDirection+0x6c>
    1876:	40 c0       	rjmp	.+128    	; 0x18f8 <MDIO_VoidSetPinDirection+0xec>
    1878:	54 c0       	rjmp	.+168    	; 0x1922 <MDIO_VoidSetPinDirection+0x116>
			{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break ;
    187a:	aa e3       	ldi	r26, 0x3A	; 58
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	ea e3       	ldi	r30, 0x3A	; 58
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <MDIO_VoidSetPinDirection+0x8c>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <MDIO_VoidSetPinDirection+0x88>
    189c:	80 95       	com	r24
    189e:	84 23       	and	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	bb c0       	rjmp	.+374    	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break ;
    18a4:	a7 e3       	ldi	r26, 0x37	; 55
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e7 e3       	ldi	r30, 0x37	; 55
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <MDIO_VoidSetPinDirection+0xb6>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <MDIO_VoidSetPinDirection+0xb2>
    18c6:	80 95       	com	r24
    18c8:	84 23       	and	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	a6 c0       	rjmp	.+332    	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break ;
    18ce:	a4 e3       	ldi	r26, 0x34	; 52
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e4 e3       	ldi	r30, 0x34	; 52
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <MDIO_VoidSetPinDirection+0xe0>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <MDIO_VoidSetPinDirection+0xdc>
    18f0:	80 95       	com	r24
    18f2:	84 23       	and	r24, r20
    18f4:	8c 93       	st	X, r24
    18f6:	91 c0       	rjmp	.+290    	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break ;
    18f8:	a1 e3       	ldi	r26, 0x31	; 49
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e1 e3       	ldi	r30, 0x31	; 49
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <MDIO_VoidSetPinDirection+0x10a>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <MDIO_VoidSetPinDirection+0x106>
    191a:	80 95       	com	r24
    191c:	84 23       	and	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	7c c0       	rjmp	.+248    	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			default : Error_state=Return_Nok ; break ;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	79 c0       	rjmp	.+242    	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>

			}
		}
		else if(Copy_u8Mode==DIO_PIN_OUTPUT)
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	09 f0       	breq	.+2      	; 0x1930 <MDIO_VoidSetPinDirection+0x124>
    192e:	75 c0       	rjmp	.+234    	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
		{
			switch(Copy_u8Port)
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	3e 83       	std	Y+6, r19	; 0x06
    1938:	2d 83       	std	Y+5, r18	; 0x05
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	91 05       	cpc	r25, r1
    1942:	51 f1       	breq	.+84     	; 0x1998 <MDIO_VoidSetPinDirection+0x18c>
    1944:	2d 81       	ldd	r18, Y+5	; 0x05
    1946:	3e 81       	ldd	r19, Y+6	; 0x06
    1948:	23 30       	cpi	r18, 0x03	; 3
    194a:	31 05       	cpc	r19, r1
    194c:	34 f4       	brge	.+12     	; 0x195a <MDIO_VoidSetPinDirection+0x14e>
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	61 f0       	breq	.+24     	; 0x1970 <MDIO_VoidSetPinDirection+0x164>
    1958:	5b c0       	rjmp	.+182    	; 0x1a10 <MDIO_VoidSetPinDirection+0x204>
    195a:	2d 81       	ldd	r18, Y+5	; 0x05
    195c:	3e 81       	ldd	r19, Y+6	; 0x06
    195e:	23 30       	cpi	r18, 0x03	; 3
    1960:	31 05       	cpc	r19, r1
    1962:	71 f1       	breq	.+92     	; 0x19c0 <MDIO_VoidSetPinDirection+0x1b4>
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	84 30       	cpi	r24, 0x04	; 4
    196a:	91 05       	cpc	r25, r1
    196c:	e9 f1       	breq	.+122    	; 0x19e8 <MDIO_VoidSetPinDirection+0x1dc>
    196e:	50 c0       	rjmp	.+160    	; 0x1a10 <MDIO_VoidSetPinDirection+0x204>
			{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin); break ;
    1970:	aa e3       	ldi	r26, 0x3A	; 58
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ea e3       	ldi	r30, 0x3A	; 58
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <MDIO_VoidSetPinDirection+0x182>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <MDIO_VoidSetPinDirection+0x17e>
    1992:	84 2b       	or	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	41 c0       	rjmp	.+130    	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin); break ;
    1998:	a7 e3       	ldi	r26, 0x37	; 55
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e7 e3       	ldi	r30, 0x37	; 55
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <MDIO_VoidSetPinDirection+0x1aa>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <MDIO_VoidSetPinDirection+0x1a6>
    19ba:	84 2b       	or	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	2d c0       	rjmp	.+90     	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin); break ;
    19c0:	a4 e3       	ldi	r26, 0x34	; 52
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e4 e3       	ldi	r30, 0x34	; 52
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <MDIO_VoidSetPinDirection+0x1d2>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <MDIO_VoidSetPinDirection+0x1ce>
    19e2:	84 2b       	or	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	19 c0       	rjmp	.+50     	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin); break ;
    19e8:	a1 e3       	ldi	r26, 0x31	; 49
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e1 e3       	ldi	r30, 0x31	; 49
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <MDIO_VoidSetPinDirection+0x1fa>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <MDIO_VoidSetPinDirection+0x1f6>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			default :Error_state=Return_Nok ;  break ;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <MDIO_VoidSetPinDirection+0x20e>
			}
		}
	}
	else
	{
		Error_state=Return_Nok ;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a1c:	28 96       	adiw	r28, 0x08	; 8
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <MDIO_VoidSetPinValue>:
Error_state_t MDIO_VoidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	28 97       	sbiw	r28, 0x08	; 8
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	8a 83       	std	Y+2, r24	; 0x02
    1a44:	6b 83       	std	Y+3, r22	; 0x03
    1a46:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_state=Return_Ok ;
    1a48:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	88 30       	cpi	r24, 0x08	; 8
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <MDIO_VoidSetPinValue+0x24>
    1a50:	f3 c0       	rjmp	.+486    	; 0x1c38 <MDIO_VoidSetPinValue+0x20a>
	{
		if(Copy_u8Mode==DIO_PIN_LOW)
    1a52:	8c 81       	ldd	r24, Y+4	; 0x04
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <MDIO_VoidSetPinValue+0x2c>
    1a58:	78 c0       	rjmp	.+240    	; 0x1b4a <MDIO_VoidSetPinValue+0x11c>
		{
			switch(Copy_u8Port)
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	38 87       	std	Y+8, r19	; 0x08
    1a62:	2f 83       	std	Y+7, r18	; 0x07
    1a64:	8f 81       	ldd	r24, Y+7	; 0x07
    1a66:	98 85       	ldd	r25, Y+8	; 0x08
    1a68:	82 30       	cpi	r24, 0x02	; 2
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	61 f1       	breq	.+88     	; 0x1ac6 <MDIO_VoidSetPinValue+0x98>
    1a6e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a70:	38 85       	ldd	r19, Y+8	; 0x08
    1a72:	23 30       	cpi	r18, 0x03	; 3
    1a74:	31 05       	cpc	r19, r1
    1a76:	34 f4       	brge	.+12     	; 0x1a84 <MDIO_VoidSetPinValue+0x56>
    1a78:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7a:	98 85       	ldd	r25, Y+8	; 0x08
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	91 05       	cpc	r25, r1
    1a80:	69 f0       	breq	.+26     	; 0x1a9c <MDIO_VoidSetPinValue+0x6e>
    1a82:	60 c0       	rjmp	.+192    	; 0x1b44 <MDIO_VoidSetPinValue+0x116>
    1a84:	2f 81       	ldd	r18, Y+7	; 0x07
    1a86:	38 85       	ldd	r19, Y+8	; 0x08
    1a88:	23 30       	cpi	r18, 0x03	; 3
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	89 f1       	breq	.+98     	; 0x1af0 <MDIO_VoidSetPinValue+0xc2>
    1a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a90:	98 85       	ldd	r25, Y+8	; 0x08
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	91 05       	cpc	r25, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <MDIO_VoidSetPinValue+0x6c>
    1a98:	40 c0       	rjmp	.+128    	; 0x1b1a <MDIO_VoidSetPinValue+0xec>
    1a9a:	54 c0       	rjmp	.+168    	; 0x1b44 <MDIO_VoidSetPinValue+0x116>
			{
			case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin); break ;
    1a9c:	ab e3       	ldi	r26, 0x3B	; 59
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	eb e3       	ldi	r30, 0x3B	; 59
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <MDIO_VoidSetPinValue+0x8c>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <MDIO_VoidSetPinValue+0x88>
    1abe:	80 95       	com	r24
    1ac0:	84 23       	and	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	bb c0       	rjmp	.+374    	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin); break ;
    1ac6:	a8 e3       	ldi	r26, 0x38	; 56
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e8 e3       	ldi	r30, 0x38	; 56
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <MDIO_VoidSetPinValue+0xb6>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <MDIO_VoidSetPinValue+0xb2>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	a6 c0       	rjmp	.+332    	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin); break ;
    1af0:	a5 e3       	ldi	r26, 0x35	; 53
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e3       	ldi	r30, 0x35	; 53
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <MDIO_VoidSetPinValue+0xe0>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <MDIO_VoidSetPinValue+0xdc>
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	91 c0       	rjmp	.+290    	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin); break ;
    1b1a:	a2 e3       	ldi	r26, 0x32	; 50
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <MDIO_VoidSetPinValue+0x10a>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <MDIO_VoidSetPinValue+0x106>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	7c c0       	rjmp	.+248    	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			default :Error_state = Return_Nok ; break ;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	79 c0       	rjmp	.+242    	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>

			}
		}
		else if(Copy_u8Mode==DIO_PIN_HIGH)
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <MDIO_VoidSetPinValue+0x124>
    1b50:	75 c0       	rjmp	.+234    	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
		{
			switch(Copy_u8Port)
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	3e 83       	std	Y+6, r19	; 0x06
    1b5a:	2d 83       	std	Y+5, r18	; 0x05
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	91 05       	cpc	r25, r1
    1b64:	51 f1       	breq	.+84     	; 0x1bba <MDIO_VoidSetPinValue+0x18c>
    1b66:	2d 81       	ldd	r18, Y+5	; 0x05
    1b68:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6a:	23 30       	cpi	r18, 0x03	; 3
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	34 f4       	brge	.+12     	; 0x1b7c <MDIO_VoidSetPinValue+0x14e>
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <MDIO_VoidSetPinValue+0x164>
    1b7a:	5b c0       	rjmp	.+182    	; 0x1c32 <MDIO_VoidSetPinValue+0x204>
    1b7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b80:	23 30       	cpi	r18, 0x03	; 3
    1b82:	31 05       	cpc	r19, r1
    1b84:	71 f1       	breq	.+92     	; 0x1be2 <MDIO_VoidSetPinValue+0x1b4>
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	e9 f1       	breq	.+122    	; 0x1c0a <MDIO_VoidSetPinValue+0x1dc>
    1b90:	50 c0       	rjmp	.+160    	; 0x1c32 <MDIO_VoidSetPinValue+0x204>
			{
			case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin); break ;
    1b92:	ab e3       	ldi	r26, 0x3B	; 59
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	eb e3       	ldi	r30, 0x3B	; 59
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 2e       	mov	r0, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <MDIO_VoidSetPinValue+0x182>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	0a 94       	dec	r0
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <MDIO_VoidSetPinValue+0x17e>
    1bb4:	84 2b       	or	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	41 c0       	rjmp	.+130    	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin); break ;
    1bba:	a8 e3       	ldi	r26, 0x38	; 56
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e8 e3       	ldi	r30, 0x38	; 56
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	02 2e       	mov	r0, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <MDIO_VoidSetPinValue+0x1aa>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	0a 94       	dec	r0
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <MDIO_VoidSetPinValue+0x1a6>
    1bdc:	84 2b       	or	r24, r20
    1bde:	8c 93       	st	X, r24
    1be0:	2d c0       	rjmp	.+90     	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin); break ;
    1be2:	a5 e3       	ldi	r26, 0x35	; 53
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e5 e3       	ldi	r30, 0x35	; 53
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <MDIO_VoidSetPinValue+0x1d2>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <MDIO_VoidSetPinValue+0x1ce>
    1c04:	84 2b       	or	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	19 c0       	rjmp	.+50     	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin); break ;
    1c0a:	a2 e3       	ldi	r26, 0x32	; 50
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e2 e3       	ldi	r30, 0x32	; 50
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 2e       	mov	r0, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <MDIO_VoidSetPinValue+0x1fa>
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <MDIO_VoidSetPinValue+0x1f6>
    1c2c:	84 2b       	or	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	05 c0       	rjmp	.+10     	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			default :Error_state = Return_Nok ; break ;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <MDIO_VoidSetPinValue+0x20e>
			}
		}
	}
	else
	{
		Error_state = Return_Nok ;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c3e:	28 96       	adiw	r28, 0x08	; 8
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <MDIO_VoidGetPinValue>:
Error_state_t MDIO_VoidGetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *P_u8Value)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	27 97       	sbiw	r28, 0x07	; 7
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	8a 83       	std	Y+2, r24	; 0x02
    1c66:	6b 83       	std	Y+3, r22	; 0x03
    1c68:	5d 83       	std	Y+5, r21	; 0x05
    1c6a:	4c 83       	std	Y+4, r20	; 0x04
	Error_state_t Error_State=Return_Ok ;
    1c6c:	19 82       	std	Y+1, r1	; 0x01
	if(P_u8Value != NULL)
    1c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c70:	9d 81       	ldd	r25, Y+5	; 0x05
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	91 05       	cpc	r25, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <MDIO_VoidGetPinValue+0x2a>
    1c78:	7b c0       	rjmp	.+246    	; 0x1d70 <MDIO_VoidGetPinValue+0x120>
	{
		if(Copy_u8Pin<=7)
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	88 30       	cpi	r24, 0x08	; 8
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <MDIO_VoidGetPinValue+0x32>
    1c80:	74 c0       	rjmp	.+232    	; 0x1d6a <MDIO_VoidGetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	3f 83       	std	Y+7, r19	; 0x07
    1c8a:	2e 83       	std	Y+6, r18	; 0x06
    1c8c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c8e:	5f 81       	ldd	r21, Y+7	; 0x07
    1c90:	42 30       	cpi	r20, 0x02	; 2
    1c92:	51 05       	cpc	r21, r1
    1c94:	59 f1       	breq	.+86     	; 0x1cec <MDIO_VoidGetPinValue+0x9c>
    1c96:	8e 81       	ldd	r24, Y+6	; 0x06
    1c98:	9f 81       	ldd	r25, Y+7	; 0x07
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	34 f4       	brge	.+12     	; 0x1cac <MDIO_VoidGetPinValue+0x5c>
    1ca0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ca2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ca4:	21 30       	cpi	r18, 0x01	; 1
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	69 f0       	breq	.+26     	; 0x1cc4 <MDIO_VoidGetPinValue+0x74>
    1caa:	5c c0       	rjmp	.+184    	; 0x1d64 <MDIO_VoidGetPinValue+0x114>
    1cac:	4e 81       	ldd	r20, Y+6	; 0x06
    1cae:	5f 81       	ldd	r21, Y+7	; 0x07
    1cb0:	43 30       	cpi	r20, 0x03	; 3
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	79 f1       	breq	.+94     	; 0x1d14 <MDIO_VoidGetPinValue+0xc4>
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <MDIO_VoidGetPinValue+0x72>
    1cc0:	3d c0       	rjmp	.+122    	; 0x1d3c <MDIO_VoidGetPinValue+0xec>
    1cc2:	50 c0       	rjmp	.+160    	; 0x1d64 <MDIO_VoidGetPinValue+0x114>
			{
			case DIO_PORTA :*P_u8Value= GET_BIT(PINA,Copy_u8Pin); break ;
    1cc4:	e9 e3       	ldi	r30, 0x39	; 57
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <MDIO_VoidGetPinValue+0x8c>
    1cd8:	55 95       	asr	r21
    1cda:	47 95       	ror	r20
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <MDIO_VoidGetPinValue+0x88>
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce8:	80 83       	st	Z, r24
    1cea:	44 c0       	rjmp	.+136    	; 0x1d74 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTB :*P_u8Value= GET_BIT(PINB,Copy_u8Pin); break ;
    1cec:	e6 e3       	ldi	r30, 0x36	; 54
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <MDIO_VoidGetPinValue+0xb4>
    1d00:	55 95       	asr	r21
    1d02:	47 95       	ror	r20
    1d04:	8a 95       	dec	r24
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <MDIO_VoidGetPinValue+0xb0>
    1d08:	ca 01       	movw	r24, r20
    1d0a:	81 70       	andi	r24, 0x01	; 1
    1d0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d10:	80 83       	st	Z, r24
    1d12:	30 c0       	rjmp	.+96     	; 0x1d74 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTC :*P_u8Value= GET_BIT(PINC,Copy_u8Pin); break ;
    1d14:	e3 e3       	ldi	r30, 0x33	; 51
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a9 01       	movw	r20, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <MDIO_VoidGetPinValue+0xdc>
    1d28:	55 95       	asr	r21
    1d2a:	47 95       	ror	r20
    1d2c:	8a 95       	dec	r24
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <MDIO_VoidGetPinValue+0xd8>
    1d30:	ca 01       	movw	r24, r20
    1d32:	81 70       	andi	r24, 0x01	; 1
    1d34:	ec 81       	ldd	r30, Y+4	; 0x04
    1d36:	fd 81       	ldd	r31, Y+5	; 0x05
    1d38:	80 83       	st	Z, r24
    1d3a:	1c c0       	rjmp	.+56     	; 0x1d74 <MDIO_VoidGetPinValue+0x124>
			case DIO_PORTD :*P_u8Value= GET_BIT(PIND,Copy_u8Pin); break ;
    1d3c:	e0 e3       	ldi	r30, 0x30	; 48
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a9 01       	movw	r20, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <MDIO_VoidGetPinValue+0x104>
    1d50:	55 95       	asr	r21
    1d52:	47 95       	ror	r20
    1d54:	8a 95       	dec	r24
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <MDIO_VoidGetPinValue+0x100>
    1d58:	ca 01       	movw	r24, r20
    1d5a:	81 70       	andi	r24, 0x01	; 1
    1d5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d60:	80 83       	st	Z, r24
    1d62:	08 c0       	rjmp	.+16     	; 0x1d74 <MDIO_VoidGetPinValue+0x124>
			default :Error_State=Return_Nok ;  break ;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <MDIO_VoidGetPinValue+0x124>
			}
		}
		else
		{
			Error_State=Return_Nok ;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <MDIO_VoidGetPinValue+0x124>
		}
	}
	else
	{
		Error_State=Return_NullPointer ;
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	89 83       	std	Y+1, r24	; 0x01
	}



	return Error_State ;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d76:	27 96       	adiw	r28, 0x07	; 7
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <MDIO_VoidSetPortValue>:

Error_state_t MDIO_VoidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <MDIO_VoidSetPortValue+0x6>
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <MDIO_VoidSetPortValue+0x8>
    1d90:	0f 92       	push	r0
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	8a 83       	std	Y+2, r24	; 0x02
    1d98:	6b 83       	std	Y+3, r22	; 0x03
	Error_state_t Error_State=Return_Ok ;
    1d9a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3d 83       	std	Y+5, r19	; 0x05
    1da4:	2c 83       	std	Y+4, r18	; 0x04
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	9d 81       	ldd	r25, Y+5	; 0x05
    1daa:	82 30       	cpi	r24, 0x02	; 2
    1dac:	91 05       	cpc	r25, r1
    1dae:	d9 f0       	breq	.+54     	; 0x1de6 <MDIO_VoidSetPortValue+0x5e>
    1db0:	2c 81       	ldd	r18, Y+4	; 0x04
    1db2:	3d 81       	ldd	r19, Y+5	; 0x05
    1db4:	23 30       	cpi	r18, 0x03	; 3
    1db6:	31 05       	cpc	r19, r1
    1db8:	34 f4       	brge	.+12     	; 0x1dc6 <MDIO_VoidSetPortValue+0x3e>
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	61 f0       	breq	.+24     	; 0x1ddc <MDIO_VoidSetPortValue+0x54>
    1dc4:	1f c0       	rjmp	.+62     	; 0x1e04 <MDIO_VoidSetPortValue+0x7c>
    1dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dca:	23 30       	cpi	r18, 0x03	; 3
    1dcc:	31 05       	cpc	r19, r1
    1dce:	81 f0       	breq	.+32     	; 0x1df0 <MDIO_VoidSetPortValue+0x68>
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd4:	84 30       	cpi	r24, 0x04	; 4
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	81 f0       	breq	.+32     	; 0x1dfa <MDIO_VoidSetPortValue+0x72>
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <MDIO_VoidSetPortValue+0x7c>
	{
	case DIO_PORTA : PORTA=Copy_u8Value ;break ;
    1ddc:	eb e3       	ldi	r30, 0x3B	; 59
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	80 83       	st	Z, r24
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTB : PORTB=Copy_u8Value ;break ;
    1de6:	e8 e3       	ldi	r30, 0x38	; 56
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	80 83       	st	Z, r24
    1dee:	0c c0       	rjmp	.+24     	; 0x1e08 <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTC : PORTC=Copy_u8Value ;break ;
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	80 83       	st	Z, r24
    1df8:	07 c0       	rjmp	.+14     	; 0x1e08 <MDIO_VoidSetPortValue+0x80>
	case DIO_PORTD : PORTD=Copy_u8Value ;break ;
    1dfa:	e2 e3       	ldi	r30, 0x32	; 50
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	80 83       	st	Z, r24
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <MDIO_VoidSetPortValue+0x80>
	default : Error_State=Return_Nok ;break ;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_State=Return_Nok ;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <Port_voidInit>:
void Port_voidInit()
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR ;
    1e26:	ea e3       	ldi	r30, 0x3A	; 58
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
    1e2e:	e7 e3       	ldi	r30, 0x37	; 55
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8f e4       	ldi	r24, 0x4F	; 79
    1e34:	80 83       	st	Z, r24
	DDRC = PORTC_DIR ;
    1e36:	e4 e3       	ldi	r30, 0x34	; 52
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    1e3e:	e1 e3       	ldi	r30, 0x31	; 49
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	80 83       	st	Z, r24


	PORTA = PORTA_Value ;
    1e46:	eb e3       	ldi	r30, 0x3B	; 59
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	10 82       	st	Z, r1
	PORTB = PORTB_Value ;
    1e4c:	e8 e3       	ldi	r30, 0x38	; 56
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	10 82       	st	Z, r1
	PORTC = PORTC_Value ;
    1e52:	e5 e3       	ldi	r30, 0x35	; 53
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	10 82       	st	Z, r1
	PORTD = PORTD_Value ;
    1e58:	e2 e3       	ldi	r30, 0x32	; 50
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	10 82       	st	Z, r1

}
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <MDIO_VoidTogglePin>:


Error_state_t MDIO_VoidTogglePin(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <MDIO_VoidTogglePin+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <MDIO_VoidTogglePin+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
	Error_state_t Error_state=Return_Ok ;
    1e76:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 30       	cpi	r24, 0x08	; 8
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <MDIO_VoidTogglePin+0x1c>
    1e7e:	73 c0       	rjmp	.+230    	; 0x1f66 <MDIO_VoidTogglePin+0x102>
	{

			switch(Copy_u8Port)
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3d 83       	std	Y+5, r19	; 0x05
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	91 05       	cpc	r25, r1
    1e92:	51 f1       	breq	.+84     	; 0x1ee8 <MDIO_VoidTogglePin+0x84>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	23 30       	cpi	r18, 0x03	; 3
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	34 f4       	brge	.+12     	; 0x1eaa <MDIO_VoidTogglePin+0x46>
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <MDIO_VoidTogglePin+0x5c>
    1ea8:	5b c0       	rjmp	.+182    	; 0x1f60 <MDIO_VoidTogglePin+0xfc>
    1eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    1eac:	3d 81       	ldd	r19, Y+5	; 0x05
    1eae:	23 30       	cpi	r18, 0x03	; 3
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	71 f1       	breq	.+92     	; 0x1f10 <MDIO_VoidTogglePin+0xac>
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	84 30       	cpi	r24, 0x04	; 4
    1eba:	91 05       	cpc	r25, r1
    1ebc:	e9 f1       	breq	.+122    	; 0x1f38 <MDIO_VoidTogglePin+0xd4>
    1ebe:	50 c0       	rjmp	.+160    	; 0x1f60 <MDIO_VoidTogglePin+0xfc>
			{
			case DIO_PORTA : TOGGLE_BIT(PORTA,Copy_u8Pin); break ;
    1ec0:	ab e3       	ldi	r26, 0x3B	; 59
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	eb e3       	ldi	r30, 0x3B	; 59
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <MDIO_VoidTogglePin+0x7a>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <MDIO_VoidTogglePin+0x76>
    1ee2:	84 27       	eor	r24, r20
    1ee4:	8c 93       	st	X, r24
    1ee6:	41 c0       	rjmp	.+130    	; 0x1f6a <MDIO_VoidTogglePin+0x106>
			case DIO_PORTB : TOGGLE_BIT(PORTB,Copy_u8Pin); break ;
    1ee8:	a8 e3       	ldi	r26, 0x38	; 56
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e8 e3       	ldi	r30, 0x38	; 56
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <MDIO_VoidTogglePin+0xa2>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <MDIO_VoidTogglePin+0x9e>
    1f0a:	84 27       	eor	r24, r20
    1f0c:	8c 93       	st	X, r24
    1f0e:	2d c0       	rjmp	.+90     	; 0x1f6a <MDIO_VoidTogglePin+0x106>
			case DIO_PORTC : TOGGLE_BIT(PORTC,Copy_u8Pin); break ;
    1f10:	a5 e3       	ldi	r26, 0x35	; 53
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e5 e3       	ldi	r30, 0x35	; 53
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 2e       	mov	r0, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <MDIO_VoidTogglePin+0xca>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	0a 94       	dec	r0
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <MDIO_VoidTogglePin+0xc6>
    1f32:	84 27       	eor	r24, r20
    1f34:	8c 93       	st	X, r24
    1f36:	19 c0       	rjmp	.+50     	; 0x1f6a <MDIO_VoidTogglePin+0x106>
			case DIO_PORTD : TOGGLE_BIT(PORTD,Copy_u8Pin); break ;
    1f38:	a2 e3       	ldi	r26, 0x32	; 50
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e2 e3       	ldi	r30, 0x32	; 50
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <MDIO_VoidTogglePin+0xf2>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <MDIO_VoidTogglePin+0xee>
    1f5a:	84 27       	eor	r24, r20
    1f5c:	8c 93       	st	X, r24
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <MDIO_VoidTogglePin+0x106>
			default :Error_state = Return_Nok ; break ;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <MDIO_VoidTogglePin+0x106>
			}
	}
	else
	{
		Error_state = Return_Nok ;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state ;
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <MGIE_voidEnable>:
#include "MACROS.h"
#include "MGIE_register.h".h"
#include "MGIE_interface.h"

void MGIE_voidEnable()
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_INT);
    1f84:	af e5       	ldi	r26, 0x5F	; 95
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	ef e5       	ldi	r30, 0x5F	; 95
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 68       	ori	r24, 0x80	; 128
    1f90:	8c 93       	st	X, r24
}
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <MGIE_voidDisable>:
void MGIE_voidDisable()
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_INT);
    1fa0:	af e5       	ldi	r26, 0x5F	; 95
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	ef e5       	ldi	r30, 0x5F	; 95
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8f 77       	andi	r24, 0x7F	; 127
    1fac:	8c 93       	st	X, r24
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <MSPI_voidInit>:
#include "MSPI_config.h"
#include "MSPI_private.h"
#include "MSPI_interface.h"

void MSPI_voidInit()
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62

	/*Data Order*/
	SET_BIT(SPCR,SPCR_DORD);
    1fbc:	ad e2       	ldi	r26, 0x2D	; 45
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	ed e2       	ldi	r30, 0x2D	; 45
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 62       	ori	r24, 0x20	; 32
    1fc8:	8c 93       	st	X, r24
	/*Select Prescaler as 16*/
	SET_BIT(SPCR,SPCR_SPR0);
	CLR_BIT(SPCR,SPCR_SPR1);
	CLR_BIT(SPSR,SPSR_SPI2X);
#elif SPI_MODE==SPI_SLAVE
	CLR_BIT(SPCR,SPCR_MSTR);
    1fca:	ad e2       	ldi	r26, 0x2D	; 45
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	ed e2       	ldi	r30, 0x2D	; 45
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8f 7e       	andi	r24, 0xEF	; 239
    1fd6:	8c 93       	st	X, r24
#else
#error"Wrong SPI Mode Configuration"
#endif
	/* Select Clock Polarity as Leading edge rising*/
	CLR_BIT(SPCR,SPCR_CPOL);
    1fd8:	ad e2       	ldi	r26, 0x2D	; 45
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	ed e2       	ldi	r30, 0x2D	; 45
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	87 7f       	andi	r24, 0xF7	; 247
    1fe4:	8c 93       	st	X, r24
	/* Select Clock Phase as Leading edge is sample*/
	CLR_BIT(SPCR,SPCR_CPHA);
    1fe6:	ad e2       	ldi	r26, 0x2D	; 45
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	ed e2       	ldi	r30, 0x2D	; 45
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	8b 7f       	andi	r24, 0xFB	; 251
    1ff2:	8c 93       	st	X, r24

	/*Enable SPI peripheral*/
	SET_BIT(SPCR,SPCR_SPE);
    1ff4:	ad e2       	ldi	r26, 0x2D	; 45
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	ed e2       	ldi	r30, 0x2D	; 45
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 64       	ori	r24, 0x40	; 64
    2000:	8c 93       	st	X, r24

}
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <MSPI_voidTranceive>:
u8 MSPI_voidTranceive(u8 Copy_u8Data)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data ;
    2014:	ef e2       	ldi	r30, 0x2F	; 47
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	80 83       	st	Z, r24

	while( (GET_BIT(SPSR,SPSR_SPIF)) ==0);
    201c:	ee e2       	ldi	r30, 0x2E	; 46
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	88 23       	and	r24, r24
    2024:	dc f7       	brge	.-10     	; 0x201c <MSPI_voidTranceive+0x14>

	return SPDR ;
    2026:	ef e2       	ldi	r30, 0x2F	; 47
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
}
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <MTIMER0_voidInit>:
void (*Timer2_PF_CMP)(void)=NULL ;

/**************************************TIMER0 ******************************************/

void MTIMER0_voidInit()
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TIMSK,TIMSK_TOIE0); // Overflow Interrupt enable

#elif TIMER0_MODE==TIMER0_CTC_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
    203c:	a3 e5       	ldi	r26, 0x53	; 83
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e3 e5       	ldi	r30, 0x53	; 83
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8f 7b       	andi	r24, 0xBF	; 191
    2048:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    204a:	a3 e5       	ldi	r26, 0x53	; 83
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e3 e5       	ldi	r30, 0x53	; 83
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	88 60       	ori	r24, 0x08	; 8
    2056:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_OCIE0); // Compare Match Interrupt enable
    2058:	a9 e5       	ldi	r26, 0x59	; 89
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e9 e5       	ldi	r30, 0x59	; 89
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	82 60       	ori	r24, 0x02	; 2
    2064:	8c 93       	st	X, r24
#if TIMER0_PRESCALER==TIMER0_NO_PRESCALER
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
#elif  TIMER0_PRESCALER==TIMER0_8_PRESCALER
	CLR_BIT(TCCR0,TCCR0_CS00);
    2066:	a3 e5       	ldi	r26, 0x53	; 83
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e3 e5       	ldi	r30, 0x53	; 83
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8e 7f       	andi	r24, 0xFE	; 254
    2072:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    2074:	a3 e5       	ldi	r26, 0x53	; 83
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e3 e5       	ldi	r30, 0x53	; 83
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	82 60       	ori	r24, 0x02	; 2
    2080:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    2082:	a3 e5       	ldi	r26, 0x53	; 83
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e3 e5       	ldi	r30, 0x53	; 83
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	8b 7f       	andi	r24, 0xFB	; 251
    208e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
#else
#error"Wrong Timer0 Prescaler Selection"
#endif
}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <MTIMER0_voidDisable>:
void MTIMER0_voidDisable()
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
	/*No Clock Source*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    209e:	a3 e5       	ldi	r26, 0x53	; 83
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e3 e5       	ldi	r30, 0x53	; 83
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8e 7f       	andi	r24, 0xFE	; 254
    20aa:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    20ac:	a3 e5       	ldi	r26, 0x53	; 83
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e3 e5       	ldi	r30, 0x53	; 83
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8d 7f       	andi	r24, 0xFD	; 253
    20b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    20ba:	a3 e5       	ldi	r26, 0x53	; 83
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e3 e5       	ldi	r30, 0x53	; 83
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	8b 7f       	andi	r24, 0xFB	; 251
    20c6:	8c 93       	st	X, r24
}
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	0f 92       	push	r0
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle ;
    20da:	ec e5       	ldi	r30, 0x5C	; 92
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	80 83       	st	Z, r24
}
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <MTIMER0_voidPreload>:
void MTIMER0_voidPreload(u8 Copy_u8Preload)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	0f 92       	push	r0
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload ;
    20f6:	e2 e5       	ldi	r30, 0x52	; 82
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	80 83       	st	Z, r24
}
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <MTIMER0_voidCompMatchValue>:

void MTIMER0_voidCompMatchValue(u8 Copy_u8ComMatchValue)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	0f 92       	push	r0
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8ComMatchValue ;
    2112:	ec e5       	ldi	r30, 0x5C	; 92
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	80 83       	st	Z, r24
}
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <MTIMER0_voidSetCallBack_OVF>:

void MTIMER0_voidSetCallBack_OVF(void (*Copy_pf)(void) )
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	00 d0       	rcall	.+0      	; 0x2128 <MTIMER0_voidSetCallBack_OVF+0x6>
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_OVF=Copy_pf ;
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	90 93 69 00 	sts	0x0069, r25
    2138:	80 93 68 00 	sts	0x0068, r24
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <MTIMER0_voidSetCallBack_CMP>:
void MTIMER0_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <MTIMER0_voidSetCallBack_CMP+0x6>
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PF_CMP=Copy_pf ;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	90 93 6b 00 	sts	0x006B, r25
    215c:	80 93 6a 00 	sts	0x006A, r24
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <__vector_11>:
/*OVF*/
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    216a:	1f 92       	push	r1
    216c:	0f 92       	push	r0
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	0f 92       	push	r0
    2172:	11 24       	eor	r1, r1
    2174:	2f 93       	push	r18
    2176:	3f 93       	push	r19
    2178:	4f 93       	push	r20
    217a:	5f 93       	push	r21
    217c:	6f 93       	push	r22
    217e:	7f 93       	push	r23
    2180:	8f 93       	push	r24
    2182:	9f 93       	push	r25
    2184:	af 93       	push	r26
    2186:	bf 93       	push	r27
    2188:	ef 93       	push	r30
    218a:	ff 93       	push	r31
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_OVF != NULL)
    2194:	80 91 68 00 	lds	r24, 0x0068
    2198:	90 91 69 00 	lds	r25, 0x0069
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	29 f0       	breq	.+10     	; 0x21aa <__vector_11+0x40>
	{
		Timer0_PF_OVF() ;
    21a0:	e0 91 68 00 	lds	r30, 0x0068
    21a4:	f0 91 69 00 	lds	r31, 0x0069
    21a8:	09 95       	icall
	}
}
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	ff 91       	pop	r31
    21b0:	ef 91       	pop	r30
    21b2:	bf 91       	pop	r27
    21b4:	af 91       	pop	r26
    21b6:	9f 91       	pop	r25
    21b8:	8f 91       	pop	r24
    21ba:	7f 91       	pop	r23
    21bc:	6f 91       	pop	r22
    21be:	5f 91       	pop	r21
    21c0:	4f 91       	pop	r20
    21c2:	3f 91       	pop	r19
    21c4:	2f 91       	pop	r18
    21c6:	0f 90       	pop	r0
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	0f 90       	pop	r0
    21cc:	1f 90       	pop	r1
    21ce:	18 95       	reti

000021d0 <__vector_10>:
/*CMP*/
void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    21d0:	1f 92       	push	r1
    21d2:	0f 92       	push	r0
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	0f 92       	push	r0
    21d8:	11 24       	eor	r1, r1
    21da:	2f 93       	push	r18
    21dc:	3f 93       	push	r19
    21de:	4f 93       	push	r20
    21e0:	5f 93       	push	r21
    21e2:	6f 93       	push	r22
    21e4:	7f 93       	push	r23
    21e6:	8f 93       	push	r24
    21e8:	9f 93       	push	r25
    21ea:	af 93       	push	r26
    21ec:	bf 93       	push	r27
    21ee:	ef 93       	push	r30
    21f0:	ff 93       	push	r31
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_PF_CMP != NULL)
    21fa:	80 91 6a 00 	lds	r24, 0x006A
    21fe:	90 91 6b 00 	lds	r25, 0x006B
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	29 f0       	breq	.+10     	; 0x2210 <__vector_10+0x40>
	{
		Timer0_PF_CMP() ;
    2206:	e0 91 6a 00 	lds	r30, 0x006A
    220a:	f0 91 6b 00 	lds	r31, 0x006B
    220e:	09 95       	icall
	}
}
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	ff 91       	pop	r31
    2216:	ef 91       	pop	r30
    2218:	bf 91       	pop	r27
    221a:	af 91       	pop	r26
    221c:	9f 91       	pop	r25
    221e:	8f 91       	pop	r24
    2220:	7f 91       	pop	r23
    2222:	6f 91       	pop	r22
    2224:	5f 91       	pop	r21
    2226:	4f 91       	pop	r20
    2228:	3f 91       	pop	r19
    222a:	2f 91       	pop	r18
    222c:	0f 90       	pop	r0
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	0f 90       	pop	r0
    2232:	1f 90       	pop	r1
    2234:	18 95       	reti

00002236 <MTIMER1_voidInit>:
/**************************************TIMER1 ******************************************/
void MTIMER1_voidInit(TIMER1MODES_t Copy_enuTimer1Mode , TIMER1_TOPMODES_t Copy_enuTimer1TopMode,TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	29 97       	sbiw	r28, 0x09	; 9
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	6a 83       	std	Y+2, r22	; 0x02
    224e:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_enuTimer1Mode)
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	39 87       	std	Y+9, r19	; 0x09
    2258:	28 87       	std	Y+8, r18	; 0x08
    225a:	88 85       	ldd	r24, Y+8	; 0x08
    225c:	99 85       	ldd	r25, Y+9	; 0x09
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	91 05       	cpc	r25, r1
    2262:	79 f1       	breq	.+94     	; 0x22c2 <MTIMER1_voidInit+0x8c>
    2264:	28 85       	ldd	r18, Y+8	; 0x08
    2266:	39 85       	ldd	r19, Y+9	; 0x09
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	31 05       	cpc	r19, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <MTIMER1_voidInit+0x3a>
    226e:	46 c0       	rjmp	.+140    	; 0x22fc <MTIMER1_voidInit+0xc6>
    2270:	88 85       	ldd	r24, Y+8	; 0x08
    2272:	99 85       	ldd	r25, Y+9	; 0x09
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	09 f0       	breq	.+2      	; 0x227a <MTIMER1_voidInit+0x44>
    2278:	5d c0       	rjmp	.+186    	; 0x2334 <MTIMER1_voidInit+0xfe>
	{
	case TIMER1_CTC_MODE :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    227a:	af e4       	ldi	r26, 0x4F	; 79
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	ef e4       	ldi	r30, 0x4F	; 79
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8f 7b       	andi	r24, 0xBF	; 191
    2286:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    2288:	af e4       	ldi	r26, 0x4F	; 79
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ef e4       	ldi	r30, 0x4F	; 79
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 7e       	andi	r24, 0xEF	; 239
    2294:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    2296:	af e4       	ldi	r26, 0x4F	; 79
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ef e4       	ldi	r30, 0x4F	; 79
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8f 77       	andi	r24, 0x7F	; 127
    22a2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B1);
    22a4:	af e4       	ldi	r26, 0x4F	; 79
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ef e4       	ldi	r30, 0x4F	; 79
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8f 7d       	andi	r24, 0xDF	; 223
    22b0:	8c 93       	st	X, r24
		/*SEI*/
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    22b2:	a9 e5       	ldi	r26, 0x59	; 89
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e9 e5       	ldi	r30, 0x59	; 89
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 61       	ori	r24, 0x10	; 16
    22be:	8c 93       	st	X, r24
    22c0:	39 c0       	rjmp	.+114    	; 0x2334 <MTIMER1_voidInit+0xfe>
		break;
	case TIMER1_FPWM_NON_INVERTING :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    22c2:	af e4       	ldi	r26, 0x4F	; 79
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	ef e4       	ldi	r30, 0x4F	; 79
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8f 7b       	andi	r24, 0xBF	; 191
    22ce:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    22d0:	af e4       	ldi	r26, 0x4F	; 79
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	ef e4       	ldi	r30, 0x4F	; 79
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8f 7e       	andi	r24, 0xEF	; 239
    22dc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    22de:	af e4       	ldi	r26, 0x4F	; 79
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	ef e4       	ldi	r30, 0x4F	; 79
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	80 68       	ori	r24, 0x80	; 128
    22ea:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    22ec:	af e4       	ldi	r26, 0x4F	; 79
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ef e4       	ldi	r30, 0x4F	; 79
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	80 62       	ori	r24, 0x20	; 32
    22f8:	8c 93       	st	X, r24
    22fa:	1c c0       	rjmp	.+56     	; 0x2334 <MTIMER1_voidInit+0xfe>
	case TIMER1_PPWM_NON_INVERTING :
		CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    22fc:	af e4       	ldi	r26, 0x4F	; 79
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ef e4       	ldi	r30, 0x4F	; 79
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8f 7b       	andi	r24, 0xBF	; 191
    2308:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A, TCCR1A_COM1B0);
    230a:	af e4       	ldi	r26, 0x4F	; 79
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	ef e4       	ldi	r30, 0x4F	; 79
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	8f 7e       	andi	r24, 0xEF	; 239
    2316:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1A1);
    2318:	af e4       	ldi	r26, 0x4F	; 79
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ef e4       	ldi	r30, 0x4F	; 79
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	80 68       	ori	r24, 0x80	; 128
    2324:	8c 93       	st	X, r24
		SET_BIT(TCCR1A, TCCR1A_COM1B1);break;
    2326:	af e4       	ldi	r26, 0x4F	; 79
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	ef e4       	ldi	r30, 0x4F	; 79
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	80 62       	ori	r24, 0x20	; 32
    2332:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1TopMode)
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	3f 83       	std	Y+7, r19	; 0x07
    233c:	2e 83       	std	Y+6, r18	; 0x06
    233e:	8e 81       	ldd	r24, Y+6	; 0x06
    2340:	9f 81       	ldd	r25, Y+7	; 0x07
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	91 05       	cpc	r25, r1
    2346:	b1 f0       	breq	.+44     	; 0x2374 <MTIMER1_voidInit+0x13e>
    2348:	2e 81       	ldd	r18, Y+6	; 0x06
    234a:	3f 81       	ldd	r19, Y+7	; 0x07
    234c:	22 30       	cpi	r18, 0x02	; 2
    234e:	31 05       	cpc	r19, r1
    2350:	2c f4       	brge	.+10     	; 0x235c <MTIMER1_voidInit+0x126>
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	51 f1       	breq	.+84     	; 0x23ae <MTIMER1_voidInit+0x178>
    235a:	7f c0       	rjmp	.+254    	; 0x245a <MTIMER1_voidInit+0x224>
    235c:	2e 81       	ldd	r18, Y+6	; 0x06
    235e:	3f 81       	ldd	r19, Y+7	; 0x07
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	31 05       	cpc	r19, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <MTIMER1_voidInit+0x132>
    2366:	5d c0       	rjmp	.+186    	; 0x2422 <MTIMER1_voidInit+0x1ec>
    2368:	8e 81       	ldd	r24, Y+6	; 0x06
    236a:	9f 81       	ldd	r25, Y+7	; 0x07
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	91 05       	cpc	r25, r1
    2370:	d9 f1       	breq	.+118    	; 0x23e8 <MTIMER1_voidInit+0x1b2>
    2372:	73 c0       	rjmp	.+230    	; 0x245a <MTIMER1_voidInit+0x224>
	{
	case TOP_CTC_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2374:	af e4       	ldi	r26, 0x4F	; 79
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	ef e4       	ldi	r30, 0x4F	; 79
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8e 7f       	andi	r24, 0xFE	; 254
    2380:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    2382:	af e4       	ldi	r26, 0x4F	; 79
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	ef e4       	ldi	r30, 0x4F	; 79
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	8d 7f       	andi	r24, 0xFD	; 253
    238e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2390:	ae e4       	ldi	r26, 0x4E	; 78
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	ee e4       	ldi	r30, 0x4E	; 78
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	88 60       	ori	r24, 0x08	; 8
    239c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    239e:	ae e4       	ldi	r26, 0x4E	; 78
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	ee e4       	ldi	r30, 0x4E	; 78
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	80 61       	ori	r24, 0x10	; 16
    23aa:	8c 93       	st	X, r24
    23ac:	56 c0       	rjmp	.+172    	; 0x245a <MTIMER1_voidInit+0x224>
	case TOP_CTC_OCR1A :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    23ae:	af e4       	ldi	r26, 0x4F	; 79
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	ef e4       	ldi	r30, 0x4F	; 79
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	8e 7f       	andi	r24, 0xFE	; 254
    23ba:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    23bc:	af e4       	ldi	r26, 0x4F	; 79
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ef e4       	ldi	r30, 0x4F	; 79
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	8d 7f       	andi	r24, 0xFD	; 253
    23c8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    23ca:	ae e4       	ldi	r26, 0x4E	; 78
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ee e4       	ldi	r30, 0x4E	; 78
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	88 60       	ori	r24, 0x08	; 8
    23d6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);break;
    23d8:	ae e4       	ldi	r26, 0x4E	; 78
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ee e4       	ldi	r30, 0x4E	; 78
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 7e       	andi	r24, 0xEF	; 239
    23e4:	8c 93       	st	X, r24
    23e6:	39 c0       	rjmp	.+114    	; 0x245a <MTIMER1_voidInit+0x224>
	case TOP_FPWM_ICR1 :
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    23e8:	af e4       	ldi	r26, 0x4F	; 79
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ef e4       	ldi	r30, 0x4F	; 79
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8e 7f       	andi	r24, 0xFE	; 254
    23f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    23f6:	af e4       	ldi	r26, 0x4F	; 79
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	ef e4       	ldi	r30, 0x4F	; 79
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	82 60       	ori	r24, 0x02	; 2
    2402:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2404:	ae e4       	ldi	r26, 0x4E	; 78
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	ee e4       	ldi	r30, 0x4E	; 78
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	88 60       	ori	r24, 0x08	; 8
    2410:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    2412:	ae e4       	ldi	r26, 0x4E	; 78
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ee e4       	ldi	r30, 0x4E	; 78
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	80 61       	ori	r24, 0x10	; 16
    241e:	8c 93       	st	X, r24
    2420:	1c c0       	rjmp	.+56     	; 0x245a <MTIMER1_voidInit+0x224>
	case TOP_FPWM_OCR1A :
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2422:	af e4       	ldi	r26, 0x4F	; 79
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ef e4       	ldi	r30, 0x4F	; 79
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	81 60       	ori	r24, 0x01	; 1
    242e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2430:	af e4       	ldi	r26, 0x4F	; 79
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ef e4       	ldi	r30, 0x4F	; 79
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	82 60       	ori	r24, 0x02	; 2
    243c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    243e:	ae e4       	ldi	r26, 0x4E	; 78
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	ee e4       	ldi	r30, 0x4E	; 78
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	88 60       	ori	r24, 0x08	; 8
    244a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);break;
    244c:	ae e4       	ldi	r26, 0x4E	; 78
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ee e4       	ldi	r30, 0x4E	; 78
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	80 61       	ori	r24, 0x10	; 16
    2458:	8c 93       	st	X, r24
	default:break ;
	}
	switch(Copy_enuTimer1Prescaler)
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3d 83       	std	Y+5, r19	; 0x05
    2462:	2c 83       	std	Y+4, r18	; 0x04
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	82 30       	cpi	r24, 0x02	; 2
    246a:	91 05       	cpc	r25, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <MTIMER1_voidInit+0x23a>
    246e:	48 c0       	rjmp	.+144    	; 0x2500 <MTIMER1_voidInit+0x2ca>
    2470:	2c 81       	ldd	r18, Y+4	; 0x04
    2472:	3d 81       	ldd	r19, Y+5	; 0x05
    2474:	23 30       	cpi	r18, 0x03	; 3
    2476:	31 05       	cpc	r19, r1
    2478:	54 f4       	brge	.+20     	; 0x248e <MTIMER1_voidInit+0x258>
    247a:	8c 81       	ldd	r24, Y+4	; 0x04
    247c:	9d 81       	ldd	r25, Y+5	; 0x05
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	99 f0       	breq	.+38     	; 0x24a8 <MTIMER1_voidInit+0x272>
    2482:	2c 81       	ldd	r18, Y+4	; 0x04
    2484:	3d 81       	ldd	r19, Y+5	; 0x05
    2486:	21 30       	cpi	r18, 0x01	; 1
    2488:	31 05       	cpc	r19, r1
    248a:	21 f1       	breq	.+72     	; 0x24d4 <MTIMER1_voidInit+0x29e>
    248c:	7a c0       	rjmp	.+244    	; 0x2582 <MTIMER1_voidInit+0x34c>
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	9d 81       	ldd	r25, Y+5	; 0x05
    2492:	83 30       	cpi	r24, 0x03	; 3
    2494:	91 05       	cpc	r25, r1
    2496:	09 f4       	brne	.+2      	; 0x249a <MTIMER1_voidInit+0x264>
    2498:	49 c0       	rjmp	.+146    	; 0x252c <MTIMER1_voidInit+0x2f6>
    249a:	2c 81       	ldd	r18, Y+4	; 0x04
    249c:	3d 81       	ldd	r19, Y+5	; 0x05
    249e:	24 30       	cpi	r18, 0x04	; 4
    24a0:	31 05       	cpc	r19, r1
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <MTIMER1_voidInit+0x270>
    24a4:	59 c0       	rjmp	.+178    	; 0x2558 <MTIMER1_voidInit+0x322>
    24a6:	6d c0       	rjmp	.+218    	; 0x2582 <MTIMER1_voidInit+0x34c>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    24a8:	ae e4       	ldi	r26, 0x4E	; 78
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ee e4       	ldi	r30, 0x4E	; 78
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	81 60       	ori	r24, 0x01	; 1
    24b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    24b6:	ae e4       	ldi	r26, 0x4E	; 78
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	ee e4       	ldi	r30, 0x4E	; 78
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	8d 7f       	andi	r24, 0xFD	; 253
    24c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    24c4:	ae e4       	ldi	r26, 0x4E	; 78
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ee e4       	ldi	r30, 0x4E	; 78
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	8b 7f       	andi	r24, 0xFB	; 251
    24d0:	8c 93       	st	X, r24
    24d2:	57 c0       	rjmp	.+174    	; 0x2582 <MTIMER1_voidInit+0x34c>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    24d4:	ae e4       	ldi	r26, 0x4E	; 78
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	ee e4       	ldi	r30, 0x4E	; 78
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	8e 7f       	andi	r24, 0xFE	; 254
    24e0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    24e2:	ae e4       	ldi	r26, 0x4E	; 78
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	ee e4       	ldi	r30, 0x4E	; 78
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	82 60       	ori	r24, 0x02	; 2
    24ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    24f0:	ae e4       	ldi	r26, 0x4E	; 78
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	ee e4       	ldi	r30, 0x4E	; 78
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	8b 7f       	andi	r24, 0xFB	; 251
    24fc:	8c 93       	st	X, r24
    24fe:	41 c0       	rjmp	.+130    	; 0x2582 <MTIMER1_voidInit+0x34c>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2500:	ae e4       	ldi	r26, 0x4E	; 78
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	ee e4       	ldi	r30, 0x4E	; 78
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	81 60       	ori	r24, 0x01	; 1
    250c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    250e:	ae e4       	ldi	r26, 0x4E	; 78
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	ee e4       	ldi	r30, 0x4E	; 78
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	82 60       	ori	r24, 0x02	; 2
    251a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    251c:	ae e4       	ldi	r26, 0x4E	; 78
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	ee e4       	ldi	r30, 0x4E	; 78
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	8b 7f       	andi	r24, 0xFB	; 251
    2528:	8c 93       	st	X, r24
    252a:	2b c0       	rjmp	.+86     	; 0x2582 <MTIMER1_voidInit+0x34c>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    252c:	ae e4       	ldi	r26, 0x4E	; 78
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	ee e4       	ldi	r30, 0x4E	; 78
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	8e 7f       	andi	r24, 0xFE	; 254
    2538:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    253a:	ae e4       	ldi	r26, 0x4E	; 78
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	ee e4       	ldi	r30, 0x4E	; 78
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8d 7f       	andi	r24, 0xFD	; 253
    2546:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    2548:	ae e4       	ldi	r26, 0x4E	; 78
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	ee e4       	ldi	r30, 0x4E	; 78
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	84 60       	ori	r24, 0x04	; 4
    2554:	8c 93       	st	X, r24
    2556:	15 c0       	rjmp	.+42     	; 0x2582 <MTIMER1_voidInit+0x34c>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2558:	ae e4       	ldi	r26, 0x4E	; 78
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ee e4       	ldi	r30, 0x4E	; 78
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	81 60       	ori	r24, 0x01	; 1
    2564:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2566:	ae e4       	ldi	r26, 0x4E	; 78
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ee e4       	ldi	r30, 0x4E	; 78
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8d 7f       	andi	r24, 0xFD	; 253
    2572:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    2574:	ae e4       	ldi	r26, 0x4E	; 78
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	ee e4       	ldi	r30, 0x4E	; 78
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	84 60       	ori	r24, 0x04	; 4
    2580:	8c 93       	st	X, r24
	default:break;

	}

}
    2582:	29 96       	adiw	r28, 0x09	; 9
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <MTIMER1_voidDisable>:
void MTIMER1_voidDisable()
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    259c:	ae e4       	ldi	r26, 0x4E	; 78
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	ee e4       	ldi	r30, 0x4E	; 78
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	8e 7f       	andi	r24, 0xFE	; 254
    25a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    25aa:	ae e4       	ldi	r26, 0x4E	; 78
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	ee e4       	ldi	r30, 0x4E	; 78
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	8d 7f       	andi	r24, 0xFD	; 253
    25b6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    25b8:	ae e4       	ldi	r26, 0x4E	; 78
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	ee e4       	ldi	r30, 0x4E	; 78
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8b 7f       	andi	r24, 0xFB	; 251
    25c4:	8c 93       	st	X, r24
}
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue(u16 Copy_TopValue ,TIMER1_TOPMODES_t Copy_enuTimer1TopMode)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <MTIMER1_voidSetTopValue+0x6>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <MTIMER1_voidSetTopValue+0x8>
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuTimer1TopMode)
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	28 2f       	mov	r18, r24
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	3d 83       	std	Y+5, r19	; 0x05
    25e8:	2c 83       	std	Y+4, r18	; 0x04
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	9d 81       	ldd	r25, Y+5	; 0x05
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	91 05       	cpc	r25, r1
    25f2:	a9 f0       	breq	.+42     	; 0x261e <MTIMER1_voidSetTopValue+0x52>
    25f4:	2c 81       	ldd	r18, Y+4	; 0x04
    25f6:	3d 81       	ldd	r19, Y+5	; 0x05
    25f8:	22 30       	cpi	r18, 0x02	; 2
    25fa:	31 05       	cpc	r19, r1
    25fc:	2c f4       	brge	.+10     	; 0x2608 <MTIMER1_voidSetTopValue+0x3c>
    25fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2600:	9d 81       	ldd	r25, Y+5	; 0x05
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	99 f0       	breq	.+38     	; 0x262c <MTIMER1_voidSetTopValue+0x60>
    2606:	26 c0       	rjmp	.+76     	; 0x2654 <MTIMER1_voidSetTopValue+0x88>
    2608:	2c 81       	ldd	r18, Y+4	; 0x04
    260a:	3d 81       	ldd	r19, Y+5	; 0x05
    260c:	22 30       	cpi	r18, 0x02	; 2
    260e:	31 05       	cpc	r19, r1
    2610:	d9 f0       	breq	.+54     	; 0x2648 <MTIMER1_voidSetTopValue+0x7c>
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	9d 81       	ldd	r25, Y+5	; 0x05
    2616:	83 30       	cpi	r24, 0x03	; 3
    2618:	91 05       	cpc	r25, r1
    261a:	79 f0       	breq	.+30     	; 0x263a <MTIMER1_voidSetTopValue+0x6e>
    261c:	1b c0       	rjmp	.+54     	; 0x2654 <MTIMER1_voidSetTopValue+0x88>
	{
	case TOP_CTC_ICR1 : ICR1 = Copy_TopValue ;break ;
    261e:	e6 e4       	ldi	r30, 0x46	; 70
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	80 83       	st	Z, r24
    262a:	14 c0       	rjmp	.+40     	; 0x2654 <MTIMER1_voidSetTopValue+0x88>
	case TOP_CTC_OCR1A : OCR1A = Copy_TopValue ;break ;
    262c:	ea e4       	ldi	r30, 0x4A	; 74
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	0d c0       	rjmp	.+26     	; 0x2654 <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_ICR1 : ICR1 = Copy_TopValue ;break ;
    263a:	e6 e4       	ldi	r30, 0x46	; 70
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	06 c0       	rjmp	.+12     	; 0x2654 <MTIMER1_voidSetTopValue+0x88>
	case TOP_FPWM_OCR1A : OCR1A = Copy_TopValue ;break ;
    2648:	ea e4       	ldi	r30, 0x4A	; 74
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
	default:break;

	}
}
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 Copy_DutyCycleValue)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <MTIMER1_voidSetDutyCycle+0x6>
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_DutyCycleValue ;
    2672:	ea e4       	ldi	r30, 0x4A	; 74
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	9a 81       	ldd	r25, Y+2	; 0x02
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <MTIMER1_voidSetCallBack_CMP>:

void MTIMER1_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	00 d0       	rcall	.+0      	; 0x268e <MTIMER1_voidSetCallBack_CMP+0x6>
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
	Timer1_PF_CMP=Copy_pf ;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	90 93 6d 00 	sts	0x006D, r25
    269e:	80 93 6c 00 	sts	0x006C, r24
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <MTIMER1_voidICUInit>:

void MTIMER1_voidICUInit(TIMER1_PRESCALER_t Copy_enuTimer1Prescaler)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <MTIMER1_voidICUInit+0x6>
    26b2:	0f 92       	push	r0
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enuTimer1Prescaler)
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	3b 83       	std	Y+3, r19	; 0x03
    26c2:	2a 83       	std	Y+2, r18	; 0x02
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	82 30       	cpi	r24, 0x02	; 2
    26ca:	91 05       	cpc	r25, r1
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <MTIMER1_voidICUInit+0x24>
    26ce:	48 c0       	rjmp	.+144    	; 0x2760 <MTIMER1_voidICUInit+0xb4>
    26d0:	2a 81       	ldd	r18, Y+2	; 0x02
    26d2:	3b 81       	ldd	r19, Y+3	; 0x03
    26d4:	23 30       	cpi	r18, 0x03	; 3
    26d6:	31 05       	cpc	r19, r1
    26d8:	54 f4       	brge	.+20     	; 0x26ee <MTIMER1_voidICUInit+0x42>
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	99 f0       	breq	.+38     	; 0x2708 <MTIMER1_voidICUInit+0x5c>
    26e2:	2a 81       	ldd	r18, Y+2	; 0x02
    26e4:	3b 81       	ldd	r19, Y+3	; 0x03
    26e6:	21 30       	cpi	r18, 0x01	; 1
    26e8:	31 05       	cpc	r19, r1
    26ea:	21 f1       	breq	.+72     	; 0x2734 <MTIMER1_voidICUInit+0x88>
    26ec:	7a c0       	rjmp	.+244    	; 0x27e2 <MTIMER1_voidICUInit+0x136>
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
    26f0:	9b 81       	ldd	r25, Y+3	; 0x03
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	91 05       	cpc	r25, r1
    26f6:	09 f4       	brne	.+2      	; 0x26fa <MTIMER1_voidICUInit+0x4e>
    26f8:	49 c0       	rjmp	.+146    	; 0x278c <MTIMER1_voidICUInit+0xe0>
    26fa:	2a 81       	ldd	r18, Y+2	; 0x02
    26fc:	3b 81       	ldd	r19, Y+3	; 0x03
    26fe:	24 30       	cpi	r18, 0x04	; 4
    2700:	31 05       	cpc	r19, r1
    2702:	09 f4       	brne	.+2      	; 0x2706 <MTIMER1_voidICUInit+0x5a>
    2704:	59 c0       	rjmp	.+178    	; 0x27b8 <MTIMER1_voidICUInit+0x10c>
    2706:	6d c0       	rjmp	.+218    	; 0x27e2 <MTIMER1_voidICUInit+0x136>
	{
	case TIMER1_NO_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2708:	ae e4       	ldi	r26, 0x4E	; 78
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ee e4       	ldi	r30, 0x4E	; 78
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	81 60       	ori	r24, 0x01	; 1
    2714:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    2716:	ae e4       	ldi	r26, 0x4E	; 78
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	ee e4       	ldi	r30, 0x4E	; 78
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	8d 7f       	andi	r24, 0xFD	; 253
    2722:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    2724:	ae e4       	ldi	r26, 0x4E	; 78
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ee e4       	ldi	r30, 0x4E	; 78
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	8b 7f       	andi	r24, 0xFB	; 251
    2730:	8c 93       	st	X, r24
    2732:	57 c0       	rjmp	.+174    	; 0x27e2 <MTIMER1_voidICUInit+0x136>
	case TIMER1_8_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    2734:	ae e4       	ldi	r26, 0x4E	; 78
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	ee e4       	ldi	r30, 0x4E	; 78
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	8e 7f       	andi	r24, 0xFE	; 254
    2740:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    2742:	ae e4       	ldi	r26, 0x4E	; 78
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ee e4       	ldi	r30, 0x4E	; 78
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	82 60       	ori	r24, 0x02	; 2
    274e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    2750:	ae e4       	ldi	r26, 0x4E	; 78
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	ee e4       	ldi	r30, 0x4E	; 78
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	8b 7f       	andi	r24, 0xFB	; 251
    275c:	8c 93       	st	X, r24
    275e:	41 c0       	rjmp	.+130    	; 0x27e2 <MTIMER1_voidICUInit+0x136>
	case TIMER1_64_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2760:	ae e4       	ldi	r26, 0x4E	; 78
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ee e4       	ldi	r30, 0x4E	; 78
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	81 60       	ori	r24, 0x01	; 1
    276c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    276e:	ae e4       	ldi	r26, 0x4E	; 78
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ee e4       	ldi	r30, 0x4E	; 78
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	82 60       	ori	r24, 0x02	; 2
    277a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS12);break;
    277c:	ae e4       	ldi	r26, 0x4E	; 78
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ee e4       	ldi	r30, 0x4E	; 78
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8b 7f       	andi	r24, 0xFB	; 251
    2788:	8c 93       	st	X, r24
    278a:	2b c0       	rjmp	.+86     	; 0x27e2 <MTIMER1_voidICUInit+0x136>
	case TIMER1_256_PRESCALER:
		CLR_BIT(TCCR1B,TCCR1B_CS10);
    278c:	ae e4       	ldi	r26, 0x4E	; 78
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	ee e4       	ldi	r30, 0x4E	; 78
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	8e 7f       	andi	r24, 0xFE	; 254
    2798:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    279a:	ae e4       	ldi	r26, 0x4E	; 78
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	ee e4       	ldi	r30, 0x4E	; 78
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	8d 7f       	andi	r24, 0xFD	; 253
    27a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    27a8:	ae e4       	ldi	r26, 0x4E	; 78
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	ee e4       	ldi	r30, 0x4E	; 78
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	84 60       	ori	r24, 0x04	; 4
    27b4:	8c 93       	st	X, r24
    27b6:	15 c0       	rjmp	.+42     	; 0x27e2 <MTIMER1_voidICUInit+0x136>
	case TIMER1_1024_PRESCALER:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    27b8:	ae e4       	ldi	r26, 0x4E	; 78
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	ee e4       	ldi	r30, 0x4E	; 78
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	81 60       	ori	r24, 0x01	; 1
    27c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_CS11);
    27c6:	ae e4       	ldi	r26, 0x4E	; 78
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	ee e4       	ldi	r30, 0x4E	; 78
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	8d 7f       	andi	r24, 0xFD	; 253
    27d2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);break;
    27d4:	ae e4       	ldi	r26, 0x4E	; 78
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	ee e4       	ldi	r30, 0x4E	; 78
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	84 60       	ori	r24, 0x04	; 4
    27e0:	8c 93       	st	X, r24
	default:break;
	}

}
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <MTIMER1_voidSetICUSense>:
void MTIMER1_voidSetICUSense(u8 Copy_u8ICUSense)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	00 d0       	rcall	.+0      	; 0x27f4 <MTIMER1_voidSetICUSense+0x6>
    27f4:	0f 92       	push	r0
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8ICUSense)
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	3b 83       	std	Y+3, r19	; 0x03
    2804:	2a 83       	std	Y+2, r18	; 0x02
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	91 05       	cpc	r25, r1
    280e:	69 f0       	breq	.+26     	; 0x282a <MTIMER1_voidSetICUSense+0x3c>
    2810:	2a 81       	ldd	r18, Y+2	; 0x02
    2812:	3b 81       	ldd	r19, Y+3	; 0x03
    2814:	22 30       	cpi	r18, 0x02	; 2
    2816:	31 05       	cpc	r19, r1
    2818:	79 f4       	brne	.+30     	; 0x2838 <MTIMER1_voidSetICUSense+0x4a>
	{
	case ICU_RISING : SET_BIT(TCCR1B,TCCR1B_ICES1);break ;
    281a:	ae e4       	ldi	r26, 0x4E	; 78
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	ee e4       	ldi	r30, 0x4E	; 78
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	80 64       	ori	r24, 0x40	; 64
    2826:	8c 93       	st	X, r24
    2828:	07 c0       	rjmp	.+14     	; 0x2838 <MTIMER1_voidSetICUSense+0x4a>
	case ICU_FALLING : CLR_BIT(TCCR1B,TCCR1B_ICES1);break ;
    282a:	ae e4       	ldi	r26, 0x4E	; 78
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	ee e4       	ldi	r30, 0x4E	; 78
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	8f 7b       	andi	r24, 0xBF	; 191
    2836:	8c 93       	st	X, r24
	default:break;
	}
}
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <MTIMER1_voidEnableICUInterrupt>:

void MTIMER1_voidEnableICUInterrupt()
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    284c:	a9 e5       	ldi	r26, 0x59	; 89
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e9 e5       	ldi	r30, 0x59	; 89
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 62       	ori	r24, 0x20	; 32
    2858:	8c 93       	st	X, r24
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <MTIMER1_voidDisableICUInterrupt>:
void MTIMER1_voidDisableICUInterrupt()
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    2868:	a9 e5       	ldi	r26, 0x59	; 89
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e9 e5       	ldi	r30, 0x59	; 89
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	8f 7d       	andi	r24, 0xDF	; 223
    2874:	8c 93       	st	X, r24
}
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <MTIMER1_voidGetICUValue>:
u16 MTIMER1_voidGetICUValue()
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    2884:	e6 e4       	ldi	r30, 0x46	; 70
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
}
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <MTIMER1_voidSetICUCallBack>:
void MTIMER1_voidSetICUCallBack(void (*Copy_pf)(void))
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <MTIMER1_voidSetICUCallBack+0x6>
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01

	ICU_PF=Copy_pf ;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	90 93 6f 00 	sts	0x006F, r25
    28a8:	80 93 6e 00 	sts	0x006E, r24
}
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <__vector_6>:

/*ICU*/
void __vector_6(void)  __attribute__((signal));
void __vector_6(void)
{
    28b6:	1f 92       	push	r1
    28b8:	0f 92       	push	r0
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	0f 92       	push	r0
    28be:	11 24       	eor	r1, r1
    28c0:	2f 93       	push	r18
    28c2:	3f 93       	push	r19
    28c4:	4f 93       	push	r20
    28c6:	5f 93       	push	r21
    28c8:	6f 93       	push	r22
    28ca:	7f 93       	push	r23
    28cc:	8f 93       	push	r24
    28ce:	9f 93       	push	r25
    28d0:	af 93       	push	r26
    28d2:	bf 93       	push	r27
    28d4:	ef 93       	push	r30
    28d6:	ff 93       	push	r31
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
	if(ICU_PF!=NULL)
    28e0:	80 91 6e 00 	lds	r24, 0x006E
    28e4:	90 91 6f 00 	lds	r25, 0x006F
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	29 f0       	breq	.+10     	; 0x28f6 <__vector_6+0x40>
	{
		ICU_PF() ;
    28ec:	e0 91 6e 00 	lds	r30, 0x006E
    28f0:	f0 91 6f 00 	lds	r31, 0x006F
    28f4:	09 95       	icall
	}

}
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	ff 91       	pop	r31
    28fc:	ef 91       	pop	r30
    28fe:	bf 91       	pop	r27
    2900:	af 91       	pop	r26
    2902:	9f 91       	pop	r25
    2904:	8f 91       	pop	r24
    2906:	7f 91       	pop	r23
    2908:	6f 91       	pop	r22
    290a:	5f 91       	pop	r21
    290c:	4f 91       	pop	r20
    290e:	3f 91       	pop	r19
    2910:	2f 91       	pop	r18
    2912:	0f 90       	pop	r0
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	0f 90       	pop	r0
    2918:	1f 90       	pop	r1
    291a:	18 95       	reti

0000291c <__vector_7>:
/*COMPA*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
    291c:	1f 92       	push	r1
    291e:	0f 92       	push	r0
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	0f 92       	push	r0
    2924:	11 24       	eor	r1, r1
    2926:	2f 93       	push	r18
    2928:	3f 93       	push	r19
    292a:	4f 93       	push	r20
    292c:	5f 93       	push	r21
    292e:	6f 93       	push	r22
    2930:	7f 93       	push	r23
    2932:	8f 93       	push	r24
    2934:	9f 93       	push	r25
    2936:	af 93       	push	r26
    2938:	bf 93       	push	r27
    293a:	ef 93       	push	r30
    293c:	ff 93       	push	r31
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_PF_CMP!=NULL)
    2946:	80 91 6c 00 	lds	r24, 0x006C
    294a:	90 91 6d 00 	lds	r25, 0x006D
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	29 f0       	breq	.+10     	; 0x295c <__vector_7+0x40>
	{
		Timer1_PF_CMP();
    2952:	e0 91 6c 00 	lds	r30, 0x006C
    2956:	f0 91 6d 00 	lds	r31, 0x006D
    295a:	09 95       	icall
	}
}
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	ff 91       	pop	r31
    2962:	ef 91       	pop	r30
    2964:	bf 91       	pop	r27
    2966:	af 91       	pop	r26
    2968:	9f 91       	pop	r25
    296a:	8f 91       	pop	r24
    296c:	7f 91       	pop	r23
    296e:	6f 91       	pop	r22
    2970:	5f 91       	pop	r21
    2972:	4f 91       	pop	r20
    2974:	3f 91       	pop	r19
    2976:	2f 91       	pop	r18
    2978:	0f 90       	pop	r0
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	0f 90       	pop	r0
    297e:	1f 90       	pop	r1
    2980:	18 95       	reti

00002982 <MTIMER2_voidInit>:
/**************************************TIMER2 ******************************************/
void MTIMER2_voidInit()
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_WGM20);
	CLR_BIT(TCCR2,TCCR2_WGM21);
	/*SEI*/
	SET_BIT(TIMSK,TIMSK_TOIE2);
#elif TIMER2_MODE==TIMER2_CTC_MODE
	CLR_BIT(TCCR2,TCCR2_WGM20);
    298a:	a5 e4       	ldi	r26, 0x45	; 69
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e5 e4       	ldi	r30, 0x45	; 69
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8f 7b       	andi	r24, 0xBF	; 191
    2996:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
    2998:	a5 e4       	ldi	r26, 0x45	; 69
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e5 e4       	ldi	r30, 0x45	; 69
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	88 60       	ori	r24, 0x08	; 8
    29a4:	8c 93       	st	X, r24
	/*Normal Operation*/
	CLR_BIT(TCCR2,TCCR2_COM20);
    29a6:	a5 e4       	ldi	r26, 0x45	; 69
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e5 e4       	ldi	r30, 0x45	; 69
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	8f 7e       	andi	r24, 0xEF	; 239
    29b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_COM21);
    29b4:	a5 e4       	ldi	r26, 0x45	; 69
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e5 e4       	ldi	r30, 0x45	; 69
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8f 7d       	andi	r24, 0xDF	; 223
    29c0:	8c 93       	st	X, r24
	/*SEI*/
	SET_BIT(TIMSK,TIMSK_OCIE2);
    29c2:	a9 e5       	ldi	r26, 0x59	; 89
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e9 e5       	ldi	r30, 0x59	; 89
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 68       	ori	r24, 0x80	; 128
    29ce:	8c 93       	st	X, r24
#if TIMER2_PRESCALER==TIMER2_NO_PRESCALER
	SET_BIT(TCCR2,TCCR2_CS20);
	CLR_BIT(TCCR2,TCCR2_CS21);
	CLR_BIT(TCCR2,TCCR2_CS22);
#elif TIMER2_PRESCALER==TIMER2_8_PRESCALER
	CLR_BIT(TCCR2,TCCR2_CS20);
    29d0:	a5 e4       	ldi	r26, 0x45	; 69
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e4       	ldi	r30, 0x45	; 69
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	8e 7f       	andi	r24, 0xFE	; 254
    29dc:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS21);
    29de:	a5 e4       	ldi	r26, 0x45	; 69
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e4       	ldi	r30, 0x45	; 69
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	82 60       	ori	r24, 0x02	; 2
    29ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS22);
    29ec:	a5 e4       	ldi	r26, 0x45	; 69
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e5 e4       	ldi	r30, 0x45	; 69
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	8b 7f       	andi	r24, 0xFB	; 251
    29f8:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS22);
#else
#error " Wrong Timer2 Prescaler Configuration"
#endif
}
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <MTIMER2_voidDisable>:
void MTIMER2_voidDisable()
{
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,TCCR2_CS20);
    2a08:	a5 e4       	ldi	r26, 0x45	; 69
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e5 e4       	ldi	r30, 0x45	; 69
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8e 7f       	andi	r24, 0xFE	; 254
    2a14:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    2a16:	a5 e4       	ldi	r26, 0x45	; 69
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e5 e4       	ldi	r30, 0x45	; 69
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	8d 7f       	andi	r24, 0xFD	; 253
    2a22:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS22);
    2a24:	a5 e4       	ldi	r26, 0x45	; 69
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e5 e4       	ldi	r30, 0x45	; 69
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8b 7f       	andi	r24, 0xFB	; 251
    2a30:	8c 93       	st	X, r24
}
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <MTIMER2_voidPreload>:
void MTIMER2_voidPreload(u8 Copy_u8Preload)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	0f 92       	push	r0
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Preload ;
    2a44:	e4 e4       	ldi	r30, 0x44	; 68
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	80 83       	st	Z, r24
}
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <MTIMER2_voidSetDutyCycle>:
void MTIMER2_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	0f 92       	push	r0
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8DutyCycle ;
    2a60:	e3 e4       	ldi	r30, 0x43	; 67
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	80 83       	st	Z, r24
}
    2a68:	0f 90       	pop	r0
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <MTIMER2_voidCompMatchValue>:
void MTIMER2_voidCompMatchValue(u8 Copy_u8ComMatchValue)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	0f 92       	push	r0
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8ComMatchValue ;
    2a7c:	e3 e4       	ldi	r30, 0x43	; 67
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	80 83       	st	Z, r24
}
    2a84:	0f 90       	pop	r0
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <MTIMER2_voidSetCallBack_OVF>:
void MTIMER2_voidSetCallBack_OVF(void (*Copy_pf)(void) )
{
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <MTIMER2_voidSetCallBack_OVF+0x6>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
	Timer2_PF_OVF=Copy_pf ;
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	90 93 71 00 	sts	0x0071, r25
    2aa2:	80 93 70 00 	sts	0x0070, r24
}
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <MTIMER2_voidSetCallBack_CMP>:
void MTIMER2_voidSetCallBack_CMP(void (*Copy_pf)(void) )
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <MTIMER2_voidSetCallBack_CMP+0x6>
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
	Timer2_PF_CMP=Copy_pf ;
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	90 93 73 00 	sts	0x0073, r25
    2ac6:	80 93 72 00 	sts	0x0072, r24
}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <__vector_5>:
/*OVF*/
void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
    2ad4:	1f 92       	push	r1
    2ad6:	0f 92       	push	r0
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	0f 92       	push	r0
    2adc:	11 24       	eor	r1, r1
    2ade:	2f 93       	push	r18
    2ae0:	3f 93       	push	r19
    2ae2:	4f 93       	push	r20
    2ae4:	5f 93       	push	r21
    2ae6:	6f 93       	push	r22
    2ae8:	7f 93       	push	r23
    2aea:	8f 93       	push	r24
    2aec:	9f 93       	push	r25
    2aee:	af 93       	push	r26
    2af0:	bf 93       	push	r27
    2af2:	ef 93       	push	r30
    2af4:	ff 93       	push	r31
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_PF_OVF!=NULL)
    2afe:	80 91 70 00 	lds	r24, 0x0070
    2b02:	90 91 71 00 	lds	r25, 0x0071
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	29 f0       	breq	.+10     	; 0x2b14 <__vector_5+0x40>
	{
		Timer2_PF_OVF();
    2b0a:	e0 91 70 00 	lds	r30, 0x0070
    2b0e:	f0 91 71 00 	lds	r31, 0x0071
    2b12:	09 95       	icall
	}
}
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	ff 91       	pop	r31
    2b1a:	ef 91       	pop	r30
    2b1c:	bf 91       	pop	r27
    2b1e:	af 91       	pop	r26
    2b20:	9f 91       	pop	r25
    2b22:	8f 91       	pop	r24
    2b24:	7f 91       	pop	r23
    2b26:	6f 91       	pop	r22
    2b28:	5f 91       	pop	r21
    2b2a:	4f 91       	pop	r20
    2b2c:	3f 91       	pop	r19
    2b2e:	2f 91       	pop	r18
    2b30:	0f 90       	pop	r0
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	0f 90       	pop	r0
    2b36:	1f 90       	pop	r1
    2b38:	18 95       	reti

00002b3a <__vector_4>:
/*CMP*/
void __vector_4(void)  __attribute__((signal));
void __vector_4(void)
{
    2b3a:	1f 92       	push	r1
    2b3c:	0f 92       	push	r0
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	0f 92       	push	r0
    2b42:	11 24       	eor	r1, r1
    2b44:	2f 93       	push	r18
    2b46:	3f 93       	push	r19
    2b48:	4f 93       	push	r20
    2b4a:	5f 93       	push	r21
    2b4c:	6f 93       	push	r22
    2b4e:	7f 93       	push	r23
    2b50:	8f 93       	push	r24
    2b52:	9f 93       	push	r25
    2b54:	af 93       	push	r26
    2b56:	bf 93       	push	r27
    2b58:	ef 93       	push	r30
    2b5a:	ff 93       	push	r31
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_PF_CMP!=NULL)
    2b64:	80 91 72 00 	lds	r24, 0x0072
    2b68:	90 91 73 00 	lds	r25, 0x0073
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	29 f0       	breq	.+10     	; 0x2b7a <__vector_4+0x40>
	{

		Timer2_PF_CMP();
    2b70:	e0 91 72 00 	lds	r30, 0x0072
    2b74:	f0 91 73 00 	lds	r31, 0x0073
    2b78:	09 95       	icall
	}
}
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	ff 91       	pop	r31
    2b80:	ef 91       	pop	r30
    2b82:	bf 91       	pop	r27
    2b84:	af 91       	pop	r26
    2b86:	9f 91       	pop	r25
    2b88:	8f 91       	pop	r24
    2b8a:	7f 91       	pop	r23
    2b8c:	6f 91       	pop	r22
    2b8e:	5f 91       	pop	r21
    2b90:	4f 91       	pop	r20
    2b92:	3f 91       	pop	r19
    2b94:	2f 91       	pop	r18
    2b96:	0f 90       	pop	r0
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	0f 90       	pop	r0
    2b9c:	1f 90       	pop	r1
    2b9e:	18 95       	reti

00002ba0 <MUART_voidInit>:
#include "MUSART_interface.h"
#include "MUSART_register.h"
#include "MUSART_config.h"

void MUART_voidInit()
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	0f 92       	push	r0
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
	u8 Temp=0 ;
    2baa:	19 82       	std	Y+1, r1	; 0x01
	/*Enable Transmitter & Receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    2bac:	aa e2       	ldi	r26, 0x2A	; 42
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	ea e2       	ldi	r30, 0x2A	; 42
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 61       	ori	r24, 0x10	; 16
    2bb8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    2bba:	aa e2       	ldi	r26, 0x2A	; 42
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	ea e2       	ldi	r30, 0x2A	; 42
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 60       	ori	r24, 0x08	; 8
    2bc6:	8c 93       	st	X, r24
	/*8-bit*/
	SET_BIT(Temp,UCSRC_UCSZ0);
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	82 60       	ori	r24, 0x02	; 2
    2bcc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Temp,UCSRC_UCSZ1);
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	84 60       	ori	r24, 0x04	; 4
    2bd2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    2bd4:	aa e2       	ldi	r26, 0x2A	; 42
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	ea e2       	ldi	r30, 0x2A	; 42
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	8b 7f       	andi	r24, 0xFB	; 251
    2be0:	8c 93       	st	X, r24
	/*Select UCSRC Register*/
	SET_BIT(Temp,UCSRC_URSEL);
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	80 68       	ori	r24, 0x80	; 128
    2be6:	89 83       	std	Y+1, r24	; 0x01
	/*ASynch*/
	CLR_BIT(Temp,UCSRC_UMSEL);
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	8f 7b       	andi	r24, 0xBF	; 191
    2bec:	89 83       	std	Y+1, r24	; 0x01
	/*Stop bit is 1 i-bit */
	CLR_BIT(Temp,UCSRC_USBS);
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	87 7f       	andi	r24, 0xF7	; 247
    2bf2:	89 83       	std	Y+1, r24	; 0x01
	/*Select BaudRate*/
	UCSRC=Temp ;
    2bf4:	e0 e4       	ldi	r30, 0x40	; 64
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	80 83       	st	Z, r24
	UBRRL = 51;
    2bfc:	e9 e2       	ldi	r30, 0x29	; 41
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	83 e3       	ldi	r24, 0x33	; 51
    2c02:	80 83       	st	Z, r24
}
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <MUART_voidTransmit>:
void MUART_voidTransmit(u8 Copy_u8Data)
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	0f 92       	push	r0
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	89 83       	std	Y+1, r24	; 0x01
	while( !GET_BIT(UCSRA,UCSRA_UDRE) );
    2c18:	eb e2       	ldi	r30, 0x2B	; 43
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	82 95       	swap	r24
    2c20:	86 95       	lsr	r24
    2c22:	87 70       	andi	r24, 0x07	; 7
    2c24:	88 23       	and	r24, r24
    2c26:	c1 f3       	breq	.-16     	; 0x2c18 <MUART_voidTransmit+0xc>
	UDR=Copy_u8Data ;
    2c28:	ec e2       	ldi	r30, 0x2C	; 44
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	80 83       	st	Z, r24
}
    2c30:	0f 90       	pop	r0
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <MUART_voidRecieve>:
u8 MUART_voidRecieve()
{
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
	while( !GET_BIT(UCSRA,UCSRA_RXC) );
    2c40:	eb e2       	ldi	r30, 0x2B	; 43
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	88 23       	and	r24, r24
    2c48:	dc f7       	brge	.-10     	; 0x2c40 <MUART_voidRecieve+0x8>
	return UDR ;
    2c4a:	ec e2       	ldi	r30, 0x2C	; 44
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
}
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <main>:

void EnableSSD();
u8 Temp=0 ;

int main()
{
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	2a 97       	sbiw	r28, 0x0a	; 10
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
	u8 f=0,flag=0,t ;
    2c6e:	1e 82       	std	Y+6, r1	; 0x06
    2c70:	1d 82       	std	Y+5, r1	; 0x05
	u16 Light;
	char x;
	led_port_t Leds ={LED_PORT_SOURCE,LED_PORTA};
    2c72:	83 e0       	ldi	r24, 0x03	; 3
    2c74:	8f 83       	std	Y+7, r24	; 0x07
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	88 87       	std	Y+8, r24	; 0x08
	Port_voidInit();
    2c7a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <Port_voidInit>
	MSPI_voidInit();
    2c7e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <MSPI_voidInit>
	MGIE_voidEnable();
    2c82:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <MGIE_voidEnable>
	MTIMER2_voidInit();
    2c86:	0e 94 c1 14 	call	0x2982	; 0x2982 <MTIMER2_voidInit>
	MTIMER2_voidCompMatchValue(200);
    2c8a:	88 ec       	ldi	r24, 0xC8	; 200
    2c8c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <MTIMER2_voidCompMatchValue>
	MTIMER2_voidSetCallBack_CMP(EnableSSD);
    2c90:	89 ef       	ldi	r24, 0xF9	; 249
    2c92:	96 e1       	ldi	r25, 0x16	; 22
    2c94:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <MTIMER2_voidSetCallBack_CMP>

	while(1)
	{
		x=MSPI_voidTranceive(0);
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	0e 94 04 10 	call	0x2008	; 0x2008 <MSPI_voidTranceive>
    2c9e:	89 83       	std	Y+1, r24	; 0x01
		if(x>=20 && x<= 40)
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	84 31       	cpi	r24, 0x14	; 20
    2ca4:	e8 f0       	brcs	.+58     	; 0x2ce0 <main+0x8a>
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	89 32       	cpi	r24, 0x29	; 41
    2caa:	d0 f4       	brcc	.+52     	; 0x2ce0 <main+0x8a>
		{
			if(x!=Temp)
    2cac:	90 91 74 00 	lds	r25, 0x0074
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	89 17       	cp	r24, r25
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <main+0x62>
			{
				f=0;
    2cb6:	1e 82       	std	Y+6, r1	; 0x06
			}
			Temp=x ;
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	80 93 74 00 	sts	0x0074, r24
			if (x>35 && f==0)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	84 32       	cpi	r24, 0x24	; 36
    2cc2:	28 f0       	brcs	.+10     	; 0x2cce <main+0x78>
    2cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc6:	88 23       	and	r24, r24
    2cc8:	11 f4       	brne	.+4      	; 0x2cce <main+0x78>
			{
				HDCMOTOR_voidPlay();
    2cca:	0e 94 af 05 	call	0xb5e	; 0xb5e <HDCMOTOR_voidPlay>
			}
			if( x<=35 && f==0 )
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	84 32       	cpi	r24, 0x24	; 36
    2cd2:	10 f7       	brcc	.-60     	; 0x2c98 <main+0x42>
    2cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd6:	88 23       	and	r24, r24
    2cd8:	f9 f6       	brne	.-66     	; 0x2c98 <main+0x42>
			{
				HDCMOTOR_voidStop();
    2cda:	0e 94 a3 05 	call	0xb46	; 0xb46 <HDCMOTOR_voidStop>
    2cde:	dc cf       	rjmp	.-72     	; 0x2c98 <main+0x42>
			}
		}
		else if(x>=200 && x<= 250)
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	88 3c       	cpi	r24, 0xC8	; 200
    2ce4:	30 f1       	brcs	.+76     	; 0x2d32 <main+0xdc>
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	8b 3f       	cpi	r24, 0xFB	; 251
    2cea:	18 f5       	brcc	.+70     	; 0x2d32 <main+0xdc>
		{
			if(x!=t)
    2cec:	99 81       	ldd	r25, Y+1	; 0x01
    2cee:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf0:	98 17       	cp	r25, r24
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <main+0xa0>
			{
				flag=0 ;
    2cf4:	1d 82       	std	Y+5, r1	; 0x05
			}
			t=x;
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	8c 83       	std	Y+4, r24	; 0x04
			if(flag==0 )
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	88 23       	and	r24, r24
    2cfe:	61 f6       	brne	.-104    	; 0x2c98 <main+0x42>
			{
				Light=Mapping(255,0,250,200,x) ;
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	e8 2f       	mov	r30, r24
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	8f ef       	ldi	r24, 0xFF	; 255
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	4a ef       	ldi	r20, 0xFA	; 250
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	28 ec       	ldi	r18, 0xC8	; 200
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	8f 01       	movw	r16, r30
    2d18:	0e 94 45 06 	call	0xc8a	; 0xc8a <Mapping>
    2d1c:	9b 83       	std	Y+3, r25	; 0x03
    2d1e:	8a 83       	std	Y+2, r24	; 0x02
				HLED_voidLedPortState(Leds,~Light);
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	28 2f       	mov	r18, r24
    2d24:	20 95       	com	r18
    2d26:	8f 81       	ldd	r24, Y+7	; 0x07
    2d28:	98 85       	ldd	r25, Y+8	; 0x08
    2d2a:	62 2f       	mov	r22, r18
    2d2c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <HLED_voidLedPortState>
    2d30:	b3 cf       	rjmp	.-154    	; 0x2c98 <main+0x42>
			}
		}
		else
		{
			switch(x)
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	3a 87       	std	Y+10, r19	; 0x0a
    2d3a:	29 87       	std	Y+9, r18	; 0x09
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	84 33       	cpi	r24, 0x34	; 52
    2d42:	91 05       	cpc	r25, r1
    2d44:	b9 f1       	breq	.+110    	; 0x2db4 <main+0x15e>
    2d46:	29 85       	ldd	r18, Y+9	; 0x09
    2d48:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d4a:	25 33       	cpi	r18, 0x35	; 53
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	84 f4       	brge	.+32     	; 0x2d70 <main+0x11a>
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	82 33       	cpi	r24, 0x32	; 50
    2d56:	91 05       	cpc	r25, r1
    2d58:	21 f1       	breq	.+72     	; 0x2da2 <main+0x14c>
    2d5a:	29 85       	ldd	r18, Y+9	; 0x09
    2d5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d5e:	23 33       	cpi	r18, 0x33	; 51
    2d60:	31 05       	cpc	r19, r1
    2d62:	1c f5       	brge	.+70     	; 0x2daa <main+0x154>
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	81 33       	cpi	r24, 0x31	; 49
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	b1 f0       	breq	.+44     	; 0x2d9a <main+0x144>
    2d6e:	94 cf       	rjmp	.-216    	; 0x2c98 <main+0x42>
    2d70:	29 85       	ldd	r18, Y+9	; 0x09
    2d72:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d74:	26 33       	cpi	r18, 0x36	; 54
    2d76:	31 05       	cpc	r19, r1
    2d78:	39 f1       	breq	.+78     	; 0x2dc8 <main+0x172>
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	86 33       	cpi	r24, 0x36	; 54
    2d80:	91 05       	cpc	r25, r1
    2d82:	ec f0       	brlt	.+58     	; 0x2dbe <main+0x168>
    2d84:	29 85       	ldd	r18, Y+9	; 0x09
    2d86:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d88:	2c 34       	cpi	r18, 0x4C	; 76
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	11 f1       	breq	.+68     	; 0x2dd2 <main+0x17c>
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	8c 36       	cpi	r24, 0x6C	; 108
    2d94:	91 05       	cpc	r25, r1
    2d96:	29 f1       	breq	.+74     	; 0x2de2 <main+0x18c>
    2d98:	7f cf       	rjmp	.-258    	; 0x2c98 <main+0x42>
			{
			case '1':HSERVO_voidSetAngle(180);break;
    2d9a:	84 eb       	ldi	r24, 0xB4	; 180
    2d9c:	0e 94 16 06 	call	0xc2c	; 0xc2c <HSERVO_voidSetAngle>
    2da0:	7b cf       	rjmp	.-266    	; 0x2c98 <main+0x42>
			case '2':HSERVO_voidSetAngle(0);break;
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	0e 94 16 06 	call	0xc2c	; 0xc2c <HSERVO_voidSetAngle>
    2da8:	77 cf       	rjmp	.-274    	; 0x2c98 <main+0x42>
			case '3':HDCMOTOR_voidPlay();f=1;break;
    2daa:	0e 94 af 05 	call	0xb5e	; 0xb5e <HDCMOTOR_voidPlay>
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	8e 83       	std	Y+6, r24	; 0x06
    2db2:	72 cf       	rjmp	.-284    	; 0x2c98 <main+0x42>
			case '4':HDCMOTOR_voidStop();f=1;break;
    2db4:	0e 94 a3 05 	call	0xb46	; 0xb46 <HDCMOTOR_voidStop>
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	8e 83       	std	Y+6, r24	; 0x06
    2dbc:	6d cf       	rjmp	.-294    	; 0x2c98 <main+0x42>
			case '5':HStepperPlay_CW(270);break;
    2dbe:	8e e0       	ldi	r24, 0x0E	; 14
    2dc0:	91 e0       	ldi	r25, 0x01	; 1
    2dc2:	0e 94 a2 09 	call	0x1344	; 0x1344 <HStepperPlay_CW>
    2dc6:	68 cf       	rjmp	.-304    	; 0x2c98 <main+0x42>
			case '6':HStepperPlay_CCW(270);break;
    2dc8:	8e e0       	ldi	r24, 0x0E	; 14
    2dca:	91 e0       	ldi	r25, 0x01	; 1
    2dcc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <HStepperPlay_CCW>
    2dd0:	63 cf       	rjmp	.-314    	; 0x2c98 <main+0x42>
			case 'L':HLED_voidLedPortState(Leds,LED_PORT_ON);flag=1;break;
    2dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd4:	98 85       	ldd	r25, Y+8	; 0x08
    2dd6:	6f ef       	ldi	r22, 0xFF	; 255
    2dd8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <HLED_voidLedPortState>
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	5b cf       	rjmp	.-330    	; 0x2c98 <main+0x42>
			case 'l':HLED_voidLedPortState(Leds,LED_PORT_OFF);flag=1;break;
    2de2:	8f 81       	ldd	r24, Y+7	; 0x07
    2de4:	98 85       	ldd	r25, Y+8	; 0x08
    2de6:	60 e0       	ldi	r22, 0x00	; 0
    2de8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <HLED_voidLedPortState>
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	8d 83       	std	Y+5, r24	; 0x05
    2df0:	53 cf       	rjmp	.-346    	; 0x2c98 <main+0x42>

00002df2 <EnableSSD>:
			}
		}
	}
}
void EnableSSD()
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <EnableSSD+0x6>
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
	static u8 f=0,counter=0;
	u8 D1,D2 ;
	counter++;
    2dfc:	80 91 75 00 	lds	r24, 0x0075
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	80 93 75 00 	sts	0x0075, r24
	D1=Temp%10 ;
    2e06:	80 91 74 00 	lds	r24, 0x0074
    2e0a:	9a e0       	ldi	r25, 0x0A	; 10
    2e0c:	69 2f       	mov	r22, r25
    2e0e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__udivmodqi4>
    2e12:	89 2f       	mov	r24, r25
    2e14:	8a 83       	std	Y+2, r24	; 0x02
	D2=Temp/10 ;
    2e16:	80 91 74 00 	lds	r24, 0x0074
    2e1a:	9a e0       	ldi	r25, 0x0A	; 10
    2e1c:	69 2f       	mov	r22, r25
    2e1e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__udivmodqi4>
    2e22:	89 83       	std	Y+1, r24	; 0x01
	if(counter==100)//5ms
    2e24:	80 91 75 00 	lds	r24, 0x0075
    2e28:	84 36       	cpi	r24, 0x64	; 100
    2e2a:	11 f5       	brne	.+68     	; 0x2e70 <EnableSSD+0x7e>
	{
		counter=0;
    2e2c:	10 92 75 00 	sts	0x0075, r1
		if(f==0)
    2e30:	80 91 76 00 	lds	r24, 0x0076
    2e34:	88 23       	and	r24, r24
    2e36:	79 f4       	brne	.+30     	; 0x2e56 <EnableSSD+0x64>
		{
			HSSD_voidEnable(SSD_PORTC,SSD_PIN7);
    2e38:	83 e0       	ldi	r24, 0x03	; 3
    2e3a:	67 e0       	ldi	r22, 0x07	; 7
    2e3c:	0e 94 a0 06 	call	0xd40	; 0xd40 <HSSD_voidEnable>
			HSSD_voidDisable(SSD_PORTB,SSD_PIN1);
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	0e 94 b1 06 	call	0xd62	; 0xd62 <HSSD_voidDisable>
			HSSD_voidSendNumber(D1);
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	0e 94 c2 06 	call	0xd84	; 0xd84 <HSSD_voidSendNumber>
			f=1 ;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	80 93 76 00 	sts	0x0076, r24
    2e54:	0d c0       	rjmp	.+26     	; 0x2e70 <EnableSSD+0x7e>
		}
		else
		{
			HSSD_voidDisable(SSD_PORTC,SSD_PIN7);
    2e56:	83 e0       	ldi	r24, 0x03	; 3
    2e58:	67 e0       	ldi	r22, 0x07	; 7
    2e5a:	0e 94 b1 06 	call	0xd62	; 0xd62 <HSSD_voidDisable>
			HSSD_voidEnable(SSD_PORTB,SSD_PIN1);
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	0e 94 a0 06 	call	0xd40	; 0xd40 <HSSD_voidEnable>
			HSSD_voidSendNumber(D2);
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	0e 94 c2 06 	call	0xd84	; 0xd84 <HSSD_voidSendNumber>
			f=0 ;
    2e6c:	10 92 76 00 	sts	0x0076, r1
		}
	}

}
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <__mulsi3>:
    2e7a:	62 9f       	mul	r22, r18
    2e7c:	d0 01       	movw	r26, r0
    2e7e:	73 9f       	mul	r23, r19
    2e80:	f0 01       	movw	r30, r0
    2e82:	82 9f       	mul	r24, r18
    2e84:	e0 0d       	add	r30, r0
    2e86:	f1 1d       	adc	r31, r1
    2e88:	64 9f       	mul	r22, r20
    2e8a:	e0 0d       	add	r30, r0
    2e8c:	f1 1d       	adc	r31, r1
    2e8e:	92 9f       	mul	r25, r18
    2e90:	f0 0d       	add	r31, r0
    2e92:	83 9f       	mul	r24, r19
    2e94:	f0 0d       	add	r31, r0
    2e96:	74 9f       	mul	r23, r20
    2e98:	f0 0d       	add	r31, r0
    2e9a:	65 9f       	mul	r22, r21
    2e9c:	f0 0d       	add	r31, r0
    2e9e:	99 27       	eor	r25, r25
    2ea0:	72 9f       	mul	r23, r18
    2ea2:	b0 0d       	add	r27, r0
    2ea4:	e1 1d       	adc	r30, r1
    2ea6:	f9 1f       	adc	r31, r25
    2ea8:	63 9f       	mul	r22, r19
    2eaa:	b0 0d       	add	r27, r0
    2eac:	e1 1d       	adc	r30, r1
    2eae:	f9 1f       	adc	r31, r25
    2eb0:	bd 01       	movw	r22, r26
    2eb2:	cf 01       	movw	r24, r30
    2eb4:	11 24       	eor	r1, r1
    2eb6:	08 95       	ret

00002eb8 <__udivmodqi4>:
    2eb8:	99 1b       	sub	r25, r25
    2eba:	79 e0       	ldi	r23, 0x09	; 9
    2ebc:	04 c0       	rjmp	.+8      	; 0x2ec6 <__udivmodqi4_ep>

00002ebe <__udivmodqi4_loop>:
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	96 17       	cp	r25, r22
    2ec2:	08 f0       	brcs	.+2      	; 0x2ec6 <__udivmodqi4_ep>
    2ec4:	96 1b       	sub	r25, r22

00002ec6 <__udivmodqi4_ep>:
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	7a 95       	dec	r23
    2eca:	c9 f7       	brne	.-14     	; 0x2ebe <__udivmodqi4_loop>
    2ecc:	80 95       	com	r24
    2ece:	08 95       	ret

00002ed0 <__udivmodhi4>:
    2ed0:	aa 1b       	sub	r26, r26
    2ed2:	bb 1b       	sub	r27, r27
    2ed4:	51 e1       	ldi	r21, 0x11	; 17
    2ed6:	07 c0       	rjmp	.+14     	; 0x2ee6 <__udivmodhi4_ep>

00002ed8 <__udivmodhi4_loop>:
    2ed8:	aa 1f       	adc	r26, r26
    2eda:	bb 1f       	adc	r27, r27
    2edc:	a6 17       	cp	r26, r22
    2ede:	b7 07       	cpc	r27, r23
    2ee0:	10 f0       	brcs	.+4      	; 0x2ee6 <__udivmodhi4_ep>
    2ee2:	a6 1b       	sub	r26, r22
    2ee4:	b7 0b       	sbc	r27, r23

00002ee6 <__udivmodhi4_ep>:
    2ee6:	88 1f       	adc	r24, r24
    2ee8:	99 1f       	adc	r25, r25
    2eea:	5a 95       	dec	r21
    2eec:	a9 f7       	brne	.-22     	; 0x2ed8 <__udivmodhi4_loop>
    2eee:	80 95       	com	r24
    2ef0:	90 95       	com	r25
    2ef2:	bc 01       	movw	r22, r24
    2ef4:	cd 01       	movw	r24, r26
    2ef6:	08 95       	ret

00002ef8 <__udivmodsi4>:
    2ef8:	a1 e2       	ldi	r26, 0x21	; 33
    2efa:	1a 2e       	mov	r1, r26
    2efc:	aa 1b       	sub	r26, r26
    2efe:	bb 1b       	sub	r27, r27
    2f00:	fd 01       	movw	r30, r26
    2f02:	0d c0       	rjmp	.+26     	; 0x2f1e <__udivmodsi4_ep>

00002f04 <__udivmodsi4_loop>:
    2f04:	aa 1f       	adc	r26, r26
    2f06:	bb 1f       	adc	r27, r27
    2f08:	ee 1f       	adc	r30, r30
    2f0a:	ff 1f       	adc	r31, r31
    2f0c:	a2 17       	cp	r26, r18
    2f0e:	b3 07       	cpc	r27, r19
    2f10:	e4 07       	cpc	r30, r20
    2f12:	f5 07       	cpc	r31, r21
    2f14:	20 f0       	brcs	.+8      	; 0x2f1e <__udivmodsi4_ep>
    2f16:	a2 1b       	sub	r26, r18
    2f18:	b3 0b       	sbc	r27, r19
    2f1a:	e4 0b       	sbc	r30, r20
    2f1c:	f5 0b       	sbc	r31, r21

00002f1e <__udivmodsi4_ep>:
    2f1e:	66 1f       	adc	r22, r22
    2f20:	77 1f       	adc	r23, r23
    2f22:	88 1f       	adc	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	1a 94       	dec	r1
    2f28:	69 f7       	brne	.-38     	; 0x2f04 <__udivmodsi4_loop>
    2f2a:	60 95       	com	r22
    2f2c:	70 95       	com	r23
    2f2e:	80 95       	com	r24
    2f30:	90 95       	com	r25
    2f32:	9b 01       	movw	r18, r22
    2f34:	ac 01       	movw	r20, r24
    2f36:	bd 01       	movw	r22, r26
    2f38:	cf 01       	movw	r24, r30
    2f3a:	08 95       	ret

00002f3c <__prologue_saves__>:
    2f3c:	2f 92       	push	r2
    2f3e:	3f 92       	push	r3
    2f40:	4f 92       	push	r4
    2f42:	5f 92       	push	r5
    2f44:	6f 92       	push	r6
    2f46:	7f 92       	push	r7
    2f48:	8f 92       	push	r8
    2f4a:	9f 92       	push	r9
    2f4c:	af 92       	push	r10
    2f4e:	bf 92       	push	r11
    2f50:	cf 92       	push	r12
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	ca 1b       	sub	r28, r26
    2f66:	db 0b       	sbc	r29, r27
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	09 94       	ijmp

00002f74 <__epilogue_restores__>:
    2f74:	2a 88       	ldd	r2, Y+18	; 0x12
    2f76:	39 88       	ldd	r3, Y+17	; 0x11
    2f78:	48 88       	ldd	r4, Y+16	; 0x10
    2f7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f80:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f82:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f84:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f86:	b9 84       	ldd	r11, Y+9	; 0x09
    2f88:	c8 84       	ldd	r12, Y+8	; 0x08
    2f8a:	df 80       	ldd	r13, Y+7	; 0x07
    2f8c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f8e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f90:	0c 81       	ldd	r16, Y+4	; 0x04
    2f92:	1b 81       	ldd	r17, Y+3	; 0x03
    2f94:	aa 81       	ldd	r26, Y+2	; 0x02
    2f96:	b9 81       	ldd	r27, Y+1	; 0x01
    2f98:	ce 0f       	add	r28, r30
    2f9a:	d1 1d       	adc	r29, r1
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	ed 01       	movw	r28, r26
    2fa8:	08 95       	ret

00002faa <_exit>:
    2faa:	f8 94       	cli

00002fac <__stop_program>:
    2fac:	ff cf       	rjmp	.-2      	; 0x2fac <__stop_program>
